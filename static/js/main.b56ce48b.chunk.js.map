{"version":3,"sources":["components/boards/Board.js","components/ships/Ships.js","components/boards/UserBoard.js","components/boards/OpponentBoard.js","components/navigation/msg-icon.png","components/navigation/FriendRequests.js","components/navigation/Navigation.js","components/boards/ChatBox.js","components/footer/Footer.js","components/boards/Game.js","components/homeBoard/HomeBoard.js","components/findMatch/FindMatch.js","components/friends/SingleFriend.js","components/friends/Friends.js","components/friends/FriendsHome.js","components/logReg/Login.js","components/logReg/Register.js","components/leaderboard/Leaderboard.js","socket/socketImport.js","App.js","reportWebVitals.js","index.js"],"names":["AssembleBoard","gameRoute","onSquareClicked","route","allSquares","i","j","push","row","String","fromCharCode","col","colStart","rowStart","handleSquareClick","e","parentBoard","target","parentElement","classList","contains","map","square","onClick","style","gridArea","className","id","Ships","rotating","orientation","selectedShip","selectedShipName","shipIsSelected","setManualGridLocation","onShipSelect","userBoard","document","querySelector","cursor","zIndex","border","parseInt","offsetWidth","offsetHeight","collisionDetection","item1","item2","d1Offset","$","offset","d1Height","outerHeight","d1Width","outerWidth","d1Top","top","d1Left","left","d2Offset","d2Height","d2Width","d2Top","d2Left","addEventListener","areaIsClear","ships","querySelectorAll","ship","console","log","window","oncontextmenu","transform","keyCode","preventDefault","undefined","onmouseover","userGrid","childShip","targetId","substring","indexOf","length","remove","gridColumn","gridRow","add","UserBoard","yourTurn","setYourTurn","socket","friendSocket","shipHit","useEffect","on","shot","oppShot","getElementById","applyHitOrMiss","off","hit","matchOppShotToBoard","emit","shotSquare","socketid","Board","OpponentBoard","hitSquares","data","clickedSquare","result","count","countHitsOnShip","squares","FriendRequests","setUnsortedFriends","username","useState","friendRequests","setFriendRequests","updateRequests","a","navBar","fetch","res","ok","Error","json","requests","setProperty","split","removeRequest","friend","newRequestList","newRequestListArray","index","splice","join","method","headers","body","JSON","stringify","requestlist","res2","onRemoveRequest","addFriend","value","friendList","friendArray","friendlistOfFriends","friendSocketId","user","friendlistOfFriendsArray","friends","includes","forEach","f","friendlist","res3","allF","response","name","status","friendname","res4","addFriendStart","Dropdown","Toggle","variant","src","msgIcon","alt","Menu","request","Navigation","setSearch","onRouteChange","handleExitClick","ChatBox","opponentName","chatText","setChatText","chatBox","handleEnterBtn","message","handleReceivedMessage","removeEventListener","msgNode","createElement","textNode","nameNode","text","createTextNode","appendChild","scrollTop","scrollHeight","onChange","type","placeholder","Footer","Game","checkOppStatusInterval","setCheckOppStatusInterval","setRoute","setGameRoute","playerIsReady","setPlayerIsReady","opponentIsReady","setOpponentIsReady","addWin","setTimeout","alert","setInterval","checkIfOpponentIsOnline","clearInterval","gameInstructions","score","friendIsOnline","onlineFriends","readyBtn","opacity","HomeBoard","FindMatch","currentSocket","search","findMatchInterval","setFindMatchInterval","setOpponentName","setFriendSocket","senderName","senderSocket","searchForMatch","stopSearching","updateSearching","match","receiverSocket","SingleFriend","handleInvite","btn","disabled","childNodes","nodeValue","sendInvite","innerHTML","acceptInvite","Friends","unsortedFriends","showOnlineStatusToFriends","allFriends","setAllFriends","friendFilter","setFriendFilter","friendSearch","setFriendSearch","friendsOnline","setFriendsOnline","fetchFriends","getOnlineFriends","timer","sortFriends","offlineFriends","justAdded","addFriendToOffline","olF","concat","sendFriendRequest","friendAlert","friendName","friendsRequests","friendsRequestsArray","friendrequests","toLowerCase","FriendsHome","Login","loadUser","userName","setUserName","password","setPassword","login","onSubmitLogin","Register","register","then","Leaderboard","topFive","setTopFive","getTopPlayers","tempArr","wins","player","io","App","setUser","setCurrentSocket","removeUserSocket","updateLastOnline","myInterval","response1","show","returnValue","onkeydown","loginBtn","registerBtn","logUsername","registerUsername","logPassword","registerPassword","friendRequestBtn","code","click","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.b56ce48b.chunk.js","sourcesContent":["import React from 'react';\r\nimport './board.css';\r\n\r\nconst AssembleBoard = ({gameRoute, route, onSquareClicked}) => {\r\n    const allSquares = [];\r\n    for (let i = 1; i < 11; i++) {\r\n        for (let j = 0; j < 10; j++) {\r\n            allSquares.push({row: String.fromCharCode(97 + j), col: i, colStart: i, rowStart: j + 1})\r\n        }\r\n    }\r\n\r\n    const handleSquareClick = (e) => {\r\n        const parentBoard = e.target.parentElement.parentElement.parentElement;\r\n        if (gameRoute === 'gameInProgress' && parentBoard.classList.contains('opponentBoard')) {\r\n            onSquareClicked(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        allSquares.map(square => {\r\n            return (\r\n                <div\r\n                    onClick={handleSquareClick}\r\n                    style={{gridArea: square.row + square.col}}\r\n                    className={'singleSquare ' + square.row + ' ' + square.row + square.col}\r\n                    key={square.row + square.col}\r\n                    id={square.colStart + '-' + square.rowStart}\r\n                >\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default AssembleBoard;\r\n","// import react from 'react';\r\nimport $ from 'jquery';\r\nimport './ships.css';\r\nimport '../boards/board.css';\r\n\r\nconst Ships = ({gameRoute, route}) => {\r\n    let rotating = false;\r\n    let orientation = 'hor';\r\n    let selectedShip = '';\r\n    let selectedShipName = '';\r\n    let shipIsSelected = false;\r\n    let setManualGridLocation = false;\r\n\r\n    // Decide what happens when a ship is selected to move\r\n\r\n    const onShipSelect = (e) => {\r\n        if (!shipIsSelected && gameRoute === 'placeShips') {\r\n            const userBoard = document.querySelector('.userBoard');\r\n            shipIsSelected = true;\r\n            selectedShip = e.target.parentElement;\r\n            userBoard.style.cursor = 'pointer';\r\n            selectedShip.style.zIndex = '-2';\r\n            // selectedShip.style.backgroundColor = 'rgba(0,0,0,0.2)';\r\n            selectedShip.style.border = '2px solid rgba(0, 250, 0, 0.5)';\r\n\r\n            if (parseInt(e.target.parentElement.offsetWidth) > parseInt(e.target.parentElement.offsetHeight)) {\r\n                orientation = 'hor';\r\n            } else if (parseInt(e.target.parentElement.offsetHeight) > parseInt(e.target.parentElement.offsetWidth)) {\r\n                orientation = 'vert';\r\n            }\r\n\r\n            if (selectedShip.classList.contains('carrier')) {\r\n                selectedShipName = 'carrier';\r\n            } else if (selectedShip.classList.contains('battleship')) {\r\n                selectedShipName = 'battleship';\r\n            } else if (selectedShip.classList.contains('cruiser')) {\r\n                selectedShipName = 'cruiser';\r\n            } else if (selectedShip.classList.contains('submarine')) {\r\n                selectedShipName = 'submarine';\r\n            } else if (selectedShip.classList.contains('destroyer')) {\r\n                selectedShipName = 'destroyer';\r\n            }\r\n        }\r\n    }\r\n\r\n    // collision detection\r\n\r\n    const collisionDetection = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    // Place a ship down that is currently selected\r\n\r\n    document.addEventListener('click', e => {\r\n        if (shipIsSelected && e.target.classList.contains('singleSquare') && rotating === false && areaIsClear()) {\r\n            selectedShip.style.zIndex = '3';\r\n            document.querySelector('.userBoard').style.cursor = 'default';\r\n            // selectedShip.style.backgroundColor = null;\r\n            selectedShip.style.border = null;\r\n            shipIsSelected = false;\r\n        }\r\n    })\r\n\r\n    // Locate opponents shot on user board\r\n\r\n    // const matchOppShotToBoard = () => {\r\n    //     if\r\n    // }\r\n\r\n    // Check to see if player is placing the ship in an open space\r\n\r\n    const areaIsClear = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n         for (let ship of ships) {\r\n            if (!ship.classList.contains(selectedShipName) && collisionDetection(selectedShip, ship)) {\r\n                console.log(ship.className);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Rotate the selected ship by right-clicking\r\n\r\n    window.oncontextmenu = (e) => {\r\n         if (shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Decide what happens on various key-press events\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault();\r\n        }\r\n        // Rotate the selected ship by pressing the 'space' key\r\n\r\n        if (e.keyCode === 32 && selectedShip.style !== undefined && shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n    })\r\n\r\n    // Change the grid-row and grid-column of the selected ship mouse is over the user's board\r\n\r\n    window.onmouseover = (e) => {\r\n        // const sub = document.querySelector(`.submarine`);\r\n        if (shipIsSelected) {\r\n            rotating = false;\r\n            selectedShip.style.transform = null;\r\n            const userGrid = document.querySelector('.userBoard');\r\n            const childShip = document.querySelector(`.${selectedShipName}Icon`);\r\n            const targetId = e.target.id;\r\n            const colStart = targetId.substring(0, targetId.indexOf('-'));\r\n            const rowStart = targetId.substring((targetId.indexOf('-') + 1), targetId.length);\r\n\r\n\r\n            if (userGrid.contains(e.target)\r\n            && (e.target.classList.contains('singleSquare'))\r\n            && shipIsSelected === true) {\r\n                if (orientation === 'hor') {\r\n                    childShip.classList.remove(`rotate-${selectedShipName}`);\r\n                    if (colStart < (11 - parseInt(selectedShip.id) + 1)) {\r\n                        selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + parseInt(selectedShip.id)}`;\r\n                    } else if (colStart >= (11 - parseInt(selectedShip.id) + 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridColumn = `11 / ${11 - parseInt(selectedShip.id)}`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridRow = `${rowStart} / ${parseInt(rowStart) + 1}`;\r\n                } else if (orientation === 'vert') {\r\n                    childShip.classList.add(`rotate-${selectedShipName}`);\r\n                    if (rowStart > (parseInt(selectedShip.id) - 1)) {\r\n                        selectedShip.style.gridRow = `${parseInt(rowStart) + 1} / ${parseInt(rowStart) - parseInt(selectedShip.id) + 1}`;\r\n                    } else if (rowStart <= (parseInt(selectedShip.id) - 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridRow = `${parseInt(selectedShip.id) + 1} / 1`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + 1}`;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div id='5' className='ship carrier'><div onClick={onShipSelect} className='carrierIcon'></div></div>\r\n\r\n            <div id='4' className='ship battleship'><div onClick={onShipSelect} className='battleshipIcon'></div></div>\r\n\r\n            <div id='3' className='ship cruiser'><div onClick={onShipSelect} className='cruiserIcon'></div></div>\r\n\r\n            <div id='3' className='ship submarine'><div onClick={onShipSelect} className='submarineIcon'></div></div>\r\n\r\n            <div id='2' className='ship destroyer'><div onClick={onShipSelect} className='destroyerIcon'></div></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ships;\r\n","import React, { useEffect } from 'react';\r\nimport Board from './Board';\r\nimport Ships from '../ships/Ships';\r\n// import useSound from 'use-sound';\r\n// import hitMissSounds from './hit-miss-sounds.mp3';\r\nimport $ from 'jquery';\r\nimport './board.css';\r\n\r\nconst UserBoard = ({yourTurn, setYourTurn, gameRoute, socket, friendSocket, route}) => {\r\n    let shipHit = '';\r\n    // const [play] = useSound(hitMissSounds, {\r\n    //     soundEnabled: true,\r\n    //     volume: 0.5,\r\n    //     sprite: {\r\n    //         miss: [1, 2000],\r\n    //         hit: [2001, 1500]\r\n    //     }\r\n    // });\r\n    useEffect(() => {\r\n        socket.on('receive shot', shot => {\r\n            const oppShot = document.getElementById(shot);\r\n            applyHitOrMiss(oppShot);\r\n            setYourTurn(true);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive shot');\r\n        }\r\n    },[])\r\n\r\n    const hit = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    const applyHitOrMiss = (oppShot) => {\r\n        if (matchOppShotToBoard(oppShot)) {\r\n            // play({id: 'hit'});\r\n            // setTimeout(() => {\r\n                oppShot.classList.add('hit');\r\n            // }, 300)\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'hit', socketid: friendSocket, shipHit: shipHit});\r\n        } else {\r\n            // play({id: 'miss'});\r\n            // setTimeout(() => {\r\n                oppShot.classList.add('miss');\r\n            // }, 300)\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'miss', socketid: friendSocket, shipHit: shipHit});\r\n        }\r\n    }\r\n\r\n    const matchOppShotToBoard = (shot) => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        for (let ship of ships) {\r\n            if (hit(shot, ship)) {\r\n                shipHit = ship.classList[1];\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className='board userBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board gameRoute={gameRoute} />\r\n                    <Ships gameRoute={gameRoute} route={route}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport Board from './Board';\r\nimport './board.css';\r\n\r\nconst OpponentBoard = ({ yourTurn, setYourTurn, gameRoute, socket, friendSocket, route }) => {\r\n    // const [squareClicked, setSquareClicked] = useState('');\r\n    const hitSquares = [];\r\n    const countHitsOnShip = (ship) => {\r\n        let count = 0;\r\n        for (let hit of hitSquares) {\r\n            if (hit === ship) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('show result on opponent board', data => {\r\n            const clickedSquare = document.querySelector(`.opponentBoard [id='${data.shotSquare}']`);\r\n            if (data.result === 'hit' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('hit');\r\n                hitSquares.push(data.shipHit);\r\n                clickedSquare.classList.add(`_${data.shipHit}`)\r\n                if (countHitsOnShip(data.shipHit) === parseInt(document.querySelector(`.${data.shipHit}`).id)) {\r\n                    const squares = document.querySelectorAll('.singleSquare');\r\n                    for (let square of squares) {\r\n                        if (square.classList.contains(`_${data.shipHit}`)) {\r\n                            square.classList.add('shipSunk');\r\n                        }\r\n                    }\r\n                }\r\n            } else if (data.result === 'miss' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('miss');\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            socket.off('show result on opponent board');\r\n        }\r\n    },[])\r\n\r\n    const onSquareClicked = (e) => {\r\n        if (yourTurn && !e.target.classList.contains('hit') && !e.target.classList.contains('miss')) {\r\n            // setSquareClicked(e.target);\r\n            socket.emit('send shot to opponent', {target: e.target.id, socketid: friendSocket});\r\n            setYourTurn(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='board opponentBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board gameRoute={gameRoute} route={route} onSquareClicked={onSquareClicked} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentBoard;\r\n\r\n","export default __webpack_public_path__ + \"static/media/msg-icon.b63e7a13.png\";","import React, { useState, useEffect } from 'react';\r\nimport './navigation.css';\r\nimport msgIcon from './msg-icon.png';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst FriendRequests = ({ setUnsortedFriends, socket, username }) => {\r\n    const [friendRequests, setFriendRequests] = useState([]);\r\n\r\n    useEffect(() => {\r\n        updateRequests();\r\n\r\n        socket.on('receive friend request', () => {\r\n            updateRequests();\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive friend request');\r\n        }\r\n    },[])\r\n\r\n    const updateRequests = async () => {\r\n        const navBar = document.querySelector('nav');\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                navBar.style.setProperty('--notification-color', 'rgba(255,0,0,0.8)');\r\n                setFriendRequests(requests.split(','));\r\n            } else {\r\n                navBar.style.setProperty('--notification-color', 'transparent');\r\n                setFriendRequests(null);\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const removeRequest = async (friend) => {\r\n        let newRequestList = '';\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const newRequestListArray = requests.split(',');\r\n                if (newRequestListArray.length <= 1) {\r\n                    newRequestList = null;\r\n                } else {\r\n                    const index = newRequestListArray.indexOf(friend);\r\n                    if (index > -1) {\r\n                        newRequestListArray.splice(index, 1);\r\n                        newRequestList = newRequestListArray.join(',');\r\n                    }\r\n                }\r\n            }\r\n\r\n            const res2 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: newRequestList,\r\n                        username: username\r\n                    })\r\n            });\r\n            if (!res2.ok) {\r\n                throw new Error('Could not update friend requests');\r\n            }\r\n            const userRemoved = await res2.json();\r\n            if (userRemoved) {\r\n                updateRequests();\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const onRemoveRequest = (e) => {\r\n        removeRequest(e.target.id);\r\n    }\r\n\r\n     const addFriend = async (friend) => {\r\n        console.log('friend added');\r\n        document.querySelector('.addFriendInput').value = '';\r\n        let friendList = '';\r\n        let friendArray = [];\r\n        let friendlistOfFriends = '';\r\n        let friendSocketId = '';\r\n//-----------------------------------------------------------------------------------\r\n        // Search the database to check if the name matches any users in the databse\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user = await res.json();\r\n            if (user.username === username) {\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user.username) {\r\n                let friendlistOfFriendsArray = [];\r\n                friendSocketId = user.socketid;\r\n                if (user.friends !== null && user.friends !== '') {\r\n                    friendlistOfFriendsArray = user.friends.split(',');\r\n                    if (friendlistOfFriendsArray.includes(username)) {\r\n                        throw new Error('You are already a friend of the user');\r\n                    }\r\n                }\r\n                friendlistOfFriendsArray.push(username);\r\n                if (friendlistOfFriendsArray.length > 1) {\r\n                    friendlistOfFriends = friendlistOfFriendsArray.join(',');\r\n                } else {\r\n                    friendlistOfFriends = friendlistOfFriendsArray[0];\r\n                }\r\n    //-----------------------------------------------------------------------------------\r\n                // If friend exists, grab the user's friend list string\r\n                // Make a temporary string and array with the new friend\r\n    //-----------------------------------------------------------------------------------\r\n                const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${username}`)\r\n                if (!res2.ok) {throw new Error('Problem accessing friends list')}\r\n                const friends = await res2.json();\r\n                if (friends.length) {\r\n                    friends.forEach(f => {\r\n                        if (f.username === friend) {\r\n                            throw new Error('User already your friend');\r\n                        }\r\n                    })\r\n                }\r\n                friendArray.push(friend);\r\n                friendList = friendArray.join(',');\r\n\r\n    //-----------------------------------------------------------------------------------\r\n                // Update the user's friend list with the new friends string\r\n                // Pass the updated friends array to 'fetchFriendData'\r\n    //-----------------------------------------------------------------------------------\r\n                const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/addFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        username: username,\r\n                        friendlist: friendList\r\n                    })\r\n                })\r\n                if (!res3.ok) {throw new Error('Problem adding friend')}\r\n                const userAdded = await res3.json();\r\n                if (userAdded) {\r\n                    let allF = [];\r\n                    for (let friend of friendArray) {\r\n                        try {\r\n                            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n                            if (!response.ok) {throw new Error('User does not exist')}\r\n                            const user = await response.json();\r\n                            if (user.socketid) {\r\n                                allF.push({name: user.username, status: 'online'})\r\n                            } else {\r\n                                allF.push({name: user.username, status: 'offline'})\r\n                            }\r\n                        } catch(err) {\r\n                            console.log(err);\r\n                        }\r\n                    }\r\n                    setUnsortedFriends(allF);\r\n                }\r\n                const res4 = await fetch('https://calm-ridge-60009.herokuapp.com/addSelfToFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        friendlist: friendlistOfFriends,\r\n                        friendname: friend\r\n                    })\r\n                })\r\n                if (!res4.ok) {throw new Error('Problem adding self to friendlist of friend')}\r\n                const selfAdded = await res4.json();\r\n                if (selfAdded && friendSocketId !== null) {\r\n                    socket.emit('update user status', friendSocketId);\r\n                }\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addFriendStart = async (e) => {\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${e.target.id}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user = await res.json();\r\n            if (user.username) {\r\n                removeRequest(e.target.id);\r\n                // socket.emit('send add friend', {socketid: user.socketid, user: username})\r\n                addFriend(e.target.id);\r\n                // Can't add friend if their offline   FIX\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dropdown className='dropdown'>\r\n              <Dropdown.Toggle variant=\"success\" className='messageToggle' id=\"dropdown-basic\"><img src={msgIcon} alt='Message Icon' /></Dropdown.Toggle>\r\n              <Dropdown.Menu id='dropdowns'>\r\n              {\r\n                friendRequests !== null\r\n                ?\r\n                  friendRequests.map(request => {\r\n                    return (\r\n                        <div key={request} className='dropdownItem'>\r\n                            <div className='text'>Friend request from <h3 className=\"requesterName\">{request}</h3></div>\r\n                            <div>\r\n                                <button onClick={addFriendStart} id={request} className='acceptInvite'>Accept</button>\r\n                                <button onClick={onRemoveRequest} id={request} className='rejectInvite'>Reject</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                  })\r\n                  : (null)\r\n              }\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FriendRequests;\r\n","import React from 'react';\r\nimport FriendRequests from './FriendRequests';\r\nimport './navigation.css';\r\n\r\nconst Navigation = ({ setSearch, friendSocket, setUnsortedFriends, socket, username, onRouteChange, route }) => {\r\n    const handleExitClick = (e) => {\r\n        setSearch(false);\r\n        onRouteChange(e);\r\n        socket.emit('send exit game', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <nav className='nav'>\r\n            {\r\n            // route === 'index'\r\n            // ?\r\n            // <>\r\n            //     <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n            // </>\r\n            // :\r\n            route === 'login' || route === 'register'\r\n            ?\r\n            <>\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n                {/* <button value='homeNotLogged' onClick={onRouteChange}>Back</button> */}\r\n            </>\r\n            :\r\n            route === 'loggedIn'\r\n            ?\r\n            <>\r\n                <FriendRequests setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n                <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n            </>\r\n            :\r\n            <>\r\n                {\r\n                route === 'leaderboard'\r\n                ?\r\n                    username\r\n                    ?\r\n                    <>\r\n                        <FriendRequests setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n                        <button value='goHome' onClick={onRouteChange}>Back</button>\r\n                        <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <button value='goToLogin' onClick={onRouteChange}>Back</button>\r\n                    </>\r\n                : //route === 'game'\r\n                <>\r\n                    <FriendRequests setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n                    <button value='goHome' onClick={handleExitClick}>Exit</button>\r\n                    <button value='logOut' onClick={handleExitClick}>Log Out</button>\r\n                </>\r\n                }\r\n            </>\r\n            }\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useEffect, useState } from 'react';\r\n\r\nconst ChatBox = ({ opponentName, friendSocket, socket }) => {\r\n    const [chatText, setChatText] = useState('');\r\n\r\n    const chatBox = document.querySelector('.chatBox');\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keyup', handleEnterBtn);\r\n\r\n        socket.on('receive msg', message => {\r\n            handleReceivedMessage(message);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive msg');\r\n            document.removeEventListener('keyup', handleEnterBtn);\r\n        }\r\n    },[chatText])\r\n\r\n    const handleReceivedMessage = (message) => {\r\n        const chatBox = document.querySelector('.chatBox');\r\n        if (chatBox !== null) {\r\n            const msgNode = document.createElement(\"DIV\");\r\n            msgNode.classList.add('message');\r\n            const textNode = document.createElement(\"H4\");\r\n            textNode.classList.add('opponentText');\r\n            const nameNode = document.createElement(\"H5\");\r\n            nameNode.classList.add('oppName');\r\n            const text = document.createTextNode(message);\r\n            const name = document.createTextNode(opponentName);\r\n            nameNode.appendChild(name);\r\n            textNode.appendChild(text);\r\n            msgNode.appendChild(nameNode);\r\n            msgNode.appendChild(textNode);\r\n            chatBox.appendChild(msgNode);\r\n            chatBox.scrollTop = chatBox.scrollHeight;\r\n        }\r\n    }\r\n\r\n    const handleEnterBtn = (e) => {\r\n            if (e.keyCode === 13 && chatBox !== null && chatText !== '') {\r\n                e.preventDefault();\r\n                const msgNode = document.createElement(\"DIV\");\r\n                msgNode.classList.add('message');\r\n                const textNode = document.createElement(\"H4\");\r\n                textNode.classList.add('userText');\r\n                const nameNode = document.createElement(\"H5\");\r\n                nameNode.classList.add('userName');\r\n                const text = document.createTextNode(chatText);\r\n                const name = document.createTextNode(\"You\");\r\n                nameNode.appendChild(name);\r\n                textNode.appendChild(text);\r\n                msgNode.appendChild(nameNode);\r\n                msgNode.appendChild(textNode);\r\n                chatBox.appendChild(msgNode);\r\n                setChatText('');\r\n                socket.emit('send msg', {socketid: friendSocket, message: chatText});\r\n                document.querySelector('.chatInput').value = '';\r\n                chatBox.scrollTop = chatBox.scrollHeight;\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className='chatContainer'>\r\n            <div className='chatBox'></div>\r\n            <input onChange={(e) => setChatText(e.target.value)} type='text' className='chatInput' placeholder='Type Here...' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBox;\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer><div className='footer'></div></footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport UserBoard from './UserBoard';\r\nimport OpponentBoard from './OpponentBoard';\r\nimport Navigation from '../navigation/Navigation';\r\nimport ChatBox from './ChatBox';\r\nimport Footer from '../footer/Footer';\r\n\r\nconst Game = ({ setSearch, checkOppStatusInterval, setCheckOppStatusInterval, opponentName, setRoute, setUnsortedFriends, socket, username, onRouteChange, route, friendSocket }) => {\r\n    const [gameRoute, setGameRoute] = useState('placeShips');\r\n    const [playerIsReady, setPlayerIsReady] = useState(false);\r\n    const [opponentIsReady, setOpponentIsReady] = useState(false);\r\n    const [yourTurn, setYourTurn] = useState(false);\r\n    const instructions = 'Place your ships!';\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        socket.on('receive game over', () => {\r\n            // gamePage.style.setProperty('--player-turn-text', '\"You Won!\"');\r\n            // setTimeout(gameOver, 2000);\r\n            addWin();\r\n            setTimeout(() => {\r\n                window.alert('You Won!!!');\r\n                setRoute('loggedIn');\r\n            }, 300);\r\n        })\r\n\r\n        socket.on('receive exit game', () => {\r\n            setSearch(false);\r\n            window.alert('Opponent has left the game');\r\n            setRoute('loggedIn');\r\n        })\r\n\r\n        setCheckOppStatusInterval(setInterval(checkIfOpponentIsOnline, 3000));\r\n\r\n        return () => {\r\n            clearInterval(checkOppStatusInterval);\r\n            socket.off('receive ready status');\r\n            socket.off('receive game over');\r\n            socket.off('receive exit game');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const gameInstructions = document.querySelector('.gamePage');\r\n        if (gameRoute === 'placeShips') {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${instructions}\"`);\r\n        } else if (yourTurn) {\r\n            gameInstructions.style.setProperty('--player-turn-text', '\"Your Turn!\"');\r\n        } else {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${opponentName}'s Turn!\"`);\r\n        }\r\n    },[yourTurn, gameRoute])\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        const squares = document.querySelectorAll('.userBoard .singleSquare');\r\n        let score = 0;\r\n        if (yourTurn) {\r\n            for (let square of squares) {\r\n                if (square.classList.contains('hit')) {\r\n                    score += 1;\r\n                }\r\n            }\r\n            if (score >= 17) {\r\n                // gamePage.style.setProperty('--player-turn-text', '\"You Lose\"');\r\n                socket.emit('game over', friendSocket);\r\n                setTimeout(() => {\r\n                    window.alert('You Lose');\r\n                    setRoute('loggedIn');\r\n                }, 300);\r\n            }\r\n        }\r\n    },[yourTurn])\r\n\r\n    const checkIfOpponentIsOnline = async () => {\r\n        try {\r\n            let friendIsOnline = false;\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendsOnline?username=${username}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const onlineFriends = await response.json();\r\n            await onlineFriends.forEach(f => {\r\n                if ((f.username === opponentName)) {\r\n                    return friendIsOnline = true;\r\n                }\r\n            })\r\n            if (!friendIsOnline) {\r\n                window.alert('Opponent has left the game');\r\n                setRoute('loggedIn');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n   }\r\n\r\n    const addWin = async () => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/updateWins', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: username\r\n                })\r\n            })\r\n            const winsUpdated = await res.json();\r\n            if (!winsUpdated) {\r\n                throw new Error('Could not increment wins')\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    socket.on('receive ready status', () => {\r\n        if (playerIsReady) {\r\n            setGameRoute('gameInProgress');\r\n        }\r\n        setOpponentIsReady(true);\r\n    })\r\n\r\n    const handleReadyButton = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        const readyBtn = document.querySelector('.readyBtn');\r\n        for (let ship of ships) {\r\n            ship.style.cursor = 'default';\r\n        }\r\n        if (opponentIsReady) {\r\n            setGameRoute('gameInProgress');\r\n            setYourTurn(true);\r\n        } else {\r\n            readyBtn.style.opacity = '0.4';\r\n        }\r\n        setPlayerIsReady(true);\r\n        socket.emit('send ready status', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <div className='gamePage'>\r\n            <Navigation setSearch={setSearch} friendSocket={friendSocket} setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} onRouteChange={onRouteChange} route={route} />\r\n            <UserBoard yourTurn={yourTurn} setYourTurn={setYourTurn} gameRoute={gameRoute} socket={socket} friendSocket={friendSocket} route={route}/>\r\n            {\r\n            gameRoute === 'placeShips'\r\n            ? \r\n            <div className='readyBtn'>\r\n                <button onClick={handleReadyButton} className='btn'>Ready</button>\r\n            </div>\r\n            : (null)\r\n            }\r\n            <OpponentBoard yourTurn={yourTurn} setYourTurn={setYourTurn} gameRoute={gameRoute} socket={socket} friendSocket={friendSocket} route={route}/>\r\n            <ChatBox opponentName={opponentName} friendSocket={friendSocket} socket={socket} />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Board from '../boards/Board';\r\nimport './homeBoard.css';\r\n\r\nconst HomeBoard = ({route}) => {\r\n    return (\r\n        <div className='board homeBoard'>\r\n{/*            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>*/}\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board route={route}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeBoard;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport './findMatch.css';\r\n\r\nconst FindMatch = ({ currentSocket, setSearch, search, findMatchInterval, setFindMatchInterval, socket, setOpponentName, username, setFriendSocket, setRoute }) => {\r\n    \r\n\r\n    useEffect(() => {\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (search) {\r\n            setFindMatchInterval(setInterval(searchForMatch, 1000));\r\n        }\r\n    }, [search])\r\n\r\n    const stopSearching = async () => {\r\n         try {\r\n            clearInterval(findMatchInterval);\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    search: false\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const updateSearching = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: username,\r\n                    search: !search\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n            const searchChanged = await response.json();\r\n            if (searchChanged) {\r\n                setSearch(!search);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const searchForMatch = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findMatch?username=${username}`)\r\n            if (!response.ok) {throw new Error('Could not find match')}\r\n            const match = await response.json();\r\n            if (match) {\r\n                await setFriendSocket(match.socketid);\r\n                await setOpponentName(match.username);\r\n                await stopSearching();\r\n                await socket.emit('send go to game',  {receiverSocket: match.socketid, senderSocket: currentSocket, senderName: username});\r\n                await setSearch(false);\r\n                setRoute('game');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='findMatchContainer'>\r\n            <button onClick={updateSearching} className='findMatch'>{search === false ? 'Find Match' : 'Searching...'}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindMatch;\r\n","import React, { useEffect } from 'react';\r\nimport './singleFriend.css';\r\n\r\nconst SingleFriend = ({ friendSocket, setOpponentName, socket, route, setFriendSocket, currentSocket, username, name, status, setRoute }) => {\r\n\r\n    useEffect(() => {\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        socket.on('receive invite', data => handleInvite(data))\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n            socket.off('receive invite');\r\n        }\r\n    },[])\r\n\r\n    const handleInvite = (data) => {\r\n        const btn = document.querySelector(`.btn${data.username}`);\r\n        if (route === 'loggedIn' && btn !== null) {\r\n            if (btn.disabled === true) {\r\n                btn.style.opacity = '0.8';\r\n                btn.disabled = false;\r\n            }\r\n            btn.childNodes[0].nodeValue = \"Accept\";\r\n            setFriendSocket(data.socketid);\r\n        }\r\n    }\r\n\r\n    const sendInvite = async (e) => {\r\n        const friend = e.target.id;\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`)\r\n            const user = await response.json();\r\n            if (user.socketid) {\r\n                socket.emit('send invite', {currentSocket: currentSocket, username: username, socketid: user.socketid});\r\n                e.target.childNodes[0].nodeValue = \"Invite sent\";\r\n                e.target.style.opacity = '0.4';\r\n                e.target.style.cursor = 'default';\r\n                e.target.disabled = true;\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const acceptInvite = (e) => {\r\n        socket.emit('send go to game',  {receiverSocket: friendSocket, senderSocket: currentSocket, senderName: username});\r\n        setOpponentName(e.target.id);\r\n        setRoute('game');\r\n    }\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.innerHTML === 'Invite') {\r\n            sendInvite(e)\r\n        } else if (e.target.innerHTML === 'Accept') {\r\n            acceptInvite(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id={name} value={name} className='friendBlock'>\r\n            <div className='friendText'>\r\n                <h3>{name}</h3>\r\n                <button className={'btn' + name} onClick={handleOnClick} id={name}>Invite</button>\r\n            </div>\r\n            <div id={status} className={status}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleFriend;\r\n","import React, { useState, useEffect } from 'react';\r\nimport SingleFriend from './SingleFriend';\r\nimport './friends.css';\r\n\r\nconst Friends = ({ friendSocket, opponentName, setOpponentName, unsortedFriends, setUnsortedFriends, socket, route, setFriendSocket, currentSocket, username, showOnlineStatusToFriends, setRoute }) => {\r\n    const [allFriends, setAllFriends] = useState([]);\r\n    const [friendFilter, setFriendFilter] = useState('');\r\n    const [friendSearch, setFriendSearch] = useState('');\r\n    const [friendsOnline, setFriendsOnline] = useState([]);\r\n\r\n    // Start fetching friends on component mount\r\n// -----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        fetchFriends();\r\n        showOnlineStatusToFriends();\r\n\r\n        socket.on('update friend status', () => {\r\n            getOnlineFriends();\r\n        });\r\n\r\n        const timer = setInterval(getOnlineFriends, 3000);\r\n\r\n        return () => {\r\n            socket.off('update friend status');\r\n            clearInterval(timer);\r\n        }\r\n    }, [])\r\n//-----------------------------------------------------------------------------------\r\n    // Sort the friends when fetching has finished/unsortedFriends has updated\r\n//-----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        sortFriends();\r\n    },[unsortedFriends, friendsOnline])\r\n    \r\n//-----------------------------------------------------------------------------------\r\n    // Sort friends. Online at top\r\n//-----------------------------------------------------------------------------------\r\n    const sortFriends = () => {\r\n        const offlineFriends = [];\r\n        const justAdded = [];\r\n        unsortedFriends.forEach(f => {\r\n            if (f.username === friendSearch) {\r\n                justAdded.push(f)\r\n            } else {\r\n                let addFriendToOffline = true;\r\n                friendsOnline.forEach(olF => {\r\n                    if (olF.username === f.username) {\r\n                        return addFriendToOffline = false;\r\n                    }\r\n                })\r\n\r\n                if (addFriendToOffline) {\r\n                    offlineFriends.push(f);\r\n                }\r\n            }\r\n        })\r\n        if (justAdded.length) {\r\n            setAllFriends(justAdded.concat(friendsOnline).concat(offlineFriends));\r\n        } else {\r\n            setAllFriends(friendsOnline.concat(offlineFriends));\r\n        }\r\n    }\r\n\r\n    const getOnlineFriends = async () => {\r\n         try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendsOnline?username=${username}`)\r\n            const onlineFriends = await response.json();\r\n            setFriendsOnline(onlineFriends);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n//-----------------------------------------------------------------------------------\r\n    // Get array of friends\r\n// -----------------------------------------------------------------------------------\r\n    const fetchFriends = async () => {\r\n\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${username}`)\r\n            if (!response.ok) {throw new Error('Problem accessing friends list')}\r\n            const friends = await response.json();\r\n            if (friends.length) {\r\n                setUnsortedFriends(friends);\r\n                getOnlineFriends();\r\n            } else {\r\n                setAllFriends([]);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n//-----------------------------------------------------------------------------------\r\n    // Send friend request\r\n//-----------------------------------------------------------------------------------\r\n    const sendFriendRequest = async () => {\r\n        document.querySelector('.addFriendInput').value = '';\r\n        const friendAlert = document.querySelector('.friendsContainer');\r\n        let friendName = '';\r\n        let friendSocketId = '';\r\n        let friendsRequests = '';\r\n        let friendsRequestsArray = [];\r\n//-----------------------------------------------------------------------------------\r\n        // Check to see if friend already sent user request\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const requestsArray = requests.split(',');\r\n                if (requestsArray.includes(friendSearch)) {\r\n                    friendAlert.style.setProperty('--add-friend-alert', '\"User already sent you a request\"');\r\n                    throw new Error('User already sent you a request')\r\n                }\r\n            }\r\n//-----------------------------------------------------------------------------------\r\n            // Check to see if friend exists\r\n//-----------------------------------------------------------------------------------\r\n            const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friendSearch}`);\r\n            if (!res2.ok) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"User does not exist\"');\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user = await res2.json();\r\n            if (user.username === username) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"Cannot add yourself as a friend\"');\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user.username) {\r\n                friendName = user.username;\r\n                friendSocketId = user.socketid;\r\n//-----------------------------------------------------------------------------------\r\n                // Add user to friend's friendrequests\r\n//-----------------------------------------------------------------------------------\r\n                let friendList = [];\r\n                if (user.friends !== null && user.friends !== '') {\r\n                    friendList = user.friends.split(',');\r\n                }\r\n                if (user.friendrequests !== null && user.friendrequests !== '') {\r\n                    friendsRequestsArray = user.friendrequests.split(',');\r\n                    if (friendsRequestsArray.includes(username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"You have already sent them a request\"');\r\n                        throw new Error('You have already sent them a request');\r\n                    } else if (friendList.includes(username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    } else {\r\n                        friendsRequestsArray.push(username);\r\n                        friendsRequests = user.friendrequests.concat(`,${username}`);\r\n                    }\r\n                } else {\r\n                    if (friendList.includes(username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    }\r\n                    friendsRequests = username;\r\n                    friendsRequestsArray = [username];\r\n                }\r\n            }\r\n            friendAlert.style.setProperty('--add-friend-alert', '\"\"');\r\n            const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: friendsRequests,\r\n                        username: friendName\r\n                    })\r\n            });\r\n            if (!res3.ok) {\r\n                throw new Error('Could not add self to friendrequests of friend');\r\n            }\r\n            const selfAdded = await res3.json();\r\n            if (selfAdded) {\r\n                socket.emit('send friend request', friendSocketId);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='friendsContainer'>\r\n            <div className='friendsContainerHeader'>\r\n                    <h2>Friends</h2>\r\n                    <input className='friendSearch' onChange={(e) => setFriendFilter(e.target.value)} type='text' placeholder='Enter a username'/>\r\n            </div>\r\n            <div className='friendsSection'>\r\n\r\n\r\n                <div className='friendsListContainer'>\r\n                {\r\n                    allFriends.length\r\n                    ?\r\n                    <div className='friendsList'>\r\n                    {\r\n//-----------------------------------------------------------------------------------\r\n                        // Map through the user's friends\r\n                        // Return a single friend div w/ their username and status\r\n//-----------------------------------------------------------------------------------\r\n                        allFriends.map(f => {\r\n                            if (f.username && f.username.toLowerCase().includes(friendFilter.toLowerCase())) {\r\n                                return <SingleFriend friendSocket={friendSocket} opponentName={opponentName} setOpponentName={setOpponentName} socket={socket} route={route} setFriendSocket={setFriendSocket} currentSocket={currentSocket} username={username} key={f.username} name={f.username} status={friendsOnline.includes(f) ? 'online' : 'offline'} setRoute={setRoute} />\r\n                            } else return null\r\n                        })\r\n                    }\r\n                    </div>\r\n                    : <h4 className='noFriends'>No friends have been added</h4>\r\n                }\r\n                </div>\r\n                <div className='addFriend'>\r\n                    <h3 className='addFriendText' >Add a friend</h3>\r\n                    <input className='addFriendInput' onChange={(e) => setFriendSearch(e.target.value)} type='text' placeholder='Enter a username'/>\r\n                    <button className='friendRequestBtn' onClick={sendFriendRequest}>Send Request</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport './friends.css';\r\n\r\nconst FriendsHome = ({onRouteChange}) => {\r\n    return (\r\n    <div className='friendsContainer'>\r\n        <div className='friendsContainerHeader'>\r\n            <h2>Friends</h2>\r\n        </div>\r\n        <div className='logToSeeFriendsText'>\r\n            <h3>Log in to add and view friends here</h3>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FriendsHome;\r\n","import React, { useState } from 'react';\r\n\r\nconst Login = ({onRouteChange, loadUser, currentSocket}) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const login = document.querySelector('.login');\r\n\r\n    const onSubmitLogin = async (e) => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/login', {\r\n              method: 'put',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            const user = await res.json();\r\n            if (user.username) {\r\n                loadUser(user);\r\n                onRouteChange(e);\r\n            } else if (user === 'no socketid') {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n            } else if (login !== null) {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"The username or password you entered is incorrect\"');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='login'>\r\n            <h1>Log In</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)} type='password' />\r\n            </div>\r\n            <button className='loginBtn' value='login' onClick={onSubmitLogin}>Login</button>\r\n            <button value='goToRegister' onClick={onRouteChange} className='changeLogReg'>Register</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\n\r\nconst Register = ({onRouteChange, loadUser, currentSocket}) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const register = document.querySelector('.register');\r\n\r\n    const onSubmitRegister = (e) => {\r\n        if (userName.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username must be at least 5 characters\"');\r\n        } else if (userName.length > 10) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username cannot be more than 10 characters\"');\r\n        } else if (password.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Password must be at least 5 characters\"');\r\n        } else {\r\n            fetch('https://calm-ridge-60009.herokuapp.com/register', {\r\n              method: 'post',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n              if (user.username) {\r\n                loadUser(user);\r\n                onRouteChange(e);\r\n              } else if (user === 'no socketid') {\r\n                register.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n                }\r\n                else if (!user.ok) {\r\n                    register.style.setProperty(\"--reg-log-alert\", '\"Username has already been taken\"');\r\n                    console.log(user);\r\n              }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='register'>\r\n            <h1>Register</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)}type='password' />\r\n            </div>\r\n            <button className='registerBtn' value='register' onClick={onSubmitRegister}>Register</button>\r\n            <button value='goToLogin' onClick={onRouteChange} className='changeLogReg'>Login</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Navigation from '../navigation/Navigation';\r\n\r\nconst Leaderboard = ({ route, onRouteChange, setUnsortedFriends, socket, username }) => {\r\n    const [topFive, setTopFive] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTopPlayers();\r\n    },[])\r\n\r\n    const getTopPlayers = async () => {\r\n        const tempArr = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getTopFive?userNum=${i}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const user = await response.json();\r\n            tempArr.push({name: user.username, wins: user.wins});\r\n        }\r\n        setTopFive(tempArr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation route={route} onRouteChange={onRouteChange} setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n            {\r\n            topFive.length\r\n            ?\r\n            <div className='topFiveContainer'>\r\n                <div className='topFive'>\r\n                    {\r\n                    topFive.map(player => {\r\n                        return <h3 key={player.name} className='LBplayer'> {player.name} : <span className='wins'>{player.wins}</span> wins </h3>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n            : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;\r\n","import io from 'socket.io-client';\r\nexport const socket = io('https://safe-mesa-81492.herokuapp.com/');       //,{autoConnect: false}\r\n","import React, { useState, useEffect } from 'react';\nimport Game from './components/boards/Game';\nimport HomeBoard from './components/homeBoard/HomeBoard';\nimport FindMatch from './components/findMatch/FindMatch';\nimport Friends from './components/friends/Friends';\nimport FriendsHome from './components/friends/FriendsHome';\nimport Login from './components/logReg/Login';\nimport Register from './components/logReg/Register';\nimport Leaderboard from './components/leaderboard/Leaderboard';\nimport Navigation from './components/navigation/Navigation';\nimport Footer from './components/footer/Footer';\nimport { socket } from './socket/socketImport';\nimport './logReg.css';\nimport './homePageLogged.css';\nimport './gamePage.css';\nimport './leaderboard.css';\n\nfunction App() {\n    const [route, setRoute] = useState('login');\n    const [user, setUser] = useState({username: '', wins: 0});\n    const [currentSocket, setCurrentSocket] = useState(null);\n    const [friendSocket, setFriendSocket] = useState(null);\n    const [opponentName, setOpponentName] = useState('');\n    const [unsortedFriends, setUnsortedFriends] = useState([]);\n    const [findMatchInterval, setFindMatchInterval] = useState(0);\n    const [checkOppStatusInterval, setCheckOppStatusInterval] = useState(0);\n    const [search, setSearch] = useState(false);\n\n    const onRouteChange = async (e) => {\n        switch(e.target.value) {\n            case 'logOut':\n                if (user.username) {\n                    await setSearch(false);\n                    await removeUserSocket(true);\n                }\n                setUser({username: '', wins: 0});\n                setRoute('login');\n                break;\n            case 'goToRegister':\n                if (user.username) {\n                    await removeUserSocket(true);\n                }\n                setUser({username: '', wins: 0});\n                setRoute('register');\n                break;\n            case 'goToLogin':\n                if (user.username) {\n                    await removeUserSocket(true);\n                }\n                setUser({username: '', wins: 0});\n                setRoute('login');\n                break;\n            case 'goHome':\n                setRoute('loggedIn');\n                break;\n            case 'goToLeaderboard':\n                setRoute('leaderboard');\n                break;\n            case 'login':\n                setRoute('loggedIn');\n                break;\n            case 'register':\n                setRoute('loggedIn');\n                break;\n            case 'game':\n                if (user.username) {\n                    setSearch(false);\n                }\n                setRoute('game');\n                break;\n            default:\n                if (user.username) {\n                    setSearch(false);\n                    removeUserSocket(true);\n                }\n                setRoute('login');\n        }\n    }\n\n    const stopSearching = async () => {\n        try {\n           const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\n               method: 'put',\n               headers: {'Content-Type': 'application/json'},\n               body: JSON.stringify({\n                   username: user.username,\n                   search: false\n               })\n           })\n           if (!response.ok) {throw new Error('Problem updating searching status')}\n       } catch(err) {\n           console.log(err);\n       }\n   }\n\n    const updateLastOnline = async () => {\n        try {\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/updateOnlineStatus`, {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: user.username\n                })\n            })\n            if (!response.ok) {\n                throw new Error('Error');\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        socket.on('connect', () => {\n            setCurrentSocket(socket.id);\n        })\n\n        return () => {\n            socket.off('connect');\n        }\n    }, [])\n\n    useEffect(() => {\n        let myInterval;\n        if (user.username.length) {\n            myInterval = setInterval(updateLastOnline, 1000);\n        } else {\n            clearInterval(myInterval);\n        }\n\n        return () => {\n            clearInterval(myInterval);\n        }\n    }, [user])\n\n    useEffect(() => {\n        if (!search && findMatchInterval > 0) {\n            clearInterval(findMatchInterval);\n            stopSearching();\n        }\n    }, [search])\n\n    useEffect(() => {\n        if (route !== 'game') {\n            clearInterval(checkOppStatusInterval);\n        } else {\n            clearInterval(findMatchInterval);\n        }\n    }, [route])\n\n\n    const showOnlineStatusToFriends = async () => {\n        try {\n            const response1 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\n            if (!response1.ok) {\n                throw new Error('Error')\n            }\n            const friends = await response1.json();\n            if (friends.length) {\n                for (let f of friends) {\n                    if (f.socketid) {\n                        socket.emit('update user status', f.socketid);\n                    }\n                }\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    const loadUser = (user) => {\n        setUser({ username: user.username, wins: user.wins })\n    }\n\n    const removeUserSocket = async (show) => {\n        const res = await fetch('https://calm-ridge-60009.herokuapp.com/removeUserSocket', {\n          method: 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            username: user.username\n          })\n        })\n        const socketRemoved = await res.json();\n        if (socketRemoved && show) {\n            showOnlineStatusToFriends();\n        }\n    }\n\n    window.addEventListener('beforeunload', (e) => {\n        e.preventDefault();\n        stopSearching();\n        if (route === 'game') {\n            socket.emit('send exit game', friendSocket);\n        }\n        removeUserSocket(false);\n        e.returnValue = '';\n    })\n\n    document.onkeydown = (e) => {\n        const loginBtn = document.querySelector('.loginBtn');\n        const registerBtn = document.querySelector('.registerBtn');\n        const logUsername = document.querySelector('.login > .username > input');\n        const registerUsername = document.querySelector('.register > .username > input');\n        const logPassword = document.querySelector('.login > .password > input');\n        const registerPassword = document.querySelector('.register > .password > input');\n        const friendRequestBtn = document.querySelector('.friendRequestBtn');\n\n        if ((e.code === 'Enter') && (route === 'login' || route === 'register')) {\n            e.preventDefault();\n            if ((logUsername?.value?.length && logPassword?.value?.length) || (registerUsername?.value?.length && registerPassword?.value?.length)) {\n                route === 'login'\n                ? loginBtn.click()\n                : registerBtn.click()\n            }\n        } else if ((e.code === 'Enter') && (route === 'loggedIn')) {\n            e.preventDefault();\n            friendRequestBtn.click();\n        }\n    };\n\n    return (\n        route === 'login' || route === 'register'\n        ?\n        <div className='logRegPage'>\n            <Navigation setUnsortedFriends={setUnsortedFriends} socket={socket} username={user.username} onRouteChange={onRouteChange} route={route} />\n            <FriendsHome onRouteChange={onRouteChange}/>\n            <div className='homeText'>\n                <h1>Battleship</h1>\n            </div>\n            <div className='logReg'>\n                {\n                    route === 'login'\n                    ? <Login currentSocket={currentSocket} loadUser={loadUser} onRouteChange={onRouteChange}/>\n                    : <Register currentSocket={currentSocket} loadUser={loadUser} onRouteChange={onRouteChange}/>\n                }\n            </div>\n            <Footer />\n        </div>\n        :\n        <>\n            {\n            route === 'loggedIn'\n            ?\n            <div className='homePageLogged'>\n                <Navigation setUnsortedFriends={setUnsortedFriends} socket={socket} username={user.username} onRouteChange={onRouteChange} route={route} />\n                <Friends friendSocket={friendSocket} opponentName={opponentName} setOpponentName={setOpponentName} unsortedFriends={unsortedFriends} setUnsortedFriends={setUnsortedFriends} socket={socket} route={route} setFriendSocket={setFriendSocket} currentSocket={currentSocket} showOnlineStatusToFriends={showOnlineStatusToFriends} username={user.username} setRoute={setRoute} />\n                <div className='matchAndBoard'>\n                    <FindMatch currentSocket={currentSocket} setSearch={setSearch} search={search} findMatchInterval={findMatchInterval} setFindMatchInterval={setFindMatchInterval} socket={socket} setOpponentName={setOpponentName} username={user.username} setFriendSocket={setFriendSocket} setRoute={setRoute} />\n                    <HomeBoard route={route}/>\n                </div>\n                <Footer />\n            </div>\n            :\n            <>\n                {\n                route === 'leaderboard'\n                ?\n                <div className='leaderboard'>\n                    <Leaderboard route={route} onRouteChange={onRouteChange} setUnsortedFriends={setUnsortedFriends} socket={socket} username={user.username} />\n                    <Footer />\n                </div>\n                :\n                <Game setSearch={setSearch} checkOppStatusInterval={checkOppStatusInterval} setCheckOppStatusInterval={setCheckOppStatusInterval} opponentName={opponentName} setRoute={setRoute} setUnsortedFriends={setUnsortedFriends} socket={socket} username={user.username} onRouteChange={onRouteChange} route={route} friendSocket={friendSocket} />\n                }\n            </>\n            }\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}