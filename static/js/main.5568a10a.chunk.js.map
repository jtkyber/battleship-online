{"version":3,"sources":["model.js","components/boards/Board.js","components/ships/Ships.js","components/boards/audioclips/hit-sound.mp3","components/boards/audioclips/miss-sound.mp3","components/boards/audioclips/ship-sunk.mp3","components/boards/UserBoard.js","components/boards/OpponentBoard.js","components/navigation/msg-icon.png","components/navigation/FriendRequests.js","components/navigation/Navigation.js","components/boards/ChatBox.js","components/footer/Footer.js","components/boards/Game.js","components/homeBoard/HomeBoard.js","components/findMatch/FindMatch.js","components/friends/SingleFriend.js","components/friends/Friends.js","components/friends/FriendsHome.js","components/logReg/Login.js","components/logReg/Register.js","components/leaderboard/Leaderboard.js","socket/socketImport.js","App.js","reportWebVitals.js","index.js"],"names":["model","stored","persist","storage","route","user","currentSocket","friendSocket","opponentName","unsortedFriends","findMatchInterval","checkOppStatusInterval","updatLastOnlineInterval","getOnlineFriendsInterval","search","friendRequests","userName","password","topFive","allFriends","friendFilter","friendSearch","friendsOnline","gameRoute","playerIsReady","opponentIsReady","yourTurn","chatText","inviteSent","inviteReceived","shipIsSelected","rotating","orientation","selectedShip","selectedShipName","setManualGridLocation","setRoute","action","state","input","setUser","setCurrentSocket","setFriendSocket","setOpponentName","setUnsortedFriends","setFindMatchInterval","setCheckOppStatusInterval","setUpdatLastOnlineInterval","setGetOnlineFriendsInterval","setSearch","setFriendRequests","setUserName","setPassword","setTopFive","setAllFriends","setFriendFilter","setFriendSearch","setFriendsOnline","setGameRoute","setPlayerIsReady","setOpponentIsReady","setYourTurn","setChatText","setInviteSent","setInviteReceived","setShipIsSelected","setRotating","setOrientation","setSelectedShip","setSelectedShipName","setToggleManualGridLocation","toggleManualGridLocation","AssembleBoard","onSquareClicked","useStoreState","allSquares","i","j","push","row","String","fromCharCode","col","colStart","rowStart","handleSquareClick","e","parentBoard","target","parentElement","classList","contains","map","square","onClick","style","gridArea","className","id","Ships","onShipSelect","userBoard","document","querySelector","cursor","zIndex","border","parseInt","offsetWidth","offsetHeight","collisionDetection","item1","item2","d1Offset","$","offset","d1Height","outerHeight","d1Width","outerWidth","d1Top","top","d1Left","left","d2Offset","d2Height","d2Width","d2Top","d2Left","addEventListener","areaIsClear","ships","querySelectorAll","ship","console","log","window","oncontextmenu","transform","code","preventDefault","undefined","onmouseover","userGrid","childShip","targetId","substring","indexOf","length","remove","gridColumn","gridRow","add","UserBoard","socket","audioClips","sound","hitSound","label","missSound","shipSunkSound","useStoreActions","actions","playShotSound","soundEffect","forEach","clip","src","Howl","volume","play","shipHit","useEffect","on","shot","oppShot","getElementById","applyHitOrMiss","off","hit","matchOppShotToBoard","emit","shotSquare","socketid","Board","OpponentBoard","hitSquares","data","clickedSquare","result","count","countHitsOnShip","squares","FriendRequests","updateRequests","a","navBar","fetch","username","res","ok","Error","json","requests","setProperty","split","removeRequest","friend","newRequestList","newRequestListArray","index","splice","join","method","headers","body","JSON","stringify","requestlist","res2","onRemoveRequest","addFriend","value","friendList","friendArray","friendlistOfFriends","friendSocketId","user1","friendlistOfFriendsArray","friends","includes","f","friendlist","res3","allF","response","friendname","res4","addFriendStart","Dropdown","Toggle","variant","msgIcon","alt","Menu","request","Navigation","onRouteChange","handleExitClick","hash","ChatBox","chatBox","handleEnterBtn","message","handleReceivedMessage","removeEventListener","msgNode","createElement","textNode","nameNode","text","createTextNode","name","appendChild","scrollTop","scrollHeight","keyCode","onChange","type","placeholder","Footer","Game","clearInterval","addWin","setTimeout","alert","setInterval","checkIfOpponentIsOnline","gameInstructions","score","readyBtn","opacity","HomeBoard","FindMatch","removeGuest","senderName","senderSocket","searchForMatch","stopSearching","updateSearching","match","receiverSocket","addGuest","SingleFriend","friendInGame","status","handleInvite","btn","disabled","childNodes","nodeValue","sendInvite","innerHTML","acceptInvite","Friends","fetchFriends","getOnlineFriends","sortFriends","offlineSorted","offlineFriends","justAdded","onlineSorted","addFriendToOffline","olF","sort","b","toLowerCase","concat","onlineFriends","sendFriendRequest","friendAlert","friendName","friendsRequests","friendsRequestsArray","friendrequests","last","lastonline","Date","now","ingame","FriendsHome","Login","login","onSubmitLogin","Register","register","then","Leaderboard","getTopPlayers","tempArr","wins","player","io","App","updateLastOnline","guestCleanup","updateInGameStatus","inGame","isInGame","returnValue","onkeydown","loginBtn","registerBtn","logUsername","registerUsername","logPassword","registerPassword","friendRequestBtn","click","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.5568a10a.chunk.js","sourcesContent":["import { action, persist } from 'easy-peasy';\r\n\r\nconst model = {\r\n\r\n    //State\r\n\r\n    stored: persist(\r\n        {\r\n            \r\n        },\r\n        {\r\n            storage: 'localStorage',\r\n        }\r\n\r\n    ),\r\n\r\n    route: 'login',\r\n    user: null,\r\n    currentSocket: null,\r\n    friendSocket: null,\r\n    opponentName: '',\r\n    unsortedFriends: [],\r\n    findMatchInterval: 0,\r\n    checkOppStatusInterval: 0,\r\n    updatLastOnlineInterval: 0,\r\n    getOnlineFriendsInterval: 0,\r\n    search: false,\r\n    friendRequests: [],\r\n    userName: '',\r\n    password: '',\r\n    topFive: [],\r\n    allFriends: [],\r\n    friendFilter: '',\r\n    friendSearch: '',\r\n    friendsOnline: [],\r\n    gameRoute: 'placeShips',\r\n    playerIsReady: false,\r\n    opponentIsReady: false,\r\n    yourTurn: false,\r\n    chatText: '',\r\n    inviteSent: false,\r\n    inviteReceived: false,\r\n    shipIsSelected: false,\r\n    rotating: false,\r\n    orientation: 'hor',\r\n    selectedShip: '',\r\n    selectedShipName: '',\r\n    setManualGridLocation: false,\r\n\r\n    //Actions\r\n\r\n    setRoute: action((state, input) => {\r\n        state.route = input;\r\n    }),\r\n\r\n    setUser: action((state, input) => {\r\n        state.user = input;\r\n    }),\r\n\r\n    setCurrentSocket: action((state, input) => {\r\n        state.currentSocket = input;\r\n    }),\r\n\r\n    setFriendSocket: action((state, input) => {\r\n        state.friendSocket = input;\r\n    }),\r\n\r\n    setOpponentName: action((state, input) => {\r\n        state.opponentName = input;\r\n    }),\r\n\r\n    setUnsortedFriends: action((state, input) => {\r\n        state.unsortedFriends = input;\r\n    }),\r\n\r\n    setFindMatchInterval: action((state, input) => {\r\n        state.findMatchInterval = input;\r\n    }),\r\n\r\n    setCheckOppStatusInterval: action((state, input) => {\r\n        state.checkOppStatusInterval = input;\r\n    }),\r\n\r\n    setUpdatLastOnlineInterval: action((state, input) => {\r\n        state.updatLastOnlineInterval = input;\r\n    }),\r\n\r\n    setGetOnlineFriendsInterval: action((state, input) => {\r\n        state.getOnlineFriendsInterval = input;\r\n    }),\r\n\r\n    setSearch: action((state, input) => {\r\n        state.search = input;\r\n    }),\r\n\r\n    setFriendRequests: action((state, input) => {\r\n        state.friendRequests = input;\r\n    }),\r\n\r\n    setUserName: action((state, input) => {\r\n        state.userName = input;\r\n    }),\r\n\r\n    setPassword: action((state, input) => {\r\n        state.password = input;\r\n    }),\r\n\r\n    setTopFive: action((state, input) => {\r\n        state.topFive = input;\r\n    }),\r\n\r\n    setAllFriends: action((state, input) => {\r\n        state.allFriends = input;\r\n    }),\r\n\r\n    setFriendFilter: action((state, input) => {\r\n        state.friendFilter = input;\r\n    }),\r\n\r\n    setFriendSearch: action((state, input) => {\r\n        state.friendSearch = input;\r\n    }),\r\n\r\n    setFriendsOnline: action((state, input) => {\r\n        state.friendsOnline = input;\r\n    }),\r\n\r\n    setGameRoute: action((state, input) => {\r\n        state.gameRoute = input;\r\n    }),\r\n    \r\n    setPlayerIsReady: action((state, input) => {\r\n        state.playerIsReady = input;\r\n    }),\r\n\r\n    setOpponentIsReady: action((state, input) => {\r\n        state.opponentIsReady = input;\r\n    }),\r\n\r\n    setYourTurn: action((state, input) => {\r\n        state.yourTurn = input;\r\n    }),\r\n\r\n    setChatText: action((state, input) => {\r\n        state.chatText = input;\r\n    }),\r\n\r\n    setInviteSent: action((state, input) => {\r\n        state.inviteSent = input;\r\n    }),\r\n\r\n    setInviteReceived: action((state, input) => {\r\n        state.inviteReceived = input;\r\n    }),\r\n    \r\n    setShipIsSelected: action((state, input) => {\r\n        state.shipIsSelected = input;\r\n    }),\r\n\r\n    setRotating: action((state, input) => {\r\n        state.rotating = input;\r\n    }),\r\n\r\n    setOrientation: action((state, input) => {\r\n        state.orientation = input;\r\n    }),\r\n\r\n    setSelectedShip: action((state, input) => {\r\n        state.selectedShip = input;\r\n    }),\r\n\r\n    setSelectedShipName: action((state, input) => {\r\n        state.selectedShipName = input;\r\n    }),\r\n\r\n    setToggleManualGridLocation: action((state, input) => {\r\n        state.toggleManualGridLocation = input;\r\n    }),\r\n}\r\n\r\nexport default model;","import React from 'react';\r\nimport { useStoreState } from 'easy-peasy';\r\n\r\nimport './board.css';\r\n\r\nconst AssembleBoard = ({ onSquareClicked }) => {\r\n\r\n    const { gameRoute } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute,\r\n        route: state.route\r\n    }));\r\n\r\n    const allSquares = [];\r\n    for (let i = 1; i < 11; i++) {\r\n        for (let j = 0; j < 10; j++) {\r\n            allSquares.push({row: String.fromCharCode(97 + j), col: i, colStart: i, rowStart: j + 1})\r\n        }\r\n    }\r\n\r\n    const handleSquareClick = (e) => {\r\n        const parentBoard = e.target.parentElement.parentElement.parentElement;\r\n        if (gameRoute === 'gameInProgress' && parentBoard.classList.contains('opponentBoard')) {\r\n            onSquareClicked(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        allSquares.map(square => {\r\n            return (\r\n                <div\r\n                    onClick={handleSquareClick}\r\n                    style={{gridArea: square.row + square.col}}\r\n                    className={'singleSquare ' + square.row + ' ' + square.row + square.col}\r\n                    key={square.row + square.col}\r\n                    id={square.colStart + '-' + square.rowStart}\r\n                >\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default AssembleBoard;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState } from 'easy-peasy';\r\nimport $ from 'jquery';\r\nimport './ships.css';\r\nimport '../boards/board.css';\r\n\r\nconst Ships = () => {\r\n\r\n    const { gameRoute } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute\r\n    }));\r\n\r\n    let rotating = false;\r\n    let orientation = 'hor';\r\n    let selectedShip = '';\r\n    let selectedShipName = '';\r\n    let shipIsSelected = false;\r\n    let setManualGridLocation = false;\r\n\r\n    // Decide what happens when a ship is selected to move\r\n\r\n    const onShipSelect = (e) => {\r\n        if (!shipIsSelected && gameRoute === 'placeShips') {\r\n            const userBoard = document.querySelector('.userBoard');\r\n            shipIsSelected = true;\r\n            selectedShip = e.target.parentElement;\r\n            userBoard.style.cursor = 'pointer';\r\n            selectedShip.style.zIndex = '-2';\r\n            // selectedShip.style.backgroundColor = 'rgba(0,0,0,0.2)';\r\n            selectedShip.style.border = '2px solid rgba(0, 250, 0, 0.5)';\r\n\r\n            if (parseInt(e.target.parentElement.offsetWidth) > parseInt(e.target.parentElement.offsetHeight)) {\r\n                orientation = 'hor';\r\n            } else if (parseInt(e.target.parentElement.offsetHeight) > parseInt(e.target.parentElement.offsetWidth)) {\r\n                orientation = 'vert';\r\n            }\r\n\r\n            if (selectedShip.classList.contains('carrier')) {\r\n                selectedShipName = 'carrier';\r\n            } else if (selectedShip.classList.contains('battleship')) {\r\n                selectedShipName = 'battleship';\r\n            } else if (selectedShip.classList.contains('cruiser')) {\r\n                selectedShipName = 'cruiser';\r\n            } else if (selectedShip.classList.contains('submarine')) {\r\n                selectedShipName = 'submarine';\r\n            } else if (selectedShip.classList.contains('destroyer')) {\r\n                selectedShipName = 'destroyer';\r\n            }\r\n        }\r\n    }\r\n\r\n    // collision detection\r\n\r\n    const collisionDetection = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    // Place a ship down that is currently selected\r\n\r\n    document.addEventListener('click', e => {\r\n        if (shipIsSelected && e.target.classList.contains('singleSquare') && rotating === false && areaIsClear()) {\r\n            selectedShip.style.zIndex = '3';\r\n            document.querySelector('.userBoard').style.cursor = 'default';\r\n            // selectedShip.style.backgroundColor = null;\r\n            selectedShip.style.border = null;\r\n            shipIsSelected = false;\r\n        }\r\n    })\r\n\r\n    // Locate opponents shot on user board\r\n\r\n    // const matchOppShotToBoard = () => {\r\n    //     if\r\n    // }\r\n\r\n    // Check to see if player is placing the ship in an open space\r\n\r\n    const areaIsClear = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n         for (let ship of ships) {\r\n            if (!ship.classList.contains(selectedShipName) && collisionDetection(selectedShip, ship)) {\r\n                console.log(ship.className);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Rotate the selected ship by right-clicking\r\n\r\n    window.oncontextmenu = (e) => {\r\n         if (shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Decide what happens on various key-press events\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.code === 'Enter') {\r\n            e.preventDefault();\r\n        }\r\n        // Rotate the selected ship by pressing the 'space' key\r\n\r\n        if (e.code === 'Space' && selectedShip.style !== undefined && shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n    })\r\n\r\n    // Change the grid-row and grid-column of the selected ship mouse is over the user's board\r\n\r\n    window.onmouseover = (e) => {\r\n        // const sub = document.querySelector(`.submarine`);\r\n        if (shipIsSelected) {\r\n            rotating = false;\r\n            selectedShip.style.transform = null;\r\n            const userGrid = document.querySelector('.userBoard');\r\n            const childShip = document.querySelector(`.${selectedShipName}Icon`);\r\n            const targetId = e.target.id;\r\n            const colStart = targetId.substring(0, targetId.indexOf('-'));\r\n            const rowStart = targetId.substring((targetId.indexOf('-') + 1), targetId.length);\r\n\r\n\r\n            if (userGrid.contains(e.target)\r\n            && (e.target.classList.contains('singleSquare'))\r\n            && shipIsSelected === true) {\r\n                if (orientation === 'hor') {\r\n                    childShip.classList.remove(`rotate-${selectedShipName}`);\r\n                    if (colStart < (11 - parseInt(selectedShip.id) + 1)) {\r\n                        selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + parseInt(selectedShip.id)}`;\r\n                    } else if (colStart >= (11 - parseInt(selectedShip.id) + 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridColumn = `11 / ${11 - parseInt(selectedShip.id)}`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridRow = `${rowStart} / ${parseInt(rowStart) + 1}`;\r\n                } else if (orientation === 'vert') {\r\n                    childShip.classList.add(`rotate-${selectedShipName}`);\r\n                    if (rowStart > (parseInt(selectedShip.id) - 1)) {\r\n                        selectedShip.style.gridRow = `${parseInt(rowStart) + 1} / ${parseInt(rowStart) - parseInt(selectedShip.id) + 1}`;\r\n                    } else if (rowStart <= (parseInt(selectedShip.id) - 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridRow = `${parseInt(selectedShip.id) + 1} / 1`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + 1}`;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div id='5' className='ship carrier'><div onClick={onShipSelect} className='carrierIcon'></div></div>\r\n\r\n            <div id='4' className='ship battleship'><div onClick={onShipSelect} className='battleshipIcon'></div></div>\r\n\r\n            <div id='3' className='ship cruiser'><div onClick={onShipSelect} className='cruiserIcon'></div></div>\r\n\r\n            <div id='3' className='ship submarine'><div onClick={onShipSelect} className='submarineIcon'></div></div>\r\n\r\n            <div id='2' className='ship destroyer'><div onClick={onShipSelect} className='destroyerIcon'></div></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ships;\r\n","export default __webpack_public_path__ + \"static/media/hit-sound.482d2647.mp3\";","export default __webpack_public_path__ + \"static/media/miss-sound.3033138c.mp3\";","export default __webpack_public_path__ + \"static/media/ship-sunk.606cb4b1.mp3\";","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport Board from './Board';\r\nimport Ships from '../ships/Ships';\r\nimport $ from 'jquery';\r\nimport { Howl } from 'howler';\r\nimport hitSound from './audioclips/hit-sound.mp3';\r\nimport missSound from './audioclips/miss-sound.mp3';\r\nimport shipSunkSound from './audioclips/ship-sunk.mp3';\r\nimport './board.css';\r\n\r\nconst UserBoard = ({ socket }) => {\r\n\r\n    const audioClips = [\r\n        {sound: hitSound, label: 'hit'},\r\n        {sound: missSound, label: 'miss'},\r\n        {sound: shipSunkSound, label: 'sunk'}\r\n    ]\r\n\r\n    const soundPlay = (src) => {\r\n        const sound = new Howl({\r\n            src,\r\n            volume: 0.5\r\n        })\r\n        sound.play();\r\n    }\r\n\r\n    const { friendSocket } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket\r\n    }));\r\n\r\n    const { setYourTurn } = useStoreActions(actions => ({\r\n        setYourTurn: actions.setYourTurn\r\n    }));\r\n\r\n    const playShotSound = (soundEffect) => {\r\n        audioClips.forEach(clip => {\r\n            if (clip.label === soundEffect) {\r\n                soundPlay(clip.sound);\r\n            }\r\n        })\r\n    }\r\n\r\n    let shipHit = '';\r\n    useEffect(() => {\r\n        socket.on('receive shot', shot => {\r\n            const oppShot = document.getElementById(shot);\r\n            applyHitOrMiss(oppShot);\r\n            setYourTurn(true);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive shot');\r\n        }\r\n    },[])\r\n\r\n    const hit = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    const applyHitOrMiss = (oppShot) => {\r\n        if (matchOppShotToBoard(oppShot)) {\r\n            oppShot.classList.add('hit');\r\n            playShotSound('hit');\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'hit', socketid: friendSocket, shipHit: shipHit});\r\n        } else {\r\n            oppShot.classList.add('miss');\r\n            playShotSound('miss');\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'miss', socketid: friendSocket, shipHit: shipHit});\r\n        }\r\n    }\r\n\r\n    const matchOppShotToBoard = (shot) => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        for (let ship of ships) {\r\n            if (hit(shot, ship)) {\r\n                shipHit = ship.classList[1];\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className='board userBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board />\r\n                    <Ships />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport Board from './Board';\r\nimport { Howl } from 'howler';\r\nimport hitSound from './audioclips/hit-sound.mp3';\r\nimport missSound from './audioclips/miss-sound.mp3';\r\nimport shipSunkSound from './audioclips/ship-sunk.mp3';\r\nimport './board.css';\r\n\r\nconst OpponentBoard = ({ socket }) => {\r\n\r\n    const audioClips = [\r\n        {sound: hitSound, label: 'hit'},\r\n        {sound: missSound, label: 'miss'},\r\n        {sound: shipSunkSound, label: 'sunk'}\r\n    ]\r\n\r\n    const soundPlay = (src) => {\r\n        const sound = new Howl({\r\n            src,\r\n            volume: 0.5\r\n        })\r\n        sound.play();\r\n    }\r\n\r\n    const { friendSocket, yourTurn } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        yourTurn: state.yourTurn\r\n    }));\r\n\r\n    const { setYourTurn } = useStoreActions(actions => ({\r\n        setYourTurn: actions.setYourTurn\r\n        \r\n    }));\r\n\r\n    const playShotSound = (soundEffect) => {\r\n        audioClips.forEach(clip => {\r\n            if (clip.label === soundEffect ) {\r\n                soundPlay(clip.sound);\r\n            }\r\n        })\r\n    }\r\n    \r\n    const hitSquares = [];\r\n    const countHitsOnShip = (ship) => {\r\n        let count = 0;\r\n        for (let hit of hitSquares) {\r\n            if (hit === ship) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('show result on opponent board', data => {\r\n            const clickedSquare = document.querySelector(`.opponentBoard [id='${data.shotSquare}']`);\r\n            if (data.result === 'hit' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('hit');\r\n                playShotSound('hit');\r\n                hitSquares.push(data.shipHit);\r\n                clickedSquare.classList.add(`_${data.shipHit}`)\r\n                if (countHitsOnShip(data.shipHit) === parseInt(document.querySelector(`.${data.shipHit}`).id)) {\r\n                    const squares = document.querySelectorAll('.singleSquare');\r\n                    for (let square of squares) {\r\n                        if (square.classList.contains(`_${data.shipHit}`)) {\r\n                            square.classList.add('shipSunk');\r\n                        }\r\n                    }\r\n                }\r\n            } else if (data.result === 'miss' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('miss');\r\n                playShotSound('miss');\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            socket.off('show result on opponent board');\r\n        }\r\n    },[])\r\n\r\n    const onSquareClicked = (e) => {\r\n        if (yourTurn && !e.target.classList.contains('hit') && !e.target.classList.contains('miss')) {\r\n            // setSquareClicked(e.target);\r\n            socket.emit('send shot to opponent', {target: e.target.id, socketid: friendSocket});\r\n            setYourTurn(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='board opponentBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board onSquareClicked={onSquareClicked} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentBoard;\r\n\r\n","export default __webpack_public_path__ + \"static/media/msg-icon.b63e7a13.png\";","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './navigation.css';\r\nimport msgIcon from './msg-icon.png';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst FriendRequests = ({ socket }) => {\r\n\r\n    const { user, friendRequests } = useStoreState(state => ({\r\n        user: state.user,\r\n        friendRequests: state.friendRequests\r\n    }));\r\n\r\n    const { setUnsortedFriends, setFriendRequests } = useStoreActions(actions => ({\r\n        setUnsortedFriends: actions.setUnsortedFriends,\r\n        setFriendRequests: actions.setFriendRequests\r\n    }));\r\n\r\n    useEffect(() => {\r\n        updateRequests();\r\n\r\n        socket.on('receive friend request', () => {\r\n            updateRequests();\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive friend request');\r\n        }\r\n    },[])\r\n\r\n    const updateRequests = async () => {\r\n        const navBar = document.querySelector('nav');\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                navBar.style.setProperty('--notification-color', 'rgba(255,0,0,0.8)');\r\n                setFriendRequests(requests.split(','));\r\n            } else {\r\n                navBar.style.setProperty('--notification-color', 'transparent');\r\n                setFriendRequests(null);\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const removeRequest = async (friend) => {\r\n        let newRequestList = '';\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const newRequestListArray = requests.split(',');\r\n                if (newRequestListArray.length <= 1) {\r\n                    newRequestList = null;\r\n                } else {\r\n                    const index = newRequestListArray.indexOf(friend);\r\n                    if (index > -1) {\r\n                        newRequestListArray.splice(index, 1);\r\n                        newRequestList = newRequestListArray.join(',');\r\n                    }\r\n                }\r\n            }\r\n\r\n            const res2 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: newRequestList,\r\n                        username: user.username\r\n                    })\r\n            });\r\n            if (!res2.ok) {\r\n                throw new Error('Could not update friend requests');\r\n            }\r\n            const userRemoved = await res2.json();\r\n            if (userRemoved) {\r\n                updateRequests();\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const onRemoveRequest = (e) => {\r\n        removeRequest(e.target.id);\r\n    }\r\n\r\n     const addFriend = async (friend) => {\r\n        console.log('friend added');\r\n        document.querySelector('.addFriendInput').value = '';\r\n        let friendList = '';\r\n        let friendArray = [];\r\n        let friendlistOfFriends = '';\r\n        let friendSocketId = '';\r\n//-----------------------------------------------------------------------------------\r\n        // Search the database to check if the name matches any users in the databse\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res.json();\r\n            if (user1.username === user.username) {\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user1.username) {\r\n                let friendlistOfFriendsArray = [];\r\n                friendSocketId = user1.socketid;\r\n                if (user1?.friends?.length) {\r\n                    friendlistOfFriendsArray = user1.friends.split(',');\r\n                    if (friendlistOfFriendsArray.includes(user.username)) {\r\n                        throw new Error('You are already a friend of the user');\r\n                    }\r\n                }\r\n                friendlistOfFriendsArray.push(user.username);\r\n                if (friendlistOfFriendsArray.length > 1) {\r\n                    friendlistOfFriends = friendlistOfFriendsArray.join(',');\r\n                } else {\r\n                    friendlistOfFriends = friendlistOfFriendsArray[0];\r\n                }\r\n    //-----------------------------------------------------------------------------------\r\n                // If friend exists, grab the user's friend list string\r\n                // Make a temporary string and array with the new friend\r\n    //-----------------------------------------------------------------------------------\r\n                const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\r\n                if (!res2.ok) {throw new Error('Problem accessing friends list')}\r\n                const friends = await res2.json();\r\n                if (friends?.length) {\r\n                    friends.forEach(f => {\r\n                        friendArray.push(f.username);\r\n                        if (f.username === friend) {\r\n                            throw new Error('User already your friend');\r\n                        }\r\n                    })\r\n                }\r\n                friendArray.push(friend);\r\n                friendList = friendArray.join(',');\r\n\r\n    //-----------------------------------------------------------------------------------\r\n                // Update the user's friend list with the new friends string\r\n                // Pass the updated friends array to 'fetchFriendData'\r\n    //-----------------------------------------------------------------------------------\r\n                const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/addFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        username: user.username,\r\n                        friendlist: friendList\r\n                    })\r\n                })\r\n                if (!res3.ok) {throw new Error('Problem adding friend')}\r\n                const userAdded = await res3.json();\r\n                if (userAdded) {\r\n                    const allF = [];\r\n                    for (let f of friendArray) {\r\n                        try {\r\n                            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${f}`);\r\n                            if (!response.ok) {throw new Error('User does not exist')}\r\n                            const user1 = await response.json();\r\n                            // if (opponentIsOnline(user1)) {\r\n                            //     allF.push({name: user1.username, status: 'online'})\r\n                            // } else {\r\n                            //     allF.push({name: user1.username, status: 'offline'})\r\n                            // }\r\n                            allF.push(user1);\r\n                        } catch(err) {\r\n                            console.log(err);\r\n                        }\r\n                    }\r\n                    setUnsortedFriends(allF);\r\n                }\r\n                const res4 = await fetch('https://calm-ridge-60009.herokuapp.com/addSelfToFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        friendlist: friendlistOfFriends,\r\n                        friendname: friend\r\n                    })\r\n                })\r\n                if (!res4.ok) {throw new Error('Problem adding self to friendlist of friend')}\r\n                const selfAdded = await res4.json();\r\n                if (selfAdded && friendSocketId !== null) {\r\n                    socket.emit('update user status', friendSocketId);\r\n                }\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addFriendStart = async (e) => {\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${e.target.id}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res.json();\r\n            if (user1.username) {\r\n                removeRequest(e.target.id);\r\n                // socket.emit('send add friend', {socketid: user.socketid, user: username})\r\n                addFriend(e.target.id);\r\n                // Can't add friend if their offline   FIX\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dropdown className='dropdown'>\r\n              <Dropdown.Toggle variant=\"success\" className='messageToggle' id=\"dropdown-basic\"><img src={msgIcon} alt='Message Icon' /></Dropdown.Toggle>\r\n              <Dropdown.Menu id='dropdowns'>\r\n              {\r\n                friendRequests !== null\r\n                ?\r\n                  friendRequests.map(request => {\r\n                    return (\r\n                        <div key={request} className='dropdownItem'>\r\n                            <div className='text'>Friend request from <h3 className=\"requesterName\">{request}</h3></div>\r\n                            <div>\r\n                                <button onClick={addFriendStart} id={request} className='acceptInvite'>Accept</button>\r\n                                <button onClick={onRemoveRequest} id={request} className='rejectInvite'>Reject</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                  })\r\n                  : (null)\r\n              }\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FriendRequests;\r\n","import React from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport FriendRequests from './FriendRequests';\r\nimport './navigation.css';\r\n\r\nconst Navigation = ({ socket, onRouteChange }) => {\r\n\r\n    const { friendSocket, user, route} = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        user: state.user,\r\n        route: state.route\r\n    }));\r\n\r\n    const { setSearch } = useStoreActions(actions => ({\r\n        setSearch: actions.setSearch\r\n    }));\r\n\r\n    const handleExitClick = (e) => {\r\n        setSearch(false);\r\n        onRouteChange(e);\r\n        socket.emit('send exit game', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <nav className='nav'>\r\n            {\r\n            route === 'login' || route === 'register'\r\n            ?\r\n            <>\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n            </>\r\n            :\r\n            route === 'loggedIn'\r\n            ?\r\n            <>\r\n                <FriendRequests socket={socket} />\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n                <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n            </>\r\n            :\r\n            <>\r\n                {\r\n                route === 'leaderboard'\r\n                ?\r\n                    user?.username\r\n                    ?\r\n                    <>\r\n                        <FriendRequests socket={socket} />\r\n                        <button value='goHome' onClick={onRouteChange}>Back</button>\r\n                        <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <button value='goToLogin' onClick={onRouteChange}>Back</button>\r\n                    </>\r\n                : //route === 'game'\r\n                    user.hash === 'guest'\r\n                    ?\r\n                    <>\r\n                        <button value='logOut' onClick={handleExitClick}>Exit</button>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <FriendRequests socket={socket} />\r\n                        <button value='goHome' onClick={handleExitClick}>Exit</button>\r\n                        <button value='logOut' onClick={handleExitClick}>Log Out</button>\r\n                    </>\r\n                }\r\n            </>\r\n            }\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst ChatBox = ({ socket }) => {\r\n\r\n    const { friendSocket, opponentName, chatText } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        opponentName: state.opponentName,\r\n        chatText: state.chatText\r\n    }));\r\n\r\n    const { setChatText } = useStoreActions(actions => ({\r\n        setChatText: actions.setChatText\r\n    }));\r\n\r\n    const chatBox = document.querySelector('.chatBox');\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keyup', handleEnterBtn);\r\n\r\n        socket.on('receive msg', message => {\r\n            handleReceivedMessage(message);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive msg');\r\n            document.removeEventListener('keyup', handleEnterBtn);\r\n        }\r\n    },[chatText])\r\n\r\n    const handleReceivedMessage = (message) => {\r\n        const chatBox = document.querySelector('.chatBox');\r\n        if (chatBox !== null) {\r\n            const msgNode = document.createElement(\"DIV\");\r\n            msgNode.classList.add('message');\r\n            const textNode = document.createElement(\"H4\");\r\n            textNode.classList.add('opponentText');\r\n            const nameNode = document.createElement(\"H5\");\r\n            nameNode.classList.add('oppName');\r\n            const text = document.createTextNode(message);\r\n            const name = document.createTextNode(opponentName);\r\n            nameNode.appendChild(name);\r\n            textNode.appendChild(text);\r\n            msgNode.appendChild(nameNode);\r\n            msgNode.appendChild(textNode);\r\n            chatBox.appendChild(msgNode);\r\n            chatBox.scrollTop = chatBox.scrollHeight;\r\n        }\r\n    }\r\n\r\n    const handleEnterBtn = (e) => {\r\n            if (e.keyCode === 13 && chatBox !== null && chatText !== '') {\r\n                e.preventDefault();\r\n                const msgNode = document.createElement(\"DIV\");\r\n                msgNode.classList.add('message');\r\n                const textNode = document.createElement(\"H4\");\r\n                textNode.classList.add('userText');\r\n                const nameNode = document.createElement(\"H5\");\r\n                nameNode.classList.add('userName');\r\n                const text = document.createTextNode(chatText);\r\n                const name = document.createTextNode(\"You\");\r\n                nameNode.appendChild(name);\r\n                textNode.appendChild(text);\r\n                msgNode.appendChild(nameNode);\r\n                msgNode.appendChild(textNode);\r\n                chatBox.appendChild(msgNode);\r\n                setChatText('');\r\n                socket.emit('send msg', {socketid: friendSocket, message: chatText});\r\n                document.querySelector('.chatInput').value = '';\r\n                chatBox.scrollTop = chatBox.scrollHeight;\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className='chatContainer'>\r\n            <div className='chatBox'></div>\r\n            <input onChange={(e) => setChatText(e.target.value)} type='text' className='chatInput' placeholder='Type Here...' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBox;\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer><div className='footer'></div></footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport UserBoard from './UserBoard';\r\nimport OpponentBoard from './OpponentBoard';\r\nimport Navigation from '../navigation/Navigation';\r\nimport ChatBox from './ChatBox';\r\nimport Footer from '../footer/Footer';\r\n\r\nconst Game = ({ socket, onRouteChange }) => {\r\n    \r\n    const { friendSocket, opponentName, user, checkOppStatusInterval, gameRoute, playerIsReady, opponentIsReady, yourTurn } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        opponentName: state.opponentName,\r\n        user: state.user,\r\n        checkOppStatusInterval: state.checkOppStatusInterval,\r\n        gameRoute: state.gameRoute,\r\n        playerIsReady: state.playerIsReady,\r\n        opponentIsReady: state.opponentIsReady,\r\n        yourTurn: state.yourTurn\r\n    }));\r\n\r\n    const { setCheckOppStatusInterval, setRoute, setGameRoute, setPlayerIsReady, setOpponentIsReady, setYourTurn } = useStoreActions(actions => ({\r\n        setCheckOppStatusInterval: actions.setCheckOppStatusInterval,\r\n        setRoute: actions.setRoute,\r\n        setGameRoute: actions.setGameRoute,\r\n        setPlayerIsReady: actions.setPlayerIsReady,\r\n        setOpponentIsReady: actions.setOpponentIsReady,\r\n        setYourTurn: actions.setYourTurn\r\n    }));\r\n    \r\n    const instructions = 'Place your ships!';\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        socket.on('receive game over', () => {\r\n            // gamePage.style.setProperty('--player-turn-text', '\"You Won!\"');\r\n            // setTimeout(gameOver, 2000);\r\n            clearInterval(checkOppStatusInterval);\r\n            addWin();\r\n            setTimeout(() => {\r\n                window.alert('You Won!!!');\r\n                user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n            }, 300);\r\n        })\r\n\r\n        socket.on('receive exit game', () => {\r\n            window.alert('Opponent has left the game');\r\n            user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n        })\r\n\r\n        setCheckOppStatusInterval(setInterval(checkIfOpponentIsOnline, 3000));\r\n\r\n        return () => {\r\n            clearInterval(checkOppStatusInterval);\r\n            socket.off('receive ready status');\r\n            socket.off('receive game over');\r\n            socket.off('receive exit game');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const gameInstructions = document.querySelector('.gamePage');\r\n        if (gameRoute === 'placeShips') {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${instructions}\"`);\r\n        } else if (yourTurn) {\r\n            gameInstructions.style.setProperty('--player-turn-text', '\"Your Turn!\"');\r\n        } else {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${opponentName}'s Turn!\"`);\r\n        }\r\n    },[yourTurn, gameRoute])\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        const squares = document.querySelectorAll('.userBoard .singleSquare');\r\n        let score = 0;\r\n        if (yourTurn) {\r\n            for (let square of squares) {\r\n                if (square.classList.contains('hit')) {\r\n                    score += 1;\r\n                }\r\n            }\r\n            if (score >= 17) {\r\n                // gamePage.style.setProperty('--player-turn-text', '\"You Lose\"');\r\n                socket.emit('game over', friendSocket);\r\n                setTimeout(() => {\r\n                    window.alert('You Lose');\r\n                    user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n                }, 300);\r\n            }\r\n        }\r\n    },[yourTurn])\r\n\r\n    const checkIfOpponentIsOnline = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/checkIfOppOnline?username=${opponentName}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const isOnline = await response.json();\r\n            if (!isOnline) {\r\n                window.alert('Opponent has left the game');\r\n                user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n   }\r\n\r\n    const addWin = async () => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/updateWins', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username\r\n                })\r\n            })\r\n            const winsUpdated = await res.json();\r\n            if (!winsUpdated) {\r\n                throw new Error('Could not increment wins')\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    socket.on('receive ready status', () => {\r\n        if (playerIsReady) {\r\n            setGameRoute('gameInProgress');\r\n        }\r\n        setOpponentIsReady(true);\r\n    })\r\n\r\n    const handleReadyButton = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        const readyBtn = document.querySelector('.readyBtn');\r\n        for (let ship of ships) {\r\n            ship.style.cursor = 'default';\r\n        }\r\n        if (opponentIsReady) {\r\n            setGameRoute('gameInProgress');\r\n            setYourTurn(true);\r\n        } else {\r\n            readyBtn.style.opacity = '0.4';\r\n        }\r\n        setPlayerIsReady(true);\r\n        socket.emit('send ready status', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <div className='gamePage'>\r\n            <Navigation socket={socket} onRouteChange={onRouteChange} />\r\n            <UserBoard socket={socket} />\r\n            {\r\n            gameRoute === 'placeShips'\r\n            ? \r\n            <div className='readyBtn'>\r\n                <button onClick={handleReadyButton} className='btn'>Ready</button>\r\n            </div>\r\n            : (null)\r\n            }\r\n            <OpponentBoard socket={socket} />\r\n            <ChatBox socket={socket} />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Board from '../boards/Board';\r\nimport './homeBoard.css';\r\n\r\nconst HomeBoard = () => {\r\n    return (\r\n        <div className='board homeBoard'>\r\n{/*            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>*/}\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './findMatch.css';\r\n\r\nconst FindMatch = ({ socket }) => {\r\n    \r\n    const { currentSocket, search, user, route } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        search: state.search,\r\n        user: state.user,\r\n        route: state.route\r\n    }));\r\n\r\n    const { setSearch, setFindMatchInterval, setOpponentName, setFriendSocket, setRoute, setUser } = useStoreActions(actions => ({\r\n        setSearch: actions.setSearch,\r\n        setFindMatchInterval: actions.setFindMatchInterval,\r\n        setOpponentName: actions.setOpponentName,\r\n        setFriendSocket: actions.setFriendSocket,\r\n        setRoute: actions.setRoute,\r\n        setUser: actions.setUser\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if ((route === 'login' || route === 'register')) {\r\n            if (user?.hash === 'guest') {\r\n                removeGuest();\r\n            }\r\n        }\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (search) {\r\n            setFindMatchInterval(setInterval(searchForMatch, 1000));\r\n        }\r\n    }, [search])\r\n\r\n    // useEffect(() => {\r\n    //     if (user?.username?.length && (route === 'login' || route === 'register')) {\r\n    //         console.log(user);\r\n    //         updateSearching();\r\n    //     }\r\n    // }, [user?.username])\r\n\r\n    const stopSearching = async () => {\r\n         try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username,\r\n                    search: false\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const updateSearching = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username,\r\n                    search: !search\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n            const searchChanged = await response.json();\r\n            if (searchChanged) {\r\n                setSearch(!search);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const searchForMatch = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findMatch?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Could not find match')}\r\n            const match = await response.json();\r\n            if (match?.username) {\r\n                await setFriendSocket(match.socketid);\r\n                await setOpponentName(match.username);\r\n                await stopSearching();\r\n                await socket.emit('send go to game',  {receiverSocket: match.socketid, senderSocket: currentSocket, senderName: user.username});\r\n                await setSearch(false);\r\n                setRoute('game');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const removeGuest = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/removeGuestUser', {\r\n                method: 'delete',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user?.username\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem removing guest')}\r\n            setSearch(false);\r\n            setUser(null);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addGuest = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/addGuestUser', {\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    socketid: currentSocket\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem adding guest')}\r\n            const data = await response.json();\r\n            await setUser(data);\r\n            setSearch(true);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`findMatchContainer ${(route === 'login' || route === 'register') ? 'playAsGuest' : null}`}>\r\n            {\r\n                route === 'login' || route === 'register'\r\n                ? <button onClick={!search ? addGuest : removeGuest} className='findMatch'>{!search ? 'Play as Guest' : 'Searching...'}</button>\r\n                : <button onClick={updateSearching} className='findMatch'>{!search ? 'Find Match' : 'Searching...'}</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindMatch;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './singleFriend.css';\r\n\r\nconst SingleFriend = ({ friendInGame, socket, name, status }) => {\r\n\r\n    const { friendSocket, route, currentSocket, user } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        route: state.route,\r\n        currentSocket: state.currentSocket,\r\n        user: state.user\r\n    }));\r\n\r\n    const { setOpponentName, setFriendSocket, setRoute } = useStoreActions(actions => ({\r\n        setOpponentName: actions.setOpponentName,\r\n        setFriendSocket: actions.setFriendSocket,\r\n        setRoute: actions.setRoute\r\n    }));    \r\n\r\n    useEffect(() => {\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        socket.on('receive invite', data => handleInvite(data))\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n            socket.off('receive invite');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const btn = document.querySelector(`.btn${name}`);\r\n        if (status !== 'offline' && !friendInGame) {\r\n            btn.style.opacity = '0.8';\r\n            btn.disabled = false;\r\n            btn.childNodes[0].nodeValue = \"Invite\";\r\n        }\r\n    },[status, friendInGame])\r\n\r\n    const handleInvite = (data) => {\r\n        const btn = document.querySelector(`.btn${data.username}`);\r\n        if (route === 'loggedIn' && btn !== null) {\r\n            if (btn.disabled === true) {\r\n                btn.style.opacity = '0.8';\r\n                btn.disabled = false;\r\n            }\r\n            btn.childNodes[0].nodeValue = \"Accept\";\r\n            setFriendSocket(data.socketid);\r\n        }\r\n    }\r\n\r\n    const sendInvite = async (e) => {\r\n        const friend = e.target.id;\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`)\r\n            const user1 = await response.json();\r\n            if (user1.socketid) {\r\n                socket.emit('send invite', {currentSocket: currentSocket, username: user.username, socketid: user1.socketid});\r\n                e.target.childNodes[0].nodeValue = \"Invite sent\";\r\n                e.target.style.opacity = '0.4';\r\n                e.target.style.cursor = 'default';\r\n                e.target.disabled = true;\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const acceptInvite = (e) => {\r\n        socket.emit('send go to game',  {receiverSocket: friendSocket, senderSocket: currentSocket, senderName: user.username});\r\n        setOpponentName(e.target.id);\r\n        setRoute('game');\r\n    }\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.innerHTML === 'Invite') {\r\n            sendInvite(e)\r\n        } else if (e.target.innerHTML === 'Accept') {\r\n            acceptInvite(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id={name} value={name} className='friendBlock'>\r\n            <div className='friendText'>\r\n                <h3>{name}</h3>\r\n                {\r\n                    friendInGame && status === 'online'\r\n                    ? <button disabled className={`btn${name} friendInGameBtn`}>In Game</button>\r\n                    : \r\n                        status === 'online'\r\n                        ? <button className={`btn${name} friendOnlineBtn`} onClick={handleOnClick} id={name}>Invite</button>\r\n                        : <button disabled className={`btn${name} friendOfflineBtn`}>Offline</button>\r\n                }\r\n            </div>\r\n            <div id={status} className={status}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleFriend;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport SingleFriend from './SingleFriend';\r\nimport './friends.css';\r\n\r\nconst Friends = ({ socket }) => {\r\n    \r\n    const { unsortedFriends, user, allFriends, friendFilter, friendSearch, friendsOnline, getOnlineFriendsInterval } = useStoreState(state => ({\r\n        unsortedFriends: state.unsortedFriends,\r\n        user: state.user,\r\n        allFriends: state.allFriends,\r\n        friendFilter: state.friendFilter,\r\n        friendSearch: state.friendSearch,\r\n        friendsOnline: state.friendsOnline,\r\n        getOnlineFriendsInterval: state.getOnlineFriendsInterval\r\n    }));\r\n\r\n    const { setUnsortedFriends, setAllFriends, setFriendFilter, setFriendSearch, setFriendsOnline, setGetOnlineFriendsInterval } = useStoreActions(actions => ({\r\n        setUnsortedFriends: actions.setUnsortedFriends,\r\n        setAllFriends: actions.setAllFriends,\r\n        setFriendFilter: actions.setFriendFilter,\r\n        setFriendSearch: actions.setFriendSearch,\r\n        setFriendsOnline: actions.setFriendsOnline,\r\n        setGetOnlineFriendsInterval: actions.setGetOnlineFriendsInterval\r\n    }));\r\n    \r\n    // Start fetching friends on component mount\r\n// -----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        fetchFriends();\r\n        // showOnlineStatusToFriends();\r\n\r\n        socket.on('update friend status', () => {\r\n            getOnlineFriends();\r\n        });\r\n\r\n        setGetOnlineFriendsInterval(setInterval(getOnlineFriends, 1000));\r\n\r\n        return () => {\r\n            socket.off('update friend status');\r\n            clearInterval(getOnlineFriendsInterval);\r\n        }\r\n    }, [])\r\n//-----------------------------------------------------------------------------------\r\n    // Sort the friends when fetching has finished/unsortedFriends has updated\r\n//-----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        sortFriends();\r\n    },[friendsOnline, unsortedFriends])\r\n    \r\n//-----------------------------------------------------------------------------------\r\n    // Sort friends. Online at top\r\n//-----------------------------------------------------------------------------------\r\n    const sortFriends = () => {\r\n        const offlineFriends = [];\r\n        const justAdded = [];\r\n        let onlineSorted = [];\r\n        let offlineSorted = [];\r\n\r\n        unsortedFriends.forEach(f => {\r\n            if (f.username === friendSearch) {\r\n                justAdded.push(f)\r\n            } else {\r\n                let addFriendToOffline = true;\r\n                friendsOnline.forEach(olF => {\r\n                    if (olF.username === f.username) {\r\n                        return addFriendToOffline = false;\r\n                    }\r\n                })\r\n\r\n                if (addFriendToOffline) {\r\n                    offlineFriends.push(f);\r\n                }\r\n            }\r\n        })\r\n\r\n        onlineSorted = friendsOnline.sort((a, b) => {\r\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\r\n        })\r\n\r\n        offlineSorted = offlineFriends.sort((a, b) => {\r\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\r\n        })\r\n        \r\n        if (justAdded.length) {\r\n            setAllFriends(justAdded.concat(onlineSorted).concat(offlineSorted));\r\n        } else {\r\n            setAllFriends(onlineSorted.concat(offlineSorted));\r\n        }\r\n    }\r\n\r\n    const getOnlineFriends = async () => {\r\n         try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendsOnline?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Could not get online friends')}\r\n            const onlineFriends = await response.json();\r\n            setFriendsOnline(onlineFriends);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n//-----------------------------------------------------------------------------------\r\n    // Get array of friends\r\n// -----------------------------------------------------------------------------------\r\n    const fetchFriends = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Problem accessing friends list')}\r\n            const friends = await response.json();\r\n            if (user?.friends?.length && friends?.length) {\r\n                await setUnsortedFriends(friends);\r\n                getOnlineFriends();\r\n            } else {\r\n                await setAllFriends([]);\r\n                await setUnsortedFriends([]);\r\n                setFriendsOnline([]);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n//-----------------------------------------------------------------------------------\r\n    // Send friend request\r\n//-----------------------------------------------------------------------------------\r\n    const sendFriendRequest = async () => {\r\n        document.querySelector('.addFriendInput').value = '';\r\n        const friendAlert = document.querySelector('.friendsContainer');\r\n        let friendName = '';\r\n        let friendSocketId = '';\r\n        let friendsRequests = '';\r\n        let friendsRequestsArray = [];\r\n//-----------------------------------------------------------------------------------\r\n        // Check to see if friend already sent user request\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const requestsArray = requests.split(',');\r\n                if (requestsArray.includes(friendSearch)) {\r\n                    friendAlert.style.setProperty('--add-friend-alert', '\"User already sent you a request\"');\r\n                    throw new Error('User already sent you a request')\r\n                }\r\n            }\r\n//-----------------------------------------------------------------------------------\r\n            // Check to see if friend exists\r\n//-----------------------------------------------------------------------------------\r\n            const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friendSearch}`);\r\n            if (!res2.ok) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"User does not exist\"');\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res2.json();\r\n            if (user1.username === user.username) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"Cannot add yourself as a friend\"');\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user1.username) {\r\n                friendName = user1.username;\r\n                friendSocketId = user1.socketid;\r\n//-----------------------------------------------------------------------------------\r\n                // Add user to friend's friendrequests\r\n//-----------------------------------------------------------------------------------\r\n                let friendList = [];\r\n                if (user1.friends !== null && user1.friends !== '') {\r\n                    friendList = user1.friends.split(',');\r\n                }\r\n                if (user1.friendrequests !== null && user1.friendrequests !== '') {\r\n                    friendsRequestsArray = user1.friendrequests.split(',');\r\n                    if (friendsRequestsArray.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"You have already sent them a request\"');\r\n                        throw new Error('You have already sent them a request');\r\n                    } else if (friendList.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    } else {\r\n                        friendsRequestsArray.push(user.username);\r\n                        friendsRequests = user1.friendrequests.concat(`,${user.username}`);\r\n                    }\r\n                } else {\r\n                    if (friendList.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    }\r\n                    friendsRequests = user.username;\r\n                    friendsRequestsArray = [user.username];\r\n                }\r\n            }\r\n            friendAlert.style.setProperty('--add-friend-alert', '\"\"');\r\n            const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: friendsRequests,\r\n                        username: friendName\r\n                    })\r\n            });\r\n            if (!res3.ok) {\r\n                throw new Error('Could not add self to friendrequests of friend');\r\n            }\r\n            const selfAdded = await res3.json();\r\n            if (selfAdded) {\r\n                socket.emit('send friend request', friendSocketId);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const friendIsOnline = (last) => {\r\n        const curTime = Date.now();\r\n        if ((last > (curTime - 5000)) && last) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='friendsContainer'>\r\n            <div className='friendsContainerHeader'>\r\n                    <h2>Friends</h2>\r\n                    <input className='friendSearch' onChange={(e) => setFriendFilter(e.target.value)} type='text' placeholder='Enter a username'/>\r\n            </div>\r\n            <div className='friendsSection'>\r\n\r\n\r\n                <div className='friendsListContainer'>\r\n                {\r\n                    allFriends.length\r\n                    ?\r\n                    <div className='friendsList'>\r\n                    {\r\n//-----------------------------------------------------------------------------------\r\n                        // Map through the user's friends\r\n                        // Return a single friend div w/ their username and status\r\n//-----------------------------------------------------------------------------------\r\n                        allFriends.map(f => {\r\n                            if (f.username && f.username.toLowerCase().includes(friendFilter.toLowerCase())) {\r\n                                if (friendIsOnline(f.lastonline)) {\r\n                                    return <SingleFriend friendInGame={f.ingame} socket={socket} key={f.username} name={f.username} \r\n                                    status='online' />\r\n                                } else {\r\n                                    return <SingleFriend friendInGame={f.ingame} socket={socket} key={f.username} name={f.username} \r\n                                    status='offline' />\r\n                                }\r\n                            } else return null\r\n                        })\r\n                    }\r\n                    </div>\r\n                    : <h4 className='noFriends'>No friends have been added</h4>\r\n                }\r\n                </div>\r\n                <div className='addFriend'>\r\n                    <h3 className='addFriendText' >Add a friend</h3>\r\n                    <input className='addFriendInput' onChange={(e) => setFriendSearch(e.target.value)} type='text' placeholder='Enter a username'/>\r\n                    <button className='friendRequestBtn' onClick={sendFriendRequest}>Send Request</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport './friends.css';\r\n\r\nconst FriendsHome = ({onRouteChange}) => {\r\n    return (\r\n    <div className='friendsContainer'>\r\n        <div className='friendsContainerHeader'>\r\n            <h2>Friends</h2>\r\n        </div>\r\n        <div className='logToSeeFriendsText'>\r\n            <h3>Log in to add and view friends here</h3>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FriendsHome;\r\n","import { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst Login = ({onRouteChange }) => {\r\n    \r\n    const { currentSocket, userName, password } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        userName: state.userName,\r\n        password: state.password\r\n    }));\r\n\r\n    const { setUserName, setPassword, setUser } = useStoreActions(actions => ({\r\n        setUserName: actions.setUserName,\r\n        setPassword: actions.setPassword,\r\n        setUser: actions.setUser\r\n    }));\r\n    \r\n    const login = document.querySelector('.login');\r\n\r\n    const onSubmitLogin = async (e) => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/login', {\r\n              method: 'put',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            const user1 = await res.json();\r\n            if (user1.username) {\r\n                setUser(user1);\r\n                onRouteChange(e);\r\n            } else if (user1 === 'no socketid') {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n            } else if (login !== null) {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"The username or password you entered is incorrect\"');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='login'>\r\n            <h1>Log In</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)} type='password' />\r\n            </div>\r\n            <button className='loginBtn' value='login' onClick={onSubmitLogin}>Login</button>\r\n            <button value='goToRegister' onClick={onRouteChange} className='changeLogReg'>Register</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n\r\n    const { currentSocket, userName, password } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        userName: state.userName,\r\n        password: state.password\r\n    }));\r\n\r\n    const { setUserName, setPassword, setUser } = useStoreActions(actions => ({\r\n        setUserName: actions.setUserName,\r\n        setPassword: actions.setPassword,\r\n        setUser: actions.setUser\r\n    }));\r\n\r\n    const register = document.querySelector('.register');\r\n\r\n    const onSubmitRegister = (e) => {\r\n        if (userName.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username must be at least 5 characters\"');\r\n        } else if (userName.length > 10) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username cannot be more than 10 characters\"');\r\n        } else if (password.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Password must be at least 5 characters\"');\r\n        } else {\r\n            fetch('https://calm-ridge-60009.herokuapp.com/register', {\r\n              method: 'post',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            .then(response => response.json())\r\n            .then(user1 => {\r\n              if (user1.username) {\r\n                setUser(user1);\r\n                onRouteChange(e);\r\n              } else if (user1 === 'no socketid') {\r\n                register.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n                }\r\n                else if (!user1.ok) {\r\n                    register.style.setProperty(\"--reg-log-alert\", '\"Username has already been taken\"');\r\n              }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='register'>\r\n            <h1>Register</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)}type='password' />\r\n            </div>\r\n            <button className='registerBtn' value='register' onClick={onSubmitRegister}>Register</button>\r\n            <button value='goToLogin' onClick={onRouteChange} className='changeLogReg'>Login</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nimport Navigation from '../navigation/Navigation';\r\n\r\nconst Leaderboard = ({ onRouteChange, socket }) => {\r\n\r\n    const { topFive } = useStoreState(state => ({\r\n        topFive: state.topFive\r\n    }));\r\n\r\n    const { setTopFive } = useStoreActions(actions => ({\r\n        setTopFive: actions.setTopFive\r\n    }));\r\n\r\n    useEffect(() => {\r\n        getTopPlayers();\r\n    },[])\r\n\r\n    const getTopPlayers = async () => {\r\n        const tempArr = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getTopFive?userNum=${i}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const user1 = await response.json();\r\n            tempArr.push({name: user1.username, wins: user1.wins});\r\n        }\r\n        setTopFive(tempArr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation onRouteChange={onRouteChange} socket={socket} />\r\n            {\r\n            topFive.length\r\n            ?\r\n            <div className='topFiveContainer'>\r\n                <div className='topFive'>\r\n                    {\r\n                    topFive.map(player => {\r\n                        return <h3 key={player.name} className='LBplayer'> {player.name} : <span className='wins'>{player.wins}</span> wins </h3>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n            : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;\r\n","import io from 'socket.io-client';\r\nexport const socket = io('https://safe-mesa-81492.herokuapp.com/');       //,{autoConnect: false}\r\n","import React, { useEffect } from 'react';\nimport { useStoreState, useStoreActions } from 'easy-peasy';\nimport Game from './components/boards/Game';\nimport HomeBoard from './components/homeBoard/HomeBoard';\nimport FindMatch from './components/findMatch/FindMatch';\nimport Friends from './components/friends/Friends';\nimport FriendsHome from './components/friends/FriendsHome';\nimport Login from './components/logReg/Login';\nimport Register from './components/logReg/Register';\nimport Leaderboard from './components/leaderboard/Leaderboard';\nimport Navigation from './components/navigation/Navigation';\nimport Footer from './components/footer/Footer';\nimport { socket } from './socket/socketImport';\nimport './logReg.css';\nimport './homePageLogged.css';\nimport './gamePage.css';\nimport './leaderboard.css';\n\nfunction App() {\n    const { getOnlineFriendsInterval, route, user, friendSocket, findMatchInterval, checkOppStatusInterval, search, updatLastOnlineInterval, inviteSent, inviteReceived } = useStoreState(state => ({\n        getOnlineFriendsInterval: state.getOnlineFriendsInterval,\n        route: state.route,\n        user: state.user,\n        friendSocket: state.friendSocket,\n        findMatchInterval: state.findMatchInterval,\n        checkOppStatusInterval: state.checkOppStatusInterval,\n        search: state.search,\n        updatLastOnlineInterval: state.updatLastOnlineInterval,\n        inviteSent: state.inviteSent,\n        inviteReceived: state.inviteReceived\n    }));\n\n    const { setRoute, setUser, setCurrentSocket, setSearch, setUpdatLastOnlineInterval, setInviteSent, setInviteReceived, setAllFriends, setUnsortedFriends, setFriendsOnline, setFriendSearch } = useStoreActions(actions => ({\n        setRoute: actions.setRoute,\n        setUser: actions.setUser,\n        setCurrentSocket: actions.setCurrentSocket,\n        setSearch: actions.setSearch,\n        setUpdatLastOnlineInterval: actions.setUpdatLastOnlineInterval,\n        setInviteSent: actions.setInviteSent,\n        setInviteReceived: actions.setInviteReceived,\n        setAllFriends: actions.setAllFriends,\n        setUnsortedFriends: actions.setUnsortedFriends,\n        setFriendsOnline: actions.setFriendsOnline,\n        setFriendSearch: actions.setFriendSearch\n    }));\n\n    const onRouteChange = async (e) => {\n        switch(e.target.value) {\n            case 'logOut':\n                if (user?.username) {\n                    setSearch(false);\n                    // removeUserSocket(true);\n                }\n                setRoute('login');\n                break;\n            case 'goToRegister':\n                setRoute('register');\n                break;\n            case 'goToLogin':\n                setRoute('login');\n                break;\n            case 'goHome':\n                setRoute('loggedIn');\n                break;\n            case 'goToLeaderboard':\n                setRoute('leaderboard');\n                break;\n            case 'login':\n                setRoute('loggedIn');\n                break;\n            case 'register':\n                setRoute('loggedIn');\n                break;\n            case 'game':\n                if (user?.username) {\n                    setSearch(false);\n                }\n                setRoute('game');\n                break;\n            default:\n                if (user?.username) {\n                    setSearch(false);\n                    // removeUserSocket(true);\n                }\n                setRoute('login');\n        }\n    }\n\n    const stopSearching = async () => {\n        try {\n           const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\n               method: 'put',\n               headers: {'Content-Type': 'application/json'},\n               body: JSON.stringify({\n                   username: user?.username,\n                   search: false\n               })\n           })\n           if (!response.ok) {throw new Error('Problem updating searching status')}\n       } catch(err) {\n           console.log(err);\n       }\n   }\n\n    const updateLastOnline = async () => {\n        try {\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/updateOnlineStatus`, {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: user?.username\n                })\n            })\n            if (!response.ok) {\n                throw new Error('Error');\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    const guestCleanup = async () => {\n        try {\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/guestCleanup', {\n                method: 'delete',\n                headers: {'Content-Type': 'application/json'}\n            })\n            if (!response.ok) {throw new Error('Problem adding guest')}\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        socket.on('connect', () => {\n            setCurrentSocket(socket.id);\n        })\n        guestCleanup();\n\n        return () => {\n            socket.off('connect');\n        }\n    }, [])\n\n    useEffect(() => {\n        if (user?.username?.length) {\n            if (route !== 'login' && route !== 'register') {\n                stopSearching();\n                updateInGameStatus(false);\n            }\n            setUpdatLastOnlineInterval(setInterval(updateLastOnline, 1000));\n        } else {\n            clearInterval(updatLastOnlineInterval);\n            clearInterval(findMatchInterval);\n        }\n\n        return () => {\n            clearInterval(updatLastOnlineInterval);\n        }\n    }, [user?.username])\n\n    useEffect(() => {\n        if (!search) {\n            clearInterval(findMatchInterval);\n            if (user?.username) {\n                stopSearching();\n            }\n        }\n    }, [search])\n\n    useEffect(() => {\n        if (route === 'game') {\n            setSearch(false);\n            clearInterval(getOnlineFriendsInterval);\n            stopSearching();\n            updateInGameStatus(true);\n        } else {\n            if (user?.username?.length) {\n                updateInGameStatus(false);\n            }\n            clearInterval(checkOppStatusInterval);\n        }\n\n        if ((route === 'login') || (route === 'register')) {\n            if (user?.hash !== 'guest') {\n                setUser(null);\n            }\n            clearInterval(getOnlineFriendsInterval);\n            setAllFriends([]);\n            setUnsortedFriends([]);\n            setFriendsOnline([]);\n            setFriendSearch('');\n        }\n    }, [route])\n\n\n    const updateInGameStatus = async (inGame) => {\n        try {\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/setInGame`, {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: user?.username,\n                    isInGame: inGame\n                })\n            })\n            if (!response.ok) {\n                throw new Error('Error');\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    // const showOnlineStatusToFriends = async () => {\n    //     try {\n    //         const response1 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\n    //         if (!response1.ok) {\n    //             throw new Error('Error')\n    //         }\n    //         const friends = await response1.json();\n    //         if (friends?.length) {\n    //             for (let f of friends) {\n    //                 if (f.socketid) {\n    //                     socket.emit('update user status', f.socketid);\n    //                 }\n    //             }\n    //         }\n    //     } catch(err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // const loadUser = (user) => {\n    //     setUser({ username: user.username, wins: user.wins })\n    // }\n\n    // const removeUserSocket = async (show) => {\n    //     const res = await fetch('https://calm-ridge-60009.herokuapp.com/removeUserSocket', {\n    //       method: 'put',\n    //       headers: {'Content-Type': 'application/json'},\n    //       body: JSON.stringify({\n    //         username: user.username\n    //       })\n    //     })\n    //     const socketRemoved = await res.json();\n    //     if (socketRemoved && show) {\n    //         showOnlineStatusToFriends();\n    //     }\n    // }\n\n    window.addEventListener('beforeunload', (e) => {\n        e.preventDefault();\n        if (user?.username) {\n            stopSearching();\n            updateInGameStatus(false);\n        }\n        if (route === 'game') {\n            socket.emit('send exit game', friendSocket);\n        }\n        // removeUserSocket(false);\n        e.returnValue = '';\n    })\n\n    document.onkeydown = (e) => {\n        const loginBtn = document.querySelector('.loginBtn');\n        const registerBtn = document.querySelector('.registerBtn');\n        const logUsername = document.querySelector('.login > .username > input');\n        const registerUsername = document.querySelector('.register > .username > input');\n        const logPassword = document.querySelector('.login > .password > input');\n        const registerPassword = document.querySelector('.register > .password > input');\n        const friendRequestBtn = document.querySelector('.friendRequestBtn');\n\n        if ((e.code === 'Enter') && (route === 'login' || route === 'register')) {\n            e.preventDefault();\n            if ((logUsername?.value?.length && logPassword?.value?.length) || (registerUsername?.value?.length && registerPassword?.value?.length)) {\n                route === 'login'\n                ? loginBtn.click()\n                : registerBtn.click()\n            }\n        } else if ((e.code === 'Enter') && (route === 'loggedIn')) {\n            e.preventDefault();\n            friendRequestBtn.click();\n        }\n    };\n\n    return (\n        route === 'login' || route === 'register'\n        ?\n        <div className='logRegPage'>\n            <Navigation socket={socket} onRouteChange={onRouteChange} />\n            <FriendsHome onRouteChange={onRouteChange}/>\n            <div className='homeText'>\n                <h1>Battleship</h1>\n            </div>\n            <FindMatch socket={socket} />\n            <div className='logReg'>\n                {\n                    route === 'login'\n                    ? <Login onRouteChange={onRouteChange}/>\n                    : <Register onRouteChange={onRouteChange}/>\n                }\n            </div>\n            <Footer />\n        </div>\n        :\n        <>\n            {\n            route === 'loggedIn' || route === 'leaderboard'\n            ?\n                user?.username?.length\n                ?\n                <>\n                    <div className={`homePageLogged ${route === 'leaderboard' ? 'hide' : null}`}>\n                        <Navigation socket={socket} onRouteChange={onRouteChange} />\n                        <Friends socket={socket} />\n                        <div className='matchAndBoard'>\n                            <FindMatch socket={socket} />\n                            <HomeBoard />\n                        </div>\n                        <Footer />\n                    </div>\n                    <div className={`leaderboard ${route === 'loggedIn' ? 'hide' : null}`}>\n                        <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n                        <Footer />\n                    </div>\n                </>\n                :\n                <div className={`leaderboard`}>\n                    <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n                    <Footer />\n                </div>\n            : <Game socket={socket} onRouteChange={onRouteChange} />\n            // <>\n            //     {\n            //     route === 'leaderboard'\n            //     ?\n            //     <div className='leaderboard'>\n            //         <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n            //         <Footer />\n            //     </div>\n            //     :\n            //     <Game socket={socket} onRouteChange={onRouteChange} />\n            //     }\n            // </>\n            }\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StoreProvider, createStore } from 'easy-peasy';\nimport model from './model';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(model);\n\nReactDOM.render(\n  <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}