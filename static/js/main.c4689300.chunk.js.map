{"version":3,"sources":["components/boards/Board.js","components/ships/Ships.js","components/boards/UserBoard.js","components/boards/OpponentBoard.js","components/navigation/msg-icon.png","components/navigation/FriendRequests.js","components/navigation/Navigation.js","components/footer/Footer.js","components/readyButton/ReadyButton.js","components/boards/Game.js","components/homeBoard/HomeBoard.js","components/friends/SingleFriend.js","components/friends/Friends.js","components/friends/FriendsHome.js","components/homeText/HomeText.js","components/logReg/Login.js","components/logReg/Register.js","components/leaderboard/Leaderboard.js","socket/socketImport.js","App.js","reportWebVitals.js","index.js"],"names":["AssembleBoard","gameRoute","onSquareClicked","route","allSquares","i","j","push","row","String","fromCharCode","col","colStart","rowStart","handleSquareClick","e","parentBoard","target","parentElement","classList","contains","map","square","onClick","style","gridArea","className","id","Ships","rotating","orientation","selectedShip","selectedShipName","shipIsSelected","setManualGridLocation","onShipSelect","userBoard","document","querySelector","cursor","zIndex","border","parseInt","offsetWidth","offsetHeight","collisionDetection","item1","item2","d1Offset","$","offset","d1Height","outerHeight","d1Width","outerWidth","d1Top","top","d1Left","left","d2Offset","d2Height","d2Width","d2Top","d2Left","addEventListener","areaIsClear","ships","querySelectorAll","ship","console","log","window","oncontextmenu","transform","keyCode","preventDefault","undefined","onmouseover","userGrid","childShip","targetId","substring","indexOf","length","remove","gridColumn","gridRow","add","UserBoard","yourTurn","setYourTurn","socket","friendSocket","useEffect","on","shot","oppShot","getElementById","applyHitOrMiss","off","hit","matchOppShotToBoard","emit","shotSquare","socketid","Board","OpponentBoard","data","clickedSquare","result","FriendRequests","setUnsortedFriends","username","useState","friendRequests","setFriendRequests","updateRequests","a","navBar","fetch","res","ok","Error","json","requests","setProperty","split","removeRequest","friend","newRequestList","newRequestListArray","index","splice","join","method","headers","body","JSON","stringify","requestlist","res2","onRemoveRequest","addFriend","value","friendList","friendArray","friendlistOfFriends","friendSocketId","user","friendlistOfFriendsArray","friends","includes","friendlist","res3","allF","response","name","status","friendname","res4","addFriendStart","Dropdown","Toggle","variant","src","msgIcon","alt","Menu","request","Navigation","onRouteChange","Footer","ReadyButton","handleReadyButton","Game","setRoute","setGameRoute","playerIsReady","setPlayerIsReady","opponentIsReady","setOpponentIsReady","addWin","setTimeout","alert","gameInstructions","squares","score","readyBtn","opacity","HomeBoard","SingleFriend","setFriendSocket","currentSocket","fetchFriends","btn","disabled","backgroundColor","color","childNodes","nodeValue","sendInvite","innerHTML","Friends","unsortedFriends","showOnlineStatusToFriends","allFriends","setAllFriends","friendFilter","setFriendFilter","friendSearch","setFriendSearch","friendsOnline","setFriendOnline","timer","setInterval","checkFriendStatus","clearInterval","sortFriends","onlineFriends","offlineFriends","justAdded","forEach","f","concat","allFriendNames","fetchUserFriendData","sendFriendRequest","friendAlert","friendName","friendsRequests","friendsRequestsArray","requestsArray","friendrequests","onChange","type","placeholder","toLowerCase","FriendsHome","HomeText","Login","loadUser","userName","setUserName","password","setPassword","logReg","onSubmitLogin","Register","then","Leaderboard","topFive","setTopFive","getTopPlayers","tempArr","wins","player","io","App","setUser","setCurrentSocket","removeUserSocket","response1","response2","show","returnValue","onkeydown","loginBtn","registerBtn","friendRequestBtn","click","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.c4689300.chunk.js","sourcesContent":["import React from 'react';\r\nimport './board.css';\r\n\r\nconst AssembleBoard = ({gameRoute, route, onSquareClicked}) => {\r\n    const allSquares = [];\r\n    for (let i = 1; i < 11; i++) {\r\n        for (let j = 0; j < 10; j++) {\r\n            allSquares.push({row: String.fromCharCode(97 + j), col: i, colStart: i, rowStart: j + 1})\r\n        }\r\n    }\r\n\r\n    const handleSquareClick = (e) => {\r\n        const parentBoard = e.target.parentElement.parentElement.parentElement;\r\n        if (gameRoute === 'gameInProgress' && parentBoard.classList.contains('opponentBoard')) {\r\n            onSquareClicked(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        allSquares.map(square => {\r\n            return (\r\n                <div\r\n                    onClick={handleSquareClick}\r\n                    style={{gridArea: square.row + square.col}}\r\n                    className={'singleSquare ' + square.row + ' ' + square.row + square.col}\r\n                    key={square.row + square.col}\r\n                    id={square.colStart + '-' + square.rowStart}\r\n                >\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default AssembleBoard;\r\n","// import react from 'react';\r\nimport $ from 'jquery';\r\nimport './ships.css';\r\nimport '../boards/board.css';\r\n\r\nconst Ships = ({gameRoute, route}) => {\r\n    let rotating = false;\r\n    let orientation = 'hor';\r\n    let selectedShip = '';\r\n    let selectedShipName = '';\r\n    let shipIsSelected = false;\r\n    let setManualGridLocation = false;\r\n\r\n    // Decide what happens when a ship is selected to move\r\n\r\n    const onShipSelect = (e) => {\r\n        if (!shipIsSelected && gameRoute === 'placeShips') {\r\n            const userBoard = document.querySelector('.userBoard');\r\n            shipIsSelected = true;\r\n            selectedShip = e.target.parentElement;\r\n            userBoard.style.cursor = 'pointer';\r\n            selectedShip.style.zIndex = '-2';\r\n            // selectedShip.style.backgroundColor = 'rgba(0,0,0,0.2)';\r\n            selectedShip.style.border = '2px solid rgba(0, 250, 0, 0.5)';\r\n\r\n            if (parseInt(e.target.parentElement.offsetWidth) > parseInt(e.target.parentElement.offsetHeight)) {\r\n                orientation = 'hor';\r\n            } else if (parseInt(e.target.parentElement.offsetHeight) > parseInt(e.target.parentElement.offsetWidth)) {\r\n                orientation = 'vert';\r\n            }\r\n\r\n            if (selectedShip.classList.contains('carrier')) {\r\n                selectedShipName = 'carrier';\r\n            } else if (selectedShip.classList.contains('battleship')) {\r\n                selectedShipName = 'battleship';\r\n            } else if (selectedShip.classList.contains('cruiser')) {\r\n                selectedShipName = 'cruiser';\r\n            } else if (selectedShip.classList.contains('submarine')) {\r\n                selectedShipName = 'submarine';\r\n            } else if (selectedShip.classList.contains('destroyer')) {\r\n                selectedShipName = 'destroyer';\r\n            }\r\n        }\r\n    }\r\n\r\n    // collision detection\r\n\r\n    const collisionDetection = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    // Place a ship down that is currently selected\r\n\r\n    document.addEventListener('click', e => {\r\n        if (shipIsSelected && e.target.classList.contains('singleSquare') && rotating === false && areaIsClear()) {\r\n            selectedShip.style.zIndex = '3';\r\n            document.querySelector('.userBoard').style.cursor = 'default';\r\n            // selectedShip.style.backgroundColor = null;\r\n            selectedShip.style.border = null;\r\n            shipIsSelected = false;\r\n        }\r\n    })\r\n\r\n    // Locate opponents shot on user board\r\n\r\n    // const matchOppShotToBoard = () => {\r\n    //     if\r\n    // }\r\n\r\n    // Check to see if player is placing the ship in an open space\r\n\r\n    const areaIsClear = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n         for (let ship of ships) {\r\n            if (!ship.classList.contains(selectedShipName) && collisionDetection(selectedShip, ship)) {\r\n                console.log(ship.className);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Rotate the selected ship by right-clicking\r\n\r\n    window.oncontextmenu = (e) => {\r\n         if (shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Decide what happens on various key-press events\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault();\r\n        }\r\n        // Rotate the selected ship by pressing the 'space' key\r\n\r\n        if (e.keyCode === 32 && selectedShip.style !== undefined && shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n    })\r\n\r\n    // Change the grid-row and grid-column of the selected ship mouse is over the user's board\r\n\r\n    window.onmouseover = (e) => {\r\n        // const sub = document.querySelector(`.submarine`);\r\n        if (shipIsSelected) {\r\n            rotating = false;\r\n            selectedShip.style.transform = null;\r\n            const userGrid = document.querySelector('.userBoard');\r\n            const childShip = document.querySelector(`.${selectedShipName}Icon`);\r\n            const targetId = e.target.id;\r\n            const colStart = targetId.substring(0, targetId.indexOf('-'));\r\n            const rowStart = targetId.substring((targetId.indexOf('-') + 1), targetId.length);\r\n\r\n\r\n            if (userGrid.contains(e.target)\r\n            && (e.target.classList.contains('singleSquare'))\r\n            && shipIsSelected === true) {\r\n                if (orientation === 'hor') {\r\n                    childShip.classList.remove(`rotate-${selectedShipName}`);\r\n                    if (colStart < (11 - parseInt(selectedShip.id) + 1)) {\r\n                        selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + parseInt(selectedShip.id)}`;\r\n                    } else if (colStart >= (11 - parseInt(selectedShip.id) + 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridColumn = `11 / ${11 - parseInt(selectedShip.id)}`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridRow = `${rowStart} / ${parseInt(rowStart) + 1}`;\r\n                } else if (orientation === 'vert') {\r\n                    childShip.classList.add(`rotate-${selectedShipName}`);\r\n                    if (rowStart > (parseInt(selectedShip.id) - 1)) {\r\n                        selectedShip.style.gridRow = `${parseInt(rowStart) + 1} / ${parseInt(rowStart) - parseInt(selectedShip.id) + 1}`;\r\n                    } else if (rowStart <= (parseInt(selectedShip.id) - 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridRow = `${parseInt(selectedShip.id) + 1} / 1`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + 1}`;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div id='5' className='ship carrier'><div onClick={onShipSelect} className='carrierIcon'></div></div>\r\n\r\n            <div id='4' className='ship battleship'><div onClick={onShipSelect} className='battleshipIcon'></div></div>\r\n\r\n            <div id='3' className='ship cruiser'><div onClick={onShipSelect} className='cruiserIcon'></div></div>\r\n\r\n            <div id='3' className='ship submarine'><div onClick={onShipSelect} className='submarineIcon'></div></div>\r\n\r\n            <div id='2' className='ship destroyer'><div onClick={onShipSelect} className='destroyerIcon'></div></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ships;\r\n","import React, { useEffect } from 'react';\r\nimport Board from './Board';\r\nimport Ships from '../ships/Ships';\r\n// import useSound from 'use-sound';\r\n// import hitMissSounds from './hit-miss-sounds.mp3';\r\nimport $ from 'jquery';\r\nimport './board.css';\r\n\r\nconst UserBoard = ({yourTurn, setYourTurn, gameRoute, socket, friendSocket, route}) => {\r\n    // const [play] = useSound(hitMissSounds, {\r\n    //     soundEnabled: true,\r\n    //     volume: 0.5,\r\n    //     sprite: {\r\n    //         miss: [1, 2000],\r\n    //         hit: [2001, 1500]\r\n    //     }\r\n    // });\r\n    useEffect(() => {\r\n        socket.on('receive shot', shot => {\r\n            const oppShot = document.getElementById(shot);\r\n            applyHitOrMiss(oppShot);\r\n            setYourTurn(true);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive shot');\r\n        }\r\n    },[])\r\n\r\n    const hit = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    const applyHitOrMiss = (oppShot) => {\r\n        if (matchOppShotToBoard(oppShot)) {\r\n            // play({id: 'hit'});\r\n            // setTimeout(() => {\r\n                oppShot.classList.add('hit');\r\n            // }, 300)\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'hit', socketid: friendSocket});\r\n        } else {\r\n            // play({id: 'miss'});\r\n            // setTimeout(() => {\r\n                oppShot.classList.add('miss');\r\n            // }, 300)\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'miss', socketid: friendSocket});\r\n        }\r\n    }\r\n\r\n    const matchOppShotToBoard = (shot) => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        for (let ship of ships) {\r\n            if (hit(shot, ship)) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className='board userBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board gameRoute={gameRoute} />\r\n                    <Ships gameRoute={gameRoute} route={route}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport Board from './Board';\r\nimport './board.css';\r\n\r\nconst OpponentBoard = ({ yourTurn, setYourTurn, gameRoute, socket, friendSocket, route }) => {\r\n    // const [squareClicked, setSquareClicked] = useState('');\r\n    useEffect(() => {\r\n        socket.on('show result on opponent board', data => {\r\n            const clickedSquare = document.querySelector(`.opponentBoard [id='${data.shotSquare}']`);\r\n            if (data.result === 'hit' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('hit');\r\n            } else if (data.result === 'miss' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('miss');\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            socket.off('show result on opponent board');\r\n        }\r\n    },[])\r\n\r\n    const onSquareClicked = (e) => {\r\n        if (yourTurn && !e.target.classList.contains('hit') && !e.target.classList.contains('miss')) {\r\n            // setSquareClicked(e.target);\r\n            socket.emit('send shot to opponent', {target: e.target.id, socketid: friendSocket});\r\n            setYourTurn(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='board opponentBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board gameRoute={gameRoute} route={route} onSquareClicked={onSquareClicked} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentBoard;\r\n\r\n","export default __webpack_public_path__ + \"static/media/msg-icon.b63e7a13.png\";","import React, { useState, useEffect } from 'react';\r\nimport './navigation.css';\r\nimport msgIcon from './msg-icon.png';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst FriendRequests = ({ setUnsortedFriends, socket, username }) => {\r\n    const [friendRequests, setFriendRequests] = useState([]);\r\n\r\n    useEffect(() => {\r\n        updateRequests();\r\n\r\n        socket.on('receive friend request', () => {\r\n            updateRequests();\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive friend request');\r\n        }\r\n    },[])\r\n\r\n    const updateRequests = async () => {\r\n        const navBar = document.querySelector('nav');\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                navBar.style.setProperty('--notification-color', 'rgba(255,0,0,0.8)');\r\n                setFriendRequests(requests.split(','));\r\n            } else {\r\n                navBar.style.setProperty('--notification-color', 'transparent');\r\n                setFriendRequests(null);\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const removeRequest = async (friend) => {\r\n        let newRequestList = '';\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const newRequestListArray = requests.split(',');\r\n                if (newRequestListArray.length <= 1) {\r\n                    newRequestList = null;\r\n                } else {\r\n                    const index = newRequestListArray.indexOf(friend);\r\n                    if (index > -1) {\r\n                        newRequestListArray.splice(index, 1);\r\n                        newRequestList = newRequestListArray.join(',');\r\n                    }\r\n                }\r\n            }\r\n\r\n            const res2 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: newRequestList,\r\n                        username: username\r\n                    })\r\n            });\r\n            if (!res2.ok) {\r\n                throw new Error('Could not update friend requests');\r\n            }\r\n            const userRemoved = await res2.json();\r\n            if (userRemoved) {\r\n                updateRequests();\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const onRemoveRequest = (e) => {\r\n        removeRequest(e.target.id);\r\n    }\r\n\r\n     const addFriend = async (friend) => {\r\n        console.log('friend added');\r\n        document.querySelector('.addFriendInput').value = '';\r\n        let friendList = '';\r\n        let friendArray = [];\r\n        let friendlistOfFriends = '';\r\n        let friendSocketId = '';\r\n//-----------------------------------------------------------------------------------\r\n        // Search the database to check if the name matches any users in the databse\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user = await res.json();\r\n            if (user.username === username) {\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user.username) {\r\n                let friendlistOfFriendsArray = [];\r\n                friendSocketId = user.socketid;\r\n                if (user.friends !== null && user.friends !== '') {\r\n                    friendlistOfFriendsArray = user.friends.split(',');\r\n                    if (friendlistOfFriendsArray.includes(username)) {\r\n                        throw new Error('You are already a friend of the user');\r\n                    }\r\n                }\r\n                friendlistOfFriendsArray.push(username);\r\n                if (friendlistOfFriendsArray.length > 1) {\r\n                    friendlistOfFriends = friendlistOfFriendsArray.join(',');\r\n                } else {\r\n                    friendlistOfFriends = friendlistOfFriendsArray[0];\r\n                }\r\n    //-----------------------------------------------------------------------------------\r\n                // If friend exists, grab the user's friend list string\r\n                // Make a temporary string and array with the new friend\r\n    //-----------------------------------------------------------------------------------\r\n                const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${username}`)\r\n                if (!res2.ok) {throw new Error('Problem accessing friends list')}\r\n                const friends = await res2.json();\r\n                if (friends !== null && friends !== '') {\r\n                    friendArray = friends.split(',');\r\n                    if (friendArray.includes(friend)) {\r\n                        throw new Error('User already your friendddddddd');\r\n                    }\r\n                }\r\n                friendArray.push(friend);\r\n                if (friendArray.length > 1) {\r\n                    friendList = friendArray.join(',');\r\n                } else {\r\n                    friendList = friendArray[0];\r\n                }\r\n\r\n    //-----------------------------------------------------------------------------------\r\n                // Update the user's friend list with the new friends string\r\n                // Pass the updated friends array to 'fetchFriendData'\r\n    //-----------------------------------------------------------------------------------\r\n                const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/addFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        username: username,\r\n                        friendlist: friendList\r\n                    })\r\n                })\r\n                if (!res3.ok) {throw new Error('Problem adding friend')}\r\n                const userAdded = await res3.json();\r\n                if (userAdded) {\r\n                    let allF = [];\r\n                    for (let friend of friendArray) {\r\n                        try {\r\n                            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n                            if (!response.ok) {throw new Error('User does not exist')}\r\n                            const user = await response.json();\r\n                            if (user.socketid) {\r\n                                allF.push({name: user.username, status: 'online'})\r\n                            } else {\r\n                                allF.push({name: user.username, status: 'offline'})\r\n                            }\r\n                        } catch(err) {\r\n                            console.log(err);\r\n                        }\r\n                    }\r\n                    setUnsortedFriends(allF);\r\n                }\r\n                const res4 = await fetch('https://calm-ridge-60009.herokuapp.com/addSelfToFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        friendlist: friendlistOfFriends,\r\n                        friendname: friend\r\n                    })\r\n                })\r\n                if (!res4.ok) {throw new Error('Problem adding self to friendlist of friend')}\r\n                const selfAdded = await res4.json();\r\n                if (selfAdded && friendSocketId !== null) {\r\n                    socket.emit('update user status', friendSocketId);\r\n                }\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addFriendStart = async (e) => {\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${e.target.id}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user = await res.json();\r\n            if (user.username) {\r\n                removeRequest(e.target.id);\r\n                // socket.emit('send add friend', {socketid: user.socketid, user: username})\r\n                addFriend(e.target.id);\r\n                // Can't add friend if their offline   FIX\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dropdown className='dropdown'>\r\n              <Dropdown.Toggle variant=\"success\" className='messageToggle' id=\"dropdown-basic\"><img src={msgIcon} alt='Message Icon' /></Dropdown.Toggle>\r\n              <Dropdown.Menu id='dropdowns'>\r\n              {\r\n                friendRequests !== null\r\n                ?\r\n                  friendRequests.map(request => {\r\n                    return (\r\n                        <div key={request} className='dropdownItem'>\r\n                            <div className='text'>Friend request from <h3 className=\"requesterName\">{request}</h3></div>\r\n                            <div>\r\n                                <button onClick={addFriendStart} id={request} className='acceptInvite'>Accept</button>\r\n                                <button onClick={onRemoveRequest} id={request} className='rejectInvite'>Reject</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                  })\r\n                  : (null)\r\n              }\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FriendRequests;\r\n","import React from 'react';\r\nimport FriendRequests from './FriendRequests';\r\nimport './navigation.css';\r\n\r\nconst Navigation = ({ friendSocket, setUnsortedFriends, socket, username, onRouteChange, route }) => {\r\n    const handleExitClick = (e) => {\r\n        onRouteChange(e);\r\n        socket.emit('send exit game', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <nav className='nav'>\r\n            {\r\n            route === 'loggedIn'\r\n            ?\r\n            <>\r\n                <FriendRequests setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n                <button value='goToLogin' onClick={onRouteChange}>Log Out</button>\r\n            </>\r\n            :\r\n            <>\r\n                {\r\n                route === 'leaderboard'\r\n                ?\r\n                    username\r\n                    ?\r\n                    <>\r\n                        <FriendRequests setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n                        <button value='goHome' onClick={onRouteChange}>Home</button>\r\n                        <button value='goToLogin' onClick={onRouteChange}>Log Out</button>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <button value='goToLogin' onClick={onRouteChange}>Back</button>\r\n                    </>\r\n                :\r\n                <>\r\n                    <FriendRequests setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n                    <button value='goHome' onClick={handleExitClick}>Exit</button>\r\n                    <button value='goToLogin' onClick={onRouteChange}>Log Out</button>\r\n                </>\r\n                }\r\n            </>\r\n            }\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer><div className='footer'></div></footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React from 'react';\r\n\r\nconst ReadyButton = ({handleReadyButton}) => {\r\n    return (\r\n        <div className='readyBtn'>\r\n            <button onClick={handleReadyButton} className='btn'><h3>Ready!</h3></button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ReadyButton;\r\n","import React, { useState, useEffect } from 'react';\r\nimport UserBoard from './UserBoard';\r\nimport OpponentBoard from './OpponentBoard';\r\nimport Navigation from '../navigation/Navigation';\r\nimport Footer from '../footer/Footer';\r\nimport ReadyButton from '../readyButton/ReadyButton';\r\n\r\nconst Game = ({ setRoute, setUnsortedFriends, socket, username, onRouteChange, route, friendSocket }) => {\r\n    const [gameRoute, setGameRoute] = useState('placeShips');\r\n    const [playerIsReady, setPlayerIsReady] = useState(false);\r\n    const [opponentIsReady, setOpponentIsReady] = useState(false);\r\n    const [yourTurn, setYourTurn] = useState(false);\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        socket.on('receive game over', () => {\r\n            // gamePage.style.setProperty('--player-turn-text', '\"You Won!\"');\r\n            // setTimeout(gameOver, 2000);\r\n            addWin();\r\n            setTimeout(() => {\r\n                window.alert('You Won!!!');\r\n                setRoute('loggedIn');\r\n            }, 300);\r\n        })\r\n\r\n        socket.on('receive exit game', () => {\r\n            window.alert('Opponent has left the game');\r\n            setRoute('loggedIn');\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive ready status');\r\n            socket.off('receive game over');\r\n            socket.off('receive exit game');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const gameInstructions = document.querySelector('.gamePage');\r\n        if (gameRoute === 'placeShips') {\r\n            gameInstructions.style.setProperty('--player-turn-text', '\"Place your ships!\"');\r\n        } else if (yourTurn) {\r\n            gameInstructions.style.setProperty('--player-turn-text', '\"Your Turn!\"');\r\n        } else {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"Opponent's Turn!\"`);\r\n        }\r\n    },[yourTurn, gameRoute])\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        const squares = document.querySelectorAll('.userBoard .singleSquare');\r\n        let score = 0;\r\n        if (yourTurn) {\r\n            for (let square of squares) {\r\n                if (square.classList.contains('hit')) {\r\n                    score += 1;\r\n                }\r\n            }\r\n            if (score >= 17) {\r\n                // gamePage.style.setProperty('--player-turn-text', '\"You Lose\"');\r\n                socket.emit('game over', friendSocket);\r\n                setTimeout(() => {\r\n                    window.alert('You Lose');\r\n                    setRoute('loggedIn');\r\n                }, 300);\r\n            }\r\n        }\r\n    },[yourTurn])\r\n\r\n    const addWin = async () => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/updateWins', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: username\r\n                })\r\n            })\r\n            const winsUpdated = await res.json();\r\n            if (!winsUpdated) {\r\n                throw new Error('Could not increment wins')\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    socket.on('receive ready status', () => {\r\n        if (playerIsReady) {\r\n            setGameRoute('gameInProgress');\r\n        }\r\n        setOpponentIsReady(true);\r\n    })\r\n\r\n    const handleReadyButton = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        const readyBtn = document.querySelector('.readyBtn');\r\n        for (let ship of ships) {\r\n            ship.style.cursor = 'default';\r\n        }\r\n        if (opponentIsReady) {\r\n            setGameRoute('gameInProgress');\r\n            setYourTurn(true);\r\n        } else {\r\n            readyBtn.style.opacity = '0.4';\r\n        }\r\n        setPlayerIsReady(true);\r\n        socket.emit('send ready status', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <div className='gamePage'>\r\n            <Navigation friendSocket={friendSocket} setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} onRouteChange={onRouteChange} route={route} />\r\n            <UserBoard yourTurn={yourTurn} setYourTurn={setYourTurn} gameRoute={gameRoute} socket={socket} friendSocket={friendSocket} route={route}/>\r\n            {\r\n            gameRoute === 'placeShips'\r\n            ? <ReadyButton handleReadyButton={handleReadyButton} />\r\n            : (null)\r\n            }\r\n            <OpponentBoard yourTurn={yourTurn} setYourTurn={setYourTurn} gameRoute={gameRoute} socket={socket} friendSocket={friendSocket} route={route}/>\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Board from '../boards/Board';\r\nimport './homeBoard.css';\r\n\r\nconst HomeBoard = ({route}) => {\r\n    return (\r\n        <div className='board homeBoard'>\r\n{/*            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>*/}\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board route={route}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport './singleFriend.css';\r\n\r\nconst SingleFriend = ({ socket, route, setFriendSocket, currentSocket, username, fetchFriends, name, status, setRoute }) => {\r\n    let friendSocket = '';\r\n\r\n    useEffect(() => {\r\n        socket.on('receive go to game', () => {\r\n            setRoute('game');\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n            socket.off('receive invite');\r\n        }\r\n    },[])\r\n\r\n    socket.on('receive invite', data => {\r\n        const btn = document.querySelector(`.btn${data.username}`);\r\n        if (route === 'loggedIn' && btn !== null) {\r\n            if (btn.disabled === true) {\r\n                btn.style.backgroundColor = 'rgba(0,255,50,0.7)';\r\n                btn.style.border = '2px solid rgba(255,255,255,0.5)';\r\n                btn.style.color = 'rgba(0,0,0,1)';\r\n                btn.disabled = false;\r\n            }\r\n            btn.childNodes[0].nodeValue = \"Accept\";\r\n            friendSocket = data.socketid;\r\n        }\r\n    })\r\n\r\n    const sendInvite = async (e) => {\r\n        const friend = e.target.id;\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`)\r\n            const user = await response.json();\r\n            if (user.socketid) {\r\n                setFriendSocket(user.socketid);\r\n                socket.emit('send invite', {currentSocket: currentSocket, username: username, socketid: user.socketid});\r\n                e.target.childNodes[0].nodeValue = \"Invite sent\";\r\n                e.target.style.backgroundColor = 'transparent';\r\n                e.target.style.border = 'none';\r\n                e.target.style.color = 'rgba(0,255,0,0.8)';\r\n                e.target.disabled = true;\r\n\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const acceptInvite = () => {\r\n        setFriendSocket(friendSocket);\r\n        socket.emit('send go to game', friendSocket);\r\n        setRoute('game');\r\n    }\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.innerHTML === 'Invite') {\r\n            sendInvite(e)\r\n        } else if (e.target.innerHTML === 'Accept') {\r\n            acceptInvite()\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id={name} value={name} className='friendBlock'>\r\n            <div className='friendText'>\r\n                <h3>{name}</h3>\r\n                <button className={'btn' + name} onClick={handleOnClick} id={name}>Invite</button>\r\n            </div>\r\n            <div id={status} className={status}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleFriend;\r\n","import React, { useState, useEffect } from 'react';\r\nimport SingleFriend from './SingleFriend';\r\nimport './friends.css';\r\n\r\nconst Friends = ({ unsortedFriends, setUnsortedFriends, socket, route, setFriendSocket, currentSocket, username, showOnlineStatusToFriends, setRoute }) => {\r\n    const [allFriends, setAllFriends] = useState([]);\r\n    const [friendFilter, setFriendFilter] = useState('');\r\n    const [friendSearch, setFriendSearch] = useState('');\r\n    const [friendsOnline, setFriendOnline] = useState(0);\r\n\r\n    // Start fetching friends on component mount\r\n// -----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        fetchFriends();\r\n        showOnlineStatusToFriends();\r\n\r\n        let timer = setInterval(checkFriendStatus, 5000);\r\n\r\n        socket.on('update friend status', () => {\r\n            clearInterval(timer);\r\n            fetchFriends();\r\n            timer = setInterval(checkFriendStatus, 5000);\r\n        });\r\n\r\n        return () => {\r\n            socket.off('update friend status');\r\n        }\r\n    }, [])\r\n//-----------------------------------------------------------------------------------\r\n    // Sort the friends when fetching has finished/unsortedFriends has updated\r\n//-----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        sortFriends();\r\n    },[unsortedFriends])\r\n\r\n    useEffect(() => {\r\n        fetchFriends();\r\n    },[friendsOnline])\r\n//-----------------------------------------------------------------------------------\r\n    // Sort friends. Online at top\r\n//-----------------------------------------------------------------------------------\r\n    const sortFriends = () => {\r\n        const onlineFriends = [];\r\n        const offlineFriends = [];\r\n        const justAdded = [];\r\n        unsortedFriends.forEach(f => {\r\n            if (f.name === friendSearch) {\r\n                if (f.status === 'online') {\r\n                    justAdded.push(f)\r\n                } else {\r\n                    justAdded.push(f)\r\n                }\r\n            } else {\r\n                if (f.status === 'online') {\r\n                    onlineFriends.push(f)\r\n                } else {\r\n                    offlineFriends.push(f)\r\n                }\r\n            }\r\n        })\r\n        if (justAdded.length) {\r\n            setAllFriends(justAdded.concat(onlineFriends).concat(offlineFriends));\r\n        } else {\r\n            setAllFriends(onlineFriends.concat(offlineFriends));\r\n        }\r\n    }\r\n\r\n    const checkFriendStatus = async () => {\r\n         try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendsOnline?username=${username}`)\r\n            const onlineFriends = await response.json();\r\n            if (friendsOnline !== onlineFriends) {\r\n                setFriendOnline(onlineFriends);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n//-----------------------------------------------------------------------------------\r\n    // Get the string of friends that is stored in the database for the user\r\n    // Convert to array of friends\r\n    // Pass the array to 'fetchFriendData()'\r\n// -----------------------------------------------------------------------------------\r\n    const fetchFriends = async () => {\r\n        let allFriendNames = [];\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${username}`)\r\n            if (!response.ok) {throw new Error('Problem accessing friends list')}\r\n            const friends = await response.json();\r\n            if (friends !== null && friends !== '') {\r\n                allFriendNames = friends.split(',');\r\n                fetchUserFriendData(allFriendNames);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n//-----------------------------------------------------------------------------------\r\n    // Search the database for each of the user's friends\r\n    // Return those users, and add their username & online status to a temporary array\r\n    // Assign that array to the unsortedFriends useState hook\r\n//-----------------------------------------------------------------------------------\r\n    const fetchUserFriendData = async (allFriendNames) => {\r\n        let allF = [];\r\n        for (let friend of allFriendNames) {\r\n            try {\r\n                const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n                if (!response.ok) {throw new Error('User does not exist')}\r\n                const user = await response.json();\r\n                if (user.socketid) {\r\n                    allF.push({name: user.username, status: 'online'})\r\n                } else {\r\n                    allF.push({name: user.username, status: 'offline'})\r\n                }\r\n            } catch(err) {\r\n                console.log(err);\r\n            }\r\n        }\r\n        setUnsortedFriends(allF);\r\n    }\r\n//-----------------------------------------------------------------------------------\r\n    // Send friend request\r\n//-----------------------------------------------------------------------------------\r\n    const sendFriendRequest = async () => {\r\n        document.querySelector('.addFriendInput').value = '';\r\n        const friendAlert = document.querySelector('.friendsContainer');\r\n        let friendName = '';\r\n        let friendSocketId = '';\r\n        let friendsRequests = '';\r\n        let friendsRequestsArray = [];\r\n//-----------------------------------------------------------------------------------\r\n        // Check to see if friend already sent user request\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const requestsArray = requests.split(',');\r\n                console.log(requestsArray);\r\n                if (requestsArray.includes(friendSearch)) {\r\n                    friendAlert.style.setProperty('--add-friend-alert', '\"User already sent you a request\"');\r\n                    throw new Error('User already sent you a request')\r\n                }\r\n            }\r\n//-----------------------------------------------------------------------------------\r\n            // Check to see if friend exists\r\n//-----------------------------------------------------------------------------------\r\n            const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friendSearch}`);\r\n            if (!res2.ok) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"User does not exist\"');\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user = await res2.json();\r\n            if (user.username === username) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"Cannot add yourself as a friend\"');\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user.username) {\r\n                friendName = user.username;\r\n                friendSocketId = user.socketid;\r\n//-----------------------------------------------------------------------------------\r\n                // Add user to friend's friendrequests\r\n//-----------------------------------------------------------------------------------\r\n                let friendList = [];\r\n                if (user.friends !== null && user.friends !== '') {\r\n                    friendList = user.friends.split(',');\r\n                }\r\n                if (user.friendrequests !== null && user.friendrequests !== '') {\r\n                    friendsRequestsArray = user.friendrequests.split(',');\r\n                    if (friendsRequestsArray.includes(username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"You have already sent them a request\"');\r\n                        throw new Error('You have already sent them a request');\r\n                    } else if (friendList.includes(username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    } else {\r\n                        friendsRequestsArray.push(username);\r\n                        friendsRequests = user.friendrequests.concat(`,${username}`);\r\n                    }\r\n                } else {\r\n                    if (friendList.includes(username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    }\r\n                    friendsRequests = username;\r\n                    friendsRequestsArray = [username];\r\n                }\r\n            }\r\n            friendAlert.style.setProperty('--add-friend-alert', '\"\"');\r\n            const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: friendsRequests,\r\n                        username: friendName\r\n                    })\r\n            });\r\n            if (!res3.ok) {\r\n                throw new Error('Could not add self to friendrequests of friend');\r\n            }\r\n            const selfAdded = await res3.json();\r\n            if (selfAdded) {\r\n                console.log('self added to friends list');\r\n                socket.emit('send friend request', friendSocketId);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='friendsContainer'>\r\n            <div className='friendsContainerHeader'>\r\n                    <h2>Friends</h2>\r\n                    <input className='friendSearch' onChange={(e) => setFriendFilter(e.target.value)} type='text' placeholder='Enter a username'/>\r\n            </div>\r\n            <div className='friendsSection'>\r\n\r\n\r\n                <div className='friendsListContainer'>\r\n                {\r\n                    allFriends.length\r\n                    ?\r\n                    <div className='friendsList'>\r\n                    {\r\n//-----------------------------------------------------------------------------------\r\n                        // Map through the user's friends\r\n                        // Return a single friend div w/ their username and status\r\n//-----------------------------------------------------------------------------------\r\n                        allFriends.map(f => {\r\n                            if (f.name.toLowerCase().includes(friendFilter.toLowerCase())) {\r\n                                return <SingleFriend socket={socket} route={route} setFriendSocket={setFriendSocket} currentSocket={currentSocket} username={username} fetchFriends={fetchFriends} key={f.name} name={f.name} status={f.status} setRoute={setRoute} />\r\n                            } else return null\r\n                        })\r\n                    }\r\n                    </div>\r\n                    : <h4 className='noFriends'>No friends have been added</h4>\r\n                }\r\n                </div>\r\n                <div className='addFriend'>\r\n                    <h3 className='addFriendText' >Add a friend</h3>\r\n                    <input className='addFriendInput' onChange={(e) => setFriendSearch(e.target.value)} type='text' placeholder='Enter a username'/>\r\n                    <button className='friendRequestBtn' onClick={sendFriendRequest}>Send Request</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport './friends.css';\r\n\r\nconst FriendsHome = ({onRouteChange}) => {\r\n    return (\r\n    <div className='friendsContainer'>\r\n        <div className='friendsContainerHeader'>\r\n            <h2>Friends</h2>\r\n        </div>\r\n        <div className='logToSeeFriendsText'>\r\n            <h3>Log in to see your friends here</h3>\r\n        </div>\r\n        <div className='homeLeaderboard'>\r\n            <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FriendsHome;\r\n","import React from 'react';\r\nimport './homeText.css';\r\n\r\nconst HomeText = () => {\r\n    return (\r\n        <div className='homeText'>\r\n            <h1>Play Battleship with your friends!</h1>\r\n            <h3>Log in or make an account to continue</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeText;\r\n","import React, { useState } from 'react';\r\nimport './logReg.css';\r\n\r\nconst Login = ({onRouteChange, loadUser, currentSocket}) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const logReg = document.querySelector('.logReg');\r\n\r\n    const onSubmitLogin = async (e) => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/login', {\r\n              method: 'put',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            const user = await res.json();\r\n            if (user.username) {\r\n                loadUser(user);\r\n                onRouteChange(e);\r\n            } else if (logReg !== null) {\r\n                logReg.style.setProperty(\"--reg-log-alert\", '\"The username or password you entered is incorrect\"');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='logReg'>\r\n            <h1>Log In</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)} type='password' />\r\n            </div>\r\n            <button className='loginBtn' value='login' onClick={onSubmitLogin}>Login</button>\r\n            <button value='goToRegister' onClick={onRouteChange} className='changeLogReg'>Register</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import React, { useState } from 'react';\r\nimport './logReg.css';\r\n\r\nconst Register = ({onRouteChange, loadUser, currentSocket}) => {\r\n    const [userName, setUserName] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const logReg = document.querySelector('.logReg');\r\n\r\n    const onSubmitRegister = (e) => {\r\n        if (userName.length < 5) {\r\n            logReg.style.setProperty(\"--reg-log-alert\", '\"Username must be at least 5 characters\"');\r\n        } else if (userName.length > 10) {\r\n            logReg.style.setProperty(\"--reg-log-alert\", '\"Username cannot be more than 10 characters\"');\r\n        } else if (password.length < 5) {\r\n            logReg.style.setProperty(\"--reg-log-alert\", '\"Password must be at least 5 characters\"');\r\n        } else {\r\n            fetch('https://calm-ridge-60009.herokuapp.com/register', {\r\n              method: 'post',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            .then(response => response.json())\r\n            .then(user => {\r\n              if (user.username) {\r\n                loadUser(user);\r\n                onRouteChange(e);\r\n              } else if (!user.ok) {\r\n                    logReg.style.setProperty(\"--reg-log-alert\", '\"Username has already been taken\"');\r\n                    console.log(user);\r\n              }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='logReg'>\r\n            <h1>Register</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)}type='password' />\r\n            </div>\r\n            <button className='registerBtn' value='register' onClick={onSubmitRegister}>Register</button>\r\n            <button value='goToLogin' onClick={onRouteChange} className='changeLogReg'>Login</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n\r\n","import React, { useState, useEffect } from 'react';\r\nimport Navigation from '../navigation/Navigation';\r\n\r\nconst Leaderboard = ({ route, onRouteChange, setUnsortedFriends, socket, username }) => {\r\n    const [topFive, setTopFive] = useState([]);\r\n\r\n    useEffect(() => {\r\n        getTopPlayers();\r\n    },[])\r\n\r\n    const getTopPlayers = async () => {\r\n        const tempArr = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getTopFive?userNum=${i}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const user = await response.json();\r\n            tempArr.push({name: user.username, wins: user.wins});\r\n        }\r\n        setTopFive(tempArr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation route={route} onRouteChange={onRouteChange} setUnsortedFriends={setUnsortedFriends} socket={socket} username={username} />\r\n            {\r\n            topFive.length\r\n            ?\r\n            <div className='topFive'>\r\n                {\r\n                topFive.map(player => {\r\n                    return <h3 className='LBplayer'> {player.name} : {player.wins} </h3>\r\n                })\r\n                }\r\n            </div>\r\n            : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;\r\n","import io from 'socket.io-client';\r\nexport const socket = io('https://safe-mesa-81492.herokuapp.com/');       //,{autoConnect: false}\r\n","import React, { useState, useEffect } from 'react';\nimport Game from './components/boards/Game';\nimport HomeBoard from './components/homeBoard/HomeBoard';\nimport Friends from './components/friends/Friends';\nimport FriendsHome from './components/friends/FriendsHome';\nimport HomeText from './components/homeText/HomeText';\nimport Login from './components/logReg/Login';\nimport Register from './components/logReg/Register';\nimport Leaderboard from './components/leaderboard/Leaderboard';\nimport Navigation from './components/navigation/Navigation';\nimport Footer from './components/footer/Footer';\nimport { socket } from './socket/socketImport';\nimport './homePage.css';\nimport './homePageLogged.css';\nimport './gamePage.css';\nimport './leaderboard.css';\n\nfunction App() {\n    const [route, setRoute] = useState('login');\n    const [user, setUser] = useState({username: '', wins: 0});\n    const [currentSocket, setCurrentSocket] = useState(null);\n    const [friendSocket, setFriendSocket] = useState(null);\n    const [unsortedFriends, setUnsortedFriends] = useState([]);\n\n    useEffect(() => {\n        socket.on('disconnect', () => {\n            // console.log('disconnected');\n        })\n\n        socket.on('connect', () => {\n            setCurrentSocket(socket.id);\n            // console.log('connected');\n        })\n    },[])\n    const onRouteChange = (e) => {\n        switch(e.target.value) {\n            case 'goToRegister':\n                setUser({username: '', wins: 0});\n                setRoute('register');\n                removeUserSocket(true);\n                break;\n            case 'goToLogin':\n                setUser({username: '', wins: 0});\n                setRoute('login');\n                removeUserSocket(true);\n                break;\n            case 'goHome':\n                setRoute('loggedIn');\n                break;\n            case 'goToLeaderboard':\n                setRoute('leaderboard');\n                break;\n            case 'login':\n                setRoute('loggedIn');\n                break;\n            case 'register':\n                setRoute('loggedIn');\n                break;\n            case 'game':\n                setRoute('game');\n                break;\n            default:\n                setRoute('login');\n                removeUserSocket(true);\n        }\n    }\n\n    const showOnlineStatusToFriends = async () => {\n        let allFriendNames = [];\n        try {\n            const response1 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\n            if (!response1.ok) {\n                throw new Error('Error')\n            }\n            const friends = await response1.json();\n            if (friends !== null && friends !== '') {\n                allFriendNames = friends.split(',');\n            }\n\n            for (let friend of allFriendNames) {\n                const response2 = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`)\n                if (!response2.ok) {\n                    throw new Error('Error')\n                }\n                const user = await response2.json();\n                if (user.socketid) {\n                    socket.emit('update user status', user.socketid);\n                }\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    const loadUser = (user) => {\n        setUser({ username: user.username, wins: user.wins })\n    }\n\n    const removeUserSocket = async (show) => {\n        const res = await fetch('https://calm-ridge-60009.herokuapp.com/removeUserSocket', {\n          method: 'put',\n          headers: {'Content-Type': 'application/json'},\n          body: JSON.stringify({\n            username: user.username\n          })\n        })\n        const socketRemoved = await res.json();\n        if (socketRemoved && show) {\n            showOnlineStatusToFriends();\n        }\n    }\n\n    window.addEventListener('beforeunload', (e) => {\n        e.preventDefault();\n        removeUserSocket(false);\n        e.returnValue = '';\n    })\n\n    //  const addUserSocket = () => {\n    //     fetch('https://calm-ridge-60009.herokuapp.com/removeUserSocket', {\n    //       method: 'put',\n    //       headers: {'Content-Type': 'application/json'},\n    //       body: JSON.stringify({\n    //         username: user.username,\n    //         socketid: currentSocket\n    //       })\n    //     })\n    //     .then(response => response.json())\n    //     .then(res => console.log(res))\n    // }\n\n    document.onkeydown = (e) => {\n        const loginBtn = document.querySelector('.loginBtn');\n        const registerBtn = document.querySelector('.registerBtn');\n        const friendRequestBtn = document.querySelector('.friendRequestBtn');\n\n        if ((e.keyCode === 13) && (route === 'login')) {\n            e.preventDefault();\n            loginBtn.click();\n        } else if ((e.keyCode === 13) && (route === 'register')) {\n            e.preventDefault();\n            registerBtn.click();\n        } else if ((e.keyCode === 13) && (route === 'loggedIn')) {\n            e.preventDefault();\n            friendRequestBtn.click();\n        }\n    };\n\n    return (\n        route === 'login' || route === 'register'\n        ?\n        <div className='homePage'>\n            <FriendsHome onRouteChange={onRouteChange}/>\n            <HomeBoard route={route}/>\n            <HomeText />\n            {\n            route === 'login'\n            ? <Login currentSocket={currentSocket} loadUser={loadUser} onRouteChange={onRouteChange}/>\n            : <Register currentSocket={currentSocket} loadUser={loadUser} onRouteChange={onRouteChange}/>\n            }\n            <Footer />\n        </div>\n        :\n        <>\n            {\n            route === 'loggedIn'\n            ?\n            <div className='homePageLogged'>\n                <Navigation setUnsortedFriends={setUnsortedFriends} socket={socket} username={user.username} onRouteChange={onRouteChange} route={route} />\n                <Friends unsortedFriends={unsortedFriends} setUnsortedFriends={setUnsortedFriends} socket={socket} route={route} setFriendSocket={setFriendSocket} currentSocket={currentSocket} showOnlineStatusToFriends={showOnlineStatusToFriends} username={user.username} setRoute={setRoute} />\n                <HomeBoard route={route}/>\n                <Footer />\n            </div>\n            :\n            <>\n                {\n                route === 'leaderboard'\n                ?\n                <div className='leaderboard'>\n                    <Leaderboard route={route} onRouteChange={onRouteChange} setUnsortedFriends={setUnsortedFriends} socket={socket} username={user.username} />\n                    <Footer />\n                </div>\n                :\n                <Game setRoute={setRoute} setUnsortedFriends={setUnsortedFriends} socket={socket} username={user.username} onRouteChange={onRouteChange} route={route} friendSocket={friendSocket} />\n                }\n            </>\n            }\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <div>\n    <App />\n  </div>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}