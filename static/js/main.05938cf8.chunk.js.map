{"version":3,"sources":["model.js","components/boards/Board.js","components/ships/Ships.js","audioclips/hit-sound.mp3","audioclips/miss-sound.mp3","audioclips/ship-sunk.mp3","components/boards/UserBoard.js","components/boards/OpponentBoard.js","components/navigation/msg-icon.png","components/navigation/FriendRequests.js","components/navigation/Navigation.js","components/boards/ChatBox.js","components/footer/Footer.js","components/boards/Game.js","components/homeBoard/HomeBoard.js","components/findMatch/FindMatch.js","components/friends/SingleFriend.js","components/friends/Friends.js","components/friends/FriendsHome.js","components/logReg/Login.js","components/logReg/Register.js","components/leaderboard/Leaderboard.js","socket/socketImport.js","audioclips/ambient-waves.mp3","audioclips/lobby-theme.mp3","audioclips/game-theme.mp3","audioclips/button-click.mp3","audioclips/hover-sound.mp3","App.js","reportWebVitals.js","index.js"],"names":["model","stored","persist","storage","route","user","currentSocket","friendSocket","opponentName","unsortedFriends","findMatchInterval","checkOppStatusInterval","updatLastOnlineInterval","getOnlineFriendsInterval","search","friendRequests","userName","password","topFive","allFriends","friendFilter","friendSearch","friendsOnline","gameRoute","playerIsReady","opponentIsReady","yourTurn","chatText","inviteSent","inviteReceived","shipIsSelected","rotating","orientation","selectedShip","selectedShipName","setManualGridLocation","playGameAudio","playLobbyMusic","waveSound","lobbyMusic","gameMusic","setRoute","action","state","input","setUser","setCurrentSocket","setFriendSocket","setOpponentName","setUnsortedFriends","setFindMatchInterval","setCheckOppStatusInterval","setUpdatLastOnlineInterval","setGetOnlineFriendsInterval","setSearch","setFriendRequests","setUserName","setPassword","setTopFive","setAllFriends","setFriendFilter","setFriendSearch","setFriendsOnline","setGameRoute","setPlayerIsReady","setOpponentIsReady","setYourTurn","setChatText","setInviteSent","setInviteReceived","setShipIsSelected","setRotating","setOrientation","setSelectedShip","setSelectedShipName","setToggleManualGridLocation","toggleManualGridLocation","setPlayGameAudio","setPlayLobbyMusic","setWaveSound","setLobbyMusic","setGameMusic","AssembleBoard","onSquareClicked","useStoreState","allSquares","i","j","push","row","String","fromCharCode","col","colStart","rowStart","handleSquareClick","e","parentBoard","target","parentElement","classList","contains","map","square","onClick","style","gridArea","className","id","Ships","onShipSelect","userBoard","document","querySelector","cursor","zIndex","border","parseInt","offsetWidth","offsetHeight","collisionDetection","item1","item2","d1Offset","$","offset","d1Height","outerHeight","d1Width","outerWidth","d1Top","top","d1Left","left","d2Offset","d2Height","d2Width","d2Top","d2Left","addEventListener","areaIsClear","ships","querySelectorAll","ship","console","log","window","oncontextmenu","transform","code","preventDefault","undefined","onmouseover","userGrid","childShip","targetId","substring","indexOf","length","remove","gridColumn","gridRow","add","UserBoard","socket","audioClips","sound","hitSound","label","volume","missSound","shipSunkSound","useStoreActions","actions","playShotSound","soundEffect","forEach","clip","src","Howl","html5","play","shipHit","useEffect","on","shot","oppShot","getElementById","applyHitOrMiss","off","hit","hitSquares","matchOppShotToBoard","count","countHitsOnShip","sunkShipIcon","squares","emit","shotSquare","socketid","Board","OpponentBoard","data","clickedSquare","result","FriendRequests","updateRequests","a","navBar","fetch","username","res","ok","Error","json","requests","setProperty","split","removeRequest","friend","newRequestList","newRequestListArray","index","splice","join","method","headers","body","JSON","stringify","requestlist","res2","onRemoveRequest","addFriend","value","friendList","friendArray","friendlistOfFriends","friendSocketId","user1","friendlistOfFriendsArray","friends","includes","f","friendlist","res3","allF","response","friendname","res4","addFriendStart","Dropdown","Toggle","variant","msgIcon","alt","Menu","request","Navigation","onRouteChange","handleExitClick","hash","ChatBox","chatBox","handleEnterBtn","message","handleReceivedMessage","removeEventListener","msgNode","createElement","textNode","nameNode","text","createTextNode","name","appendChild","scrollTop","scrollHeight","keyCode","onChange","type","placeholder","Footer","Game","clearInterval","addWin","setTimeout","alert","setInterval","checkIfOpponentIsOnline","gameInstructions","shipContainers","score","shipContainer","childNodes","readyBtn","opacity","HomeBoard","FindMatch","removeGuest","senderName","senderSocket","searchForMatch","stopSearching","updateSearching","match","receiverSocket","addGuest","SingleFriend","friendInGame","status","handleInvite","btn","disabled","nodeValue","sendInvite","innerHTML","acceptInvite","Friends","fetchFriends","getOnlineFriends","sortFriends","offlineSorted","offlineFriends","justAdded","onlineSorted","addFriendToOffline","olF","sort","b","toLowerCase","concat","onlineFriends","sendFriendRequest","friendAlert","friendName","friendsRequests","friendsRequestsArray","friendrequests","last","lastonline","Date","now","ingame","FriendsHome","Login","login","onSubmitLogin","Register","register","then","Leaderboard","getTopPlayers","tempArr","wins","player","io","App","buttonClick","hoverSound","playSound","updateLastOnline","guestCleanup","handleMouseDown","handleBtnPress","tagName","handleMouseOver","page","fade","ambientWaves","loop","gameTheme","lobbyTheme","updateInGameStatus","inGame","isInGame","returnValue","onkeydown","loginBtn","registerBtn","logUsername","registerUsername","logPassword","registerPassword","friendRequestBtn","click","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render"],"mappings":"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","file":"static/js/main.05938cf8.chunk.js","sourcesContent":["import { action, persist } from 'easy-peasy';\r\n\r\nconst model = {\r\n\r\n    //State\r\n\r\n    stored: persist(\r\n        {\r\n            \r\n        },\r\n        {\r\n            storage: 'localStorage',\r\n        }\r\n\r\n    ),\r\n\r\n    route: 'login',\r\n    user: null,\r\n    currentSocket: null,\r\n    friendSocket: null,\r\n    opponentName: '',\r\n    unsortedFriends: [],\r\n    findMatchInterval: 0,\r\n    checkOppStatusInterval: 0,\r\n    updatLastOnlineInterval: 0,\r\n    getOnlineFriendsInterval: 0,\r\n    search: false,\r\n    friendRequests: [],\r\n    userName: '',\r\n    password: '',\r\n    topFive: [],\r\n    allFriends: [],\r\n    friendFilter: '',\r\n    friendSearch: '',\r\n    friendsOnline: [],\r\n    gameRoute: 'placeShips',\r\n    playerIsReady: false,\r\n    opponentIsReady: false,\r\n    yourTurn: false,\r\n    chatText: '',\r\n    inviteSent: false,\r\n    inviteReceived: false,\r\n    shipIsSelected: false,\r\n    rotating: false,\r\n    orientation: 'hor',\r\n    selectedShip: '',\r\n    selectedShipName: '',\r\n    setManualGridLocation: false,\r\n    playGameAudio: false,\r\n    playLobbyMusic: false,\r\n    waveSound: null,\r\n    lobbyMusic: null,\r\n    gameMusic: null,\r\n\r\n    //Actions\r\n\r\n    setRoute: action((state, input) => {\r\n        state.route = input;\r\n    }),\r\n\r\n    setUser: action((state, input) => {\r\n        state.user = input;\r\n    }),\r\n\r\n    setCurrentSocket: action((state, input) => {\r\n        state.currentSocket = input;\r\n    }),\r\n\r\n    setFriendSocket: action((state, input) => {\r\n        state.friendSocket = input;\r\n    }),\r\n\r\n    setOpponentName: action((state, input) => {\r\n        state.opponentName = input;\r\n    }),\r\n\r\n    setUnsortedFriends: action((state, input) => {\r\n        state.unsortedFriends = input;\r\n    }),\r\n\r\n    setFindMatchInterval: action((state, input) => {\r\n        state.findMatchInterval = input;\r\n    }),\r\n\r\n    setCheckOppStatusInterval: action((state, input) => {\r\n        state.checkOppStatusInterval = input;\r\n    }),\r\n\r\n    setUpdatLastOnlineInterval: action((state, input) => {\r\n        state.updatLastOnlineInterval = input;\r\n    }),\r\n\r\n    setGetOnlineFriendsInterval: action((state, input) => {\r\n        state.getOnlineFriendsInterval = input;\r\n    }),\r\n\r\n    setSearch: action((state, input) => {\r\n        state.search = input;\r\n    }),\r\n\r\n    setFriendRequests: action((state, input) => {\r\n        state.friendRequests = input;\r\n    }),\r\n\r\n    setUserName: action((state, input) => {\r\n        state.userName = input;\r\n    }),\r\n\r\n    setPassword: action((state, input) => {\r\n        state.password = input;\r\n    }),\r\n\r\n    setTopFive: action((state, input) => {\r\n        state.topFive = input;\r\n    }),\r\n\r\n    setAllFriends: action((state, input) => {\r\n        state.allFriends = input;\r\n    }),\r\n\r\n    setFriendFilter: action((state, input) => {\r\n        state.friendFilter = input;\r\n    }),\r\n\r\n    setFriendSearch: action((state, input) => {\r\n        state.friendSearch = input;\r\n    }),\r\n\r\n    setFriendsOnline: action((state, input) => {\r\n        state.friendsOnline = input;\r\n    }),\r\n\r\n    setGameRoute: action((state, input) => {\r\n        state.gameRoute = input;\r\n    }),\r\n    \r\n    setPlayerIsReady: action((state, input) => {\r\n        state.playerIsReady = input;\r\n    }),\r\n\r\n    setOpponentIsReady: action((state, input) => {\r\n        state.opponentIsReady = input;\r\n    }),\r\n\r\n    setYourTurn: action((state, input) => {\r\n        state.yourTurn = input;\r\n    }),\r\n\r\n    setChatText: action((state, input) => {\r\n        state.chatText = input;\r\n    }),\r\n\r\n    setInviteSent: action((state, input) => {\r\n        state.inviteSent = input;\r\n    }),\r\n\r\n    setInviteReceived: action((state, input) => {\r\n        state.inviteReceived = input;\r\n    }),\r\n    \r\n    setShipIsSelected: action((state, input) => {\r\n        state.shipIsSelected = input;\r\n    }),\r\n\r\n    setRotating: action((state, input) => {\r\n        state.rotating = input;\r\n    }),\r\n\r\n    setOrientation: action((state, input) => {\r\n        state.orientation = input;\r\n    }),\r\n\r\n    setSelectedShip: action((state, input) => {\r\n        state.selectedShip = input;\r\n    }),\r\n\r\n    setSelectedShipName: action((state, input) => {\r\n        state.selectedShipName = input;\r\n    }),\r\n\r\n    setToggleManualGridLocation: action((state, input) => {\r\n        state.toggleManualGridLocation = input;\r\n    }),\r\n\r\n    setPlayGameAudio: action((state, input) => {\r\n        state.playGameAudio = input;\r\n    }),\r\n\r\n    setPlayLobbyMusic: action((state, input) => {\r\n        state.playLobbyMusic = input;\r\n    }),\r\n\r\n    setWaveSound: action((state, input) => {\r\n        state.waveSound = input;\r\n    }),\r\n\r\n    setLobbyMusic: action((state, input) => {\r\n        state.lobbyMusic = input;\r\n    }),\r\n\r\n    setGameMusic: action((state, input) => {\r\n        state.gameMusic = input;\r\n    }),\r\n}\r\n\r\nexport default model;","import React from 'react';\r\nimport { useStoreState } from 'easy-peasy';\r\n\r\nimport './board.css';\r\n\r\nconst AssembleBoard = ({ onSquareClicked }) => {\r\n\r\n    const { gameRoute } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute,\r\n        route: state.route\r\n    }));\r\n\r\n    const allSquares = [];\r\n    for (let i = 1; i < 11; i++) {\r\n        for (let j = 0; j < 10; j++) {\r\n            allSquares.push({row: String.fromCharCode(97 + j), col: i, colStart: i, rowStart: j + 1})\r\n        }\r\n    }\r\n\r\n    const handleSquareClick = (e) => {\r\n        const parentBoard = e.target.parentElement.parentElement.parentElement;\r\n        if (gameRoute === 'gameInProgress' && parentBoard.classList.contains('opponentBoard')) {\r\n            onSquareClicked(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        allSquares.map(square => {\r\n            return (\r\n                <div\r\n                    onClick={handleSquareClick}\r\n                    style={{gridArea: square.row + square.col}}\r\n                    className={'singleSquare ' + square.row + ' ' + square.row + square.col}\r\n                    key={square.row + square.col}\r\n                    id={square.colStart + '-' + square.rowStart}\r\n                >\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default AssembleBoard;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState } from 'easy-peasy';\r\nimport $ from 'jquery';\r\nimport './ships.css';\r\nimport '../boards/board.css';\r\n\r\nconst Ships = () => {\r\n\r\n    const { gameRoute } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute\r\n    }));\r\n\r\n    let rotating = false;\r\n    let orientation = 'hor';\r\n    let selectedShip = '';\r\n    let selectedShipName = '';\r\n    let shipIsSelected = false;\r\n    let setManualGridLocation = false;\r\n\r\n    // Decide what happens when a ship is selected to move\r\n\r\n    const onShipSelect = (e) => {\r\n        if (!shipIsSelected && gameRoute === 'placeShips') {\r\n            const userBoard = document.querySelector('.userBoard');\r\n            shipIsSelected = true;\r\n            selectedShip = e.target.parentElement;\r\n            userBoard.style.cursor = 'pointer';\r\n            selectedShip.style.zIndex = '-2';\r\n            // selectedShip.style.backgroundColor = 'rgba(0,0,0,0.2)';\r\n            selectedShip.style.border = '2px solid rgba(0, 250, 0, 0.5)';\r\n\r\n            if (parseInt(e.target.parentElement.offsetWidth) > parseInt(e.target.parentElement.offsetHeight)) {\r\n                orientation = 'hor';\r\n            } else if (parseInt(e.target.parentElement.offsetHeight) > parseInt(e.target.parentElement.offsetWidth)) {\r\n                orientation = 'vert';\r\n            }\r\n\r\n            if (selectedShip.classList.contains('carrier')) {\r\n                selectedShipName = 'carrier';\r\n            } else if (selectedShip.classList.contains('battleship')) {\r\n                selectedShipName = 'battleship';\r\n            } else if (selectedShip.classList.contains('cruiser')) {\r\n                selectedShipName = 'cruiser';\r\n            } else if (selectedShip.classList.contains('submarine')) {\r\n                selectedShipName = 'submarine';\r\n            } else if (selectedShip.classList.contains('destroyer')) {\r\n                selectedShipName = 'destroyer';\r\n            }\r\n        }\r\n    }\r\n\r\n    // collision detection\r\n\r\n    const collisionDetection = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    // Place a ship down that is currently selected\r\n\r\n    document.addEventListener('click', e => {\r\n        if (shipIsSelected && e.target.classList.contains('singleSquare') && rotating === false && areaIsClear()) {\r\n            selectedShip.style.zIndex = '3';\r\n            document.querySelector('.userBoard').style.cursor = 'default';\r\n            // selectedShip.style.backgroundColor = null;\r\n            selectedShip.style.border = null;\r\n            shipIsSelected = false;\r\n        }\r\n    })\r\n\r\n    // Locate opponents shot on user board\r\n\r\n    // const matchOppShotToBoard = () => {\r\n    //     if\r\n    // }\r\n\r\n    // Check to see if player is placing the ship in an open space\r\n\r\n    const areaIsClear = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n         for (let ship of ships) {\r\n            if (!ship.classList.contains(selectedShipName) && collisionDetection(selectedShip, ship)) {\r\n                console.log(ship.className);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Rotate the selected ship by right-clicking\r\n\r\n    window.oncontextmenu = (e) => {\r\n         if (shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Decide what happens on various key-press events\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.code === 'Enter') {\r\n            e.preventDefault();\r\n        }\r\n        // Rotate the selected ship by pressing the 'space' key\r\n\r\n        if (e.code === 'Space' && selectedShip.style !== undefined && shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n    })\r\n\r\n    // Change the grid-row and grid-column of the selected ship mouse is over the user's board\r\n\r\n    window.onmouseover = (e) => {\r\n        // const sub = document.querySelector(`.submarine`);\r\n        if (shipIsSelected) {\r\n            rotating = false;\r\n            selectedShip.style.transform = null;\r\n            const userGrid = document.querySelector('.userBoard');\r\n            const childShip = document.querySelector(`.${selectedShipName}Icon`);\r\n            const targetId = e.target.id;\r\n            const colStart = targetId.substring(0, targetId.indexOf('-'));\r\n            const rowStart = targetId.substring((targetId.indexOf('-') + 1), targetId.length);\r\n\r\n\r\n            if (userGrid.contains(e.target)\r\n            && (e.target.classList.contains('singleSquare'))\r\n            && shipIsSelected === true) {\r\n                if (orientation === 'hor') {\r\n                    childShip.classList.remove(`rotate-${selectedShipName}`);\r\n                    if (colStart < (11 - parseInt(selectedShip.id) + 1)) {\r\n                        selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + parseInt(selectedShip.id)}`;\r\n                    } else if (colStart >= (11 - parseInt(selectedShip.id) + 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridColumn = `11 / ${11 - parseInt(selectedShip.id)}`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridRow = `${rowStart} / ${parseInt(rowStart) + 1}`;\r\n                } else if (orientation === 'vert') {\r\n                    childShip.classList.add(`rotate-${selectedShipName}`);\r\n                    if (rowStart > (parseInt(selectedShip.id) - 1)) {\r\n                        selectedShip.style.gridRow = `${parseInt(rowStart) + 1} / ${parseInt(rowStart) - parseInt(selectedShip.id) + 1}`;\r\n                    } else if (rowStart <= (parseInt(selectedShip.id) - 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridRow = `${parseInt(selectedShip.id) + 1} / 1`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + 1}`;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div id='5' className='ship carrier'><div onClick={onShipSelect} className='carrierIcon'></div></div>\r\n\r\n            <div id='4' className='ship battleship'><div onClick={onShipSelect} className='battleshipIcon'></div></div>\r\n\r\n            <div id='3' className='ship cruiser'><div onClick={onShipSelect} className='cruiserIcon'></div></div>\r\n\r\n            <div id='3' className='ship submarine'><div onClick={onShipSelect} className='submarineIcon'></div></div>\r\n\r\n            <div id='2' className='ship destroyer'><div onClick={onShipSelect} className='destroyerIcon'></div></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ships;\r\n","export default __webpack_public_path__ + \"static/media/hit-sound.e72870c5.mp3\";","export default __webpack_public_path__ + \"static/media/miss-sound.1dd4ce99.mp3\";","export default __webpack_public_path__ + \"static/media/ship-sunk.48a88457.mp3\";","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport Board from './Board';\r\nimport Ships from '../ships/Ships';\r\nimport $ from 'jquery';\r\nimport { Howl } from 'howler';\r\nimport hitSound from '../../audioclips/hit-sound.mp3';\r\nimport missSound from '../../audioclips/miss-sound.mp3';\r\nimport shipSunkSound from '../../audioclips/ship-sunk.mp3';\r\nimport './board.css';\r\n\r\nconst UserBoard = ({ socket }) => {\r\n\r\n    const audioClips = [\r\n        {sound: hitSound, label: 'hit', volume: 1},\r\n        {sound: missSound, label: 'miss', volume: 0.5},\r\n        {sound: shipSunkSound, label: 'sunk', volume: 1}\r\n    ]\r\n\r\n    const soundPlay = (src) => {\r\n        const sound = new Howl({\r\n            src: src.sound,\r\n            volume: src.volume,\r\n            html5: true\r\n        })\r\n        sound.play();\r\n    }\r\n\r\n    const { friendSocket } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket\r\n    }));\r\n\r\n    const { setYourTurn } = useStoreActions(actions => ({\r\n        setYourTurn: actions.setYourTurn\r\n    }));\r\n\r\n    const playShotSound = (soundEffect) => {\r\n        audioClips.forEach(clip => {\r\n            if (clip.label === soundEffect) {\r\n                soundPlay(clip);\r\n            }\r\n        })\r\n    }\r\n\r\n    let shipHit = '';\r\n    useEffect(() => {\r\n        socket.on('receive shot', shot => {\r\n            const oppShot = document.getElementById(shot);\r\n            applyHitOrMiss(oppShot);\r\n            setYourTurn(true);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive shot');\r\n        }\r\n    },[])\r\n\r\n    const hit = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    const hitSquares = [];\r\n    const countHitsOnShip = (ship) => {\r\n        let count = 0;\r\n        for (let hit of hitSquares) {\r\n            if (hit === ship) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    const applyHitOrMiss = (oppShot) => {\r\n        if (matchOppShotToBoard(oppShot)) {\r\n            oppShot.classList.add('hit');\r\n            oppShot.classList.add('hitMarker');\r\n            hitSquares.push(shipHit);\r\n            oppShot.classList.add(`_${shipHit}_userboard`)\r\n            if (countHitsOnShip(shipHit) === parseInt(document.querySelector(`.${shipHit}`).id)) {\r\n                const sunkShipIcon = document.querySelector(`.${shipHit}Icon`);\r\n                const squares = document.querySelectorAll('.singleSquare');\r\n                playShotSound('sunk');\r\n                for (let square of squares) {\r\n                    if (square.classList.contains(`_${shipHit}_userboard`)) {\r\n                        square.classList.remove('hitMarker');\r\n                    }\r\n                }\r\n                sunkShipIcon.classList.add('shipSunkUser');\r\n            } else {\r\n                playShotSound('hit');\r\n            }\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'hit', socketid: friendSocket, shipHit: shipHit});\r\n        } else {\r\n            oppShot.classList.add('missMarker');\r\n            playShotSound('miss');\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'miss', socketid: friendSocket, shipHit: shipHit});\r\n        }\r\n    }\r\n\r\n    const matchOppShotToBoard = (shot) => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        for (let ship of ships) {\r\n            if (hit(shot, ship)) {\r\n                shipHit = ship.classList[1];\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className='board userBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board />\r\n                    <Ships />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport Board from './Board';\r\nimport { Howl } from 'howler';\r\nimport hitSound from '../../audioclips/hit-sound.mp3';\r\nimport missSound from '../../audioclips/miss-sound.mp3';\r\nimport shipSunkSound from '../../audioclips/ship-sunk.mp3';\r\nimport './board.css';\r\n\r\nconst OpponentBoard = ({ socket }) => {\r\n\r\n    const audioClips = [\r\n        {sound: hitSound, label: 'hit', volume: 1},\r\n        {sound: missSound, label: 'miss', volume: 0.5},\r\n        {sound: shipSunkSound, label: 'sunk', volume: 1}\r\n    ]\r\n\r\n    const soundPlay = (src) => {\r\n        const sound = new Howl({\r\n            src: src.sound,\r\n            volume: src.volume,\r\n            html5: true\r\n        })\r\n        sound.play();\r\n    }\r\n\r\n    const { friendSocket, yourTurn } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        yourTurn: state.yourTurn\r\n    }));\r\n\r\n    const { setYourTurn } = useStoreActions(actions => ({\r\n        setYourTurn: actions.setYourTurn\r\n        \r\n    }));\r\n\r\n    const playShotSound = (soundEffect) => {\r\n        audioClips.forEach(clip => {\r\n            if (clip.label === soundEffect ) {\r\n                soundPlay(clip);\r\n            }\r\n        })\r\n    }\r\n    \r\n    const hitSquares = [];\r\n    const countHitsOnShip = (ship) => {\r\n        let count = 0;\r\n        for (let hit of hitSquares) {\r\n            if (hit === ship) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('show result on opponent board', data => {\r\n            const clickedSquare = document.querySelector(`.opponentBoard [id='${data.shotSquare}']`);\r\n            if (data.result === 'hit' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('hitMarker');\r\n                hitSquares.push(data.shipHit);\r\n                clickedSquare.classList.add(`_${data.shipHit}`)\r\n                if (countHitsOnShip(data.shipHit) === parseInt(document.querySelector(`.${data.shipHit}`).id)) {\r\n                    const squares = document.querySelectorAll('.singleSquare');\r\n                    playShotSound('sunk');\r\n                    for (let square of squares) {\r\n                        if (square.classList.contains(`_${data.shipHit}`)) {\r\n                            square.classList.add('shipSunk');\r\n                        }\r\n                    }\r\n                } else {\r\n                    playShotSound('hit');\r\n                }\r\n            } else if (data.result === 'miss' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('missMarker');\r\n                playShotSound('miss');\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            socket.off('show result on opponent board');\r\n        }\r\n    },[])\r\n\r\n    const onSquareClicked = (e) => {\r\n        if (yourTurn && !e.target.classList.contains('hitMarker') && !e.target.classList.contains('missMarker')) {\r\n            // setSquareClicked(e.target);\r\n            socket.emit('send shot to opponent', {target: e.target.id, socketid: friendSocket});\r\n            setYourTurn(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='board opponentBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board onSquareClicked={onSquareClicked} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentBoard;\r\n\r\n","export default __webpack_public_path__ + \"static/media/msg-icon.b63e7a13.png\";","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './navigation.css';\r\nimport msgIcon from './msg-icon.png';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst FriendRequests = ({ socket }) => {\r\n\r\n    const { user, friendRequests } = useStoreState(state => ({\r\n        user: state.user,\r\n        friendRequests: state.friendRequests\r\n    }));\r\n\r\n    const { setUnsortedFriends, setFriendRequests } = useStoreActions(actions => ({\r\n        setUnsortedFriends: actions.setUnsortedFriends,\r\n        setFriendRequests: actions.setFriendRequests\r\n    }));\r\n\r\n    useEffect(() => {\r\n        updateRequests();\r\n\r\n        socket.on('receive friend request', () => {\r\n            updateRequests();\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive friend request');\r\n        }\r\n    },[])\r\n\r\n    const updateRequests = async () => {\r\n        const navBar = document.querySelector('nav');\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                navBar.style.setProperty('--notification-color', 'rgba(255,0,0,0.8)');\r\n                setFriendRequests(requests.split(','));\r\n            } else {\r\n                navBar.style.setProperty('--notification-color', 'transparent');\r\n                setFriendRequests(null);\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const removeRequest = async (friend) => {\r\n        let newRequestList = '';\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const newRequestListArray = requests.split(',');\r\n                if (newRequestListArray.length <= 1) {\r\n                    newRequestList = null;\r\n                } else {\r\n                    const index = newRequestListArray.indexOf(friend);\r\n                    if (index > -1) {\r\n                        newRequestListArray.splice(index, 1);\r\n                        newRequestList = newRequestListArray.join(',');\r\n                    }\r\n                }\r\n            }\r\n\r\n            const res2 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: newRequestList,\r\n                        username: user.username\r\n                    })\r\n            });\r\n            if (!res2.ok) {\r\n                throw new Error('Could not update friend requests');\r\n            }\r\n            const userRemoved = await res2.json();\r\n            if (userRemoved) {\r\n                updateRequests();\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const onRemoveRequest = (e) => {\r\n        removeRequest(e.target.id);\r\n    }\r\n\r\n     const addFriend = async (friend) => {\r\n        console.log('friend added');\r\n        document.querySelector('.addFriendInput').value = '';\r\n        let friendList = '';\r\n        let friendArray = [];\r\n        let friendlistOfFriends = '';\r\n        let friendSocketId = '';\r\n//-----------------------------------------------------------------------------------\r\n        // Search the database to check if the name matches any users in the databse\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res.json();\r\n            if (user1.username === user.username) {\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user1.username) {\r\n                let friendlistOfFriendsArray = [];\r\n                friendSocketId = user1.socketid;\r\n                if (user1?.friends?.length) {\r\n                    friendlistOfFriendsArray = user1.friends.split(',');\r\n                    if (friendlistOfFriendsArray.includes(user.username)) {\r\n                        throw new Error('You are already a friend of the user');\r\n                    }\r\n                }\r\n                friendlistOfFriendsArray.push(user.username);\r\n                if (friendlistOfFriendsArray.length > 1) {\r\n                    friendlistOfFriends = friendlistOfFriendsArray.join(',');\r\n                } else {\r\n                    friendlistOfFriends = friendlistOfFriendsArray[0];\r\n                }\r\n    //-----------------------------------------------------------------------------------\r\n                // If friend exists, grab the user's friend list string\r\n                // Make a temporary string and array with the new friend\r\n    //-----------------------------------------------------------------------------------\r\n                const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\r\n                if (!res2.ok) {throw new Error('Problem accessing friends list')}\r\n                const friends = await res2.json();\r\n                if (friends?.length) {\r\n                    friends.forEach(f => {\r\n                        friendArray.push(f.username);\r\n                        if (f.username === friend) {\r\n                            throw new Error('User already your friend');\r\n                        }\r\n                    })\r\n                }\r\n                friendArray.push(friend);\r\n                friendList = friendArray.join(',');\r\n\r\n    //-----------------------------------------------------------------------------------\r\n                // Update the user's friend list with the new friends string\r\n                // Pass the updated friends array to 'fetchFriendData'\r\n    //-----------------------------------------------------------------------------------\r\n                const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/addFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        username: user.username,\r\n                        friendlist: friendList\r\n                    })\r\n                })\r\n                if (!res3.ok) {throw new Error('Problem adding friend')}\r\n                const userAdded = await res3.json();\r\n                if (userAdded) {\r\n                    const allF = [];\r\n                    for (let f of friendArray) {\r\n                        try {\r\n                            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${f}`);\r\n                            if (!response.ok) {throw new Error('User does not exist')}\r\n                            const user1 = await response.json();\r\n                            // if (opponentIsOnline(user1)) {\r\n                            //     allF.push({name: user1.username, status: 'online'})\r\n                            // } else {\r\n                            //     allF.push({name: user1.username, status: 'offline'})\r\n                            // }\r\n                            allF.push(user1);\r\n                        } catch(err) {\r\n                            console.log(err);\r\n                        }\r\n                    }\r\n                    setUnsortedFriends(allF);\r\n                }\r\n                const res4 = await fetch('https://calm-ridge-60009.herokuapp.com/addSelfToFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        friendlist: friendlistOfFriends,\r\n                        friendname: friend\r\n                    })\r\n                })\r\n                if (!res4.ok) {throw new Error('Problem adding self to friendlist of friend')}\r\n                const selfAdded = await res4.json();\r\n                if (selfAdded && friendSocketId !== null) {\r\n                    socket.emit('update user status', friendSocketId);\r\n                }\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addFriendStart = async (e) => {\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${e.target.id}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res.json();\r\n            if (user1.username) {\r\n                removeRequest(e.target.id);\r\n                // socket.emit('send add friend', {socketid: user.socketid, user: username})\r\n                addFriend(e.target.id);\r\n                // Can't add friend if their offline   FIX\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dropdown className='dropdown'>\r\n              <Dropdown.Toggle variant=\"success\" className='messageToggle' id=\"dropdown-basic\"><img src={msgIcon} alt='Message Icon' /></Dropdown.Toggle>\r\n              <Dropdown.Menu id='dropdowns'>\r\n              {\r\n                friendRequests !== null\r\n                ?\r\n                  friendRequests.map(request => {\r\n                    return (\r\n                        <div key={request} className='dropdownItem'>\r\n                            <div className='text'>Friend request from <h3 className=\"requesterName\">{request}</h3></div>\r\n                            <div>\r\n                                <button onClick={addFriendStart} id={request} className='acceptInvite'>Accept</button>\r\n                                <button onClick={onRemoveRequest} id={request} className='rejectInvite'>Reject</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                  })\r\n                  : (null)\r\n              }\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FriendRequests;\r\n","import React from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport FriendRequests from './FriendRequests';\r\nimport './navigation.css';\r\n\r\nconst Navigation = ({ socket, onRouteChange }) => {\r\n\r\n    const { friendSocket, user, route} = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        user: state.user,\r\n        route: state.route\r\n    }));\r\n\r\n    const { setSearch } = useStoreActions(actions => ({\r\n        setSearch: actions.setSearch\r\n    }));\r\n\r\n    const handleExitClick = (e) => {\r\n        setSearch(false);\r\n        onRouteChange(e);\r\n        socket.emit('send exit game', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <nav className='nav'>\r\n            {\r\n            route === 'login' || route === 'register'\r\n            ?\r\n            <>\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n            </>\r\n            :\r\n            route === 'loggedIn'\r\n            ?\r\n            <>\r\n                <FriendRequests socket={socket} />\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n                <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n            </>\r\n            :\r\n            <>\r\n                {\r\n                route === 'leaderboard'\r\n                ?\r\n                    user?.username\r\n                    ?\r\n                    <>\r\n                        <FriendRequests socket={socket} />\r\n                        <button value='goHome' onClick={onRouteChange}>Back</button>\r\n                        <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <button value='goToLogin' onClick={onRouteChange}>Back</button>\r\n                    </>\r\n                : //route === 'game'\r\n                    user.hash === 'guest'\r\n                    ?\r\n                    <>\r\n                        <button value='logOut' onClick={handleExitClick}>Exit</button>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <FriendRequests socket={socket} />\r\n                        <button value='goHome' onClick={handleExitClick}>Exit</button>\r\n                        <button value='logOut' onClick={handleExitClick}>Log Out</button>\r\n                    </>\r\n                }\r\n            </>\r\n            }\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst ChatBox = ({ socket }) => {\r\n\r\n    const { friendSocket, opponentName, chatText } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        opponentName: state.opponentName,\r\n        chatText: state.chatText\r\n    }));\r\n\r\n    const { setChatText } = useStoreActions(actions => ({\r\n        setChatText: actions.setChatText\r\n    }));\r\n\r\n    const chatBox = document.querySelector('.chatBox');\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keyup', handleEnterBtn);\r\n\r\n        socket.on('receive msg', message => {\r\n            handleReceivedMessage(message);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive msg');\r\n            document.removeEventListener('keyup', handleEnterBtn);\r\n        }\r\n    },[chatText])\r\n\r\n    const handleReceivedMessage = (message) => {\r\n        const chatBox = document.querySelector('.chatBox');\r\n        if (chatBox !== null) {\r\n            const msgNode = document.createElement(\"DIV\");\r\n            msgNode.classList.add('message');\r\n            const textNode = document.createElement(\"H4\");\r\n            textNode.classList.add('opponentText');\r\n            const nameNode = document.createElement(\"H5\");\r\n            nameNode.classList.add('oppName');\r\n            const text = document.createTextNode(message);\r\n            const name = document.createTextNode(opponentName);\r\n            nameNode.appendChild(name);\r\n            textNode.appendChild(text);\r\n            msgNode.appendChild(nameNode);\r\n            msgNode.appendChild(textNode);\r\n            chatBox.appendChild(msgNode);\r\n            chatBox.scrollTop = chatBox.scrollHeight;\r\n        }\r\n    }\r\n\r\n    const handleEnterBtn = (e) => {\r\n            if (e.keyCode === 13 && chatBox !== null && chatText !== '') {\r\n                e.preventDefault();\r\n                const msgNode = document.createElement(\"DIV\");\r\n                msgNode.classList.add('message');\r\n                const textNode = document.createElement(\"H4\");\r\n                textNode.classList.add('userText');\r\n                const nameNode = document.createElement(\"H5\");\r\n                nameNode.classList.add('userName');\r\n                const text = document.createTextNode(chatText);\r\n                const name = document.createTextNode(\"You\");\r\n                nameNode.appendChild(name);\r\n                textNode.appendChild(text);\r\n                msgNode.appendChild(nameNode);\r\n                msgNode.appendChild(textNode);\r\n                chatBox.appendChild(msgNode);\r\n                setChatText('');\r\n                socket.emit('send msg', {socketid: friendSocket, message: chatText});\r\n                document.querySelector('.chatInput').value = '';\r\n                chatBox.scrollTop = chatBox.scrollHeight;\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className='chatContainer'>\r\n            <div className='chatBox'></div>\r\n            <input onChange={(e) => setChatText(e.target.value)} type='text' className='chatInput' placeholder='Type Here...' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBox;\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer><div className='footer'></div></footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport UserBoard from './UserBoard';\r\nimport OpponentBoard from './OpponentBoard';\r\nimport Navigation from '../navigation/Navigation';\r\nimport ChatBox from './ChatBox';\r\nimport Footer from '../footer/Footer';\r\n\r\nconst Game = ({ socket, onRouteChange }) => {\r\n    \r\n    const { friendSocket, opponentName, user, checkOppStatusInterval, gameRoute, playerIsReady, opponentIsReady, yourTurn } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        opponentName: state.opponentName,\r\n        user: state.user,\r\n        checkOppStatusInterval: state.checkOppStatusInterval,\r\n        gameRoute: state.gameRoute,\r\n        playerIsReady: state.playerIsReady,\r\n        opponentIsReady: state.opponentIsReady,\r\n        yourTurn: state.yourTurn\r\n    }));\r\n\r\n    const { setCheckOppStatusInterval, setRoute, setGameRoute, setPlayerIsReady, setOpponentIsReady, setYourTurn } = useStoreActions(actions => ({\r\n        setCheckOppStatusInterval: actions.setCheckOppStatusInterval,\r\n        setRoute: actions.setRoute,\r\n        setGameRoute: actions.setGameRoute,\r\n        setPlayerIsReady: actions.setPlayerIsReady,\r\n        setOpponentIsReady: actions.setOpponentIsReady,\r\n        setYourTurn: actions.setYourTurn\r\n    }));\r\n    \r\n    const instructions = 'Place your ships!';\r\n\r\n    useEffect(() => {\r\n        setPlayerIsReady(false);\r\n        setOpponentIsReady(false);\r\n        setGameRoute('placeShips');\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        socket.on('receive game over', () => {\r\n            // gamePage.style.setProperty('--player-turn-text', '\"You Won!\"');\r\n            // setTimeout(gameOver, 2000);\r\n            clearInterval(checkOppStatusInterval);\r\n            if (user?.hash !== 'guest') {\r\n                addWin();\r\n            }\r\n            setTimeout(() => {\r\n                window.alert('You Won!!!');\r\n                user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n            }, 300);\r\n        })\r\n\r\n        socket.on('receive exit game', () => {\r\n            window.alert('Opponent has left the game');\r\n            user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n        })\r\n\r\n        setCheckOppStatusInterval(setInterval(checkIfOpponentIsOnline, 3000));\r\n\r\n        return () => {\r\n            clearInterval(checkOppStatusInterval);\r\n            socket.off('receive ready status');\r\n            socket.off('receive game over');\r\n            socket.off('receive exit game');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const gameInstructions = document.querySelector('.gamePage');\r\n        if (gameRoute === 'placeShips') {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${instructions}\"`);\r\n        } else if (yourTurn) {\r\n            gameInstructions.style.setProperty('--player-turn-text', '\"Your Turn!\"');\r\n        } else {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${opponentName}'s Turn!\"`);\r\n        }\r\n    },[yourTurn, gameRoute])\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        // const squares = document.querySelectorAll('.userBoard .singleSquare');\r\n        const shipContainers = document.querySelectorAll('.userBoard .ship');\r\n        let score = 0;\r\n        if (yourTurn) {\r\n            // for (let square of squares) {\r\n            //     if (square.classList.contains('hit')) {\r\n            //         score += 1;\r\n            //     }\r\n            // }\r\n\r\n            shipContainers.forEach(shipContainer => {\r\n                if (shipContainer.childNodes[0].classList.contains('shipSunkUser')) {\r\n                    score += 1;\r\n                }\r\n            })\r\n\r\n            if (score >= 5) {\r\n                // gamePage.style.setProperty('--player-turn-text', '\"You Lose\"');\r\n                socket.emit('game over', friendSocket);\r\n                setTimeout(() => {\r\n                    window.alert('You Lose');\r\n                    user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n                }, 300);\r\n            }\r\n        }\r\n    },[yourTurn])\r\n\r\n    const checkIfOpponentIsOnline = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/checkIfOppOnline?username=${opponentName}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const isOnline = await response.json();\r\n            if (!isOnline) {\r\n                window.alert('Opponent has left the game');\r\n                user.hash === 'guest' ? setRoute('login') : setRoute('loggedIn');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n   }\r\n\r\n    const addWin = async () => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/updateWins', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username\r\n                })\r\n            })\r\n            const winsUpdated = await res.json();\r\n            if (!winsUpdated) {\r\n                throw new Error('Could not increment wins')\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    socket.on('receive ready status', () => {\r\n        if (playerIsReady) {\r\n            setGameRoute('gameInProgress');\r\n        }\r\n        setOpponentIsReady(true);\r\n    })\r\n\r\n    const handleReadyButton = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        const readyBtn = document.querySelector('.readyBtn');\r\n        for (let ship of ships) {\r\n            ship.style.cursor = 'default';\r\n        }\r\n        if (opponentIsReady) {\r\n            setGameRoute('gameInProgress');\r\n            setYourTurn(true);\r\n        } else {\r\n            readyBtn.style.opacity = '0.4';\r\n        }\r\n        setPlayerIsReady(true);\r\n        socket.emit('send ready status', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <div className='gamePage'>\r\n            <Navigation socket={socket} onRouteChange={onRouteChange} />\r\n            <UserBoard socket={socket} />\r\n            {\r\n            gameRoute === 'placeShips'\r\n            ? \r\n            <div className='readyBtn'>\r\n                <button onClick={handleReadyButton} className='btn'>Ready</button>\r\n            </div>\r\n            : (null)\r\n            }\r\n            <OpponentBoard socket={socket} />\r\n            <ChatBox socket={socket} />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Board from '../boards/Board';\r\nimport './homeBoard.css';\r\n\r\nconst HomeBoard = () => {\r\n    return (\r\n        <div className='board homeBoard'>\r\n{/*            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>*/}\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './findMatch.css';\r\n\r\nconst FindMatch = ({ socket }) => {\r\n    \r\n    const { currentSocket, search, user, route } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        search: state.search,\r\n        user: state.user,\r\n        route: state.route\r\n    }));\r\n\r\n    const { setSearch, setFindMatchInterval, setOpponentName, setFriendSocket, setRoute, setUser } = useStoreActions(actions => ({\r\n        setSearch: actions.setSearch,\r\n        setFindMatchInterval: actions.setFindMatchInterval,\r\n        setOpponentName: actions.setOpponentName,\r\n        setFriendSocket: actions.setFriendSocket,\r\n        setRoute: actions.setRoute,\r\n        setUser: actions.setUser\r\n    }));\r\n\r\n    useEffect(() => {\r\n        if ((route === 'login' || route === 'register')) {\r\n            if (user?.hash === 'guest') {\r\n                removeGuest();\r\n            }\r\n        }\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (search) {\r\n            setFindMatchInterval(setInterval(searchForMatch, 1000));\r\n        }\r\n    }, [search])\r\n\r\n    // useEffect(() => {\r\n    //     if (user?.username?.length && (route === 'login' || route === 'register')) {\r\n    //         console.log(user);\r\n    //         updateSearching();\r\n    //     }\r\n    // }, [user?.username])\r\n\r\n    const stopSearching = async () => {\r\n         try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username,\r\n                    search: false\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const updateSearching = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username,\r\n                    search: !search\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n            const searchChanged = await response.json();\r\n            if (searchChanged) {\r\n                setSearch(!search);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const searchForMatch = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findMatch?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Could not find match')}\r\n            const match = await response.json();\r\n            if (match?.username) {\r\n                await setFriendSocket(match.socketid);\r\n                await setOpponentName(match.username);\r\n                await stopSearching();\r\n                await socket.emit('send go to game',  {receiverSocket: match.socketid, senderSocket: currentSocket, senderName: user.username});\r\n                await setSearch(false);\r\n                setRoute('game');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const removeGuest = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/removeGuestUser', {\r\n                method: 'delete',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user?.username\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem removing guest')}\r\n            setSearch(false);\r\n            setUser(null);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addGuest = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/addGuestUser', {\r\n                method: 'post',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    socketid: currentSocket\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem adding guest')}\r\n            const data = await response.json();\r\n            await setUser(data);\r\n            setSearch(true);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={`findMatchContainer ${(route === 'login' || route === 'register') ? 'playAsGuest' : null}`}>\r\n            {\r\n                route === 'login' || route === 'register'\r\n                ? <button onClick={!search ? addGuest : removeGuest} className='findMatch'>{!search ? 'Play as Guest' : 'Searching...'}</button>\r\n                : <button onClick={updateSearching} className='findMatch'>{!search ? 'Find Match' : 'Searching...'}</button>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindMatch;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './singleFriend.css';\r\n\r\nconst SingleFriend = ({ friendInGame, socket, name, status }) => {\r\n\r\n    const { friendSocket, route, currentSocket, user } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        route: state.route,\r\n        currentSocket: state.currentSocket,\r\n        user: state.user\r\n    }));\r\n\r\n    const { setOpponentName, setFriendSocket, setRoute } = useStoreActions(actions => ({\r\n        setOpponentName: actions.setOpponentName,\r\n        setFriendSocket: actions.setFriendSocket,\r\n        setRoute: actions.setRoute\r\n    }));    \r\n\r\n    useEffect(() => {\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        socket.on('receive invite', data => handleInvite(data))\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n            socket.off('receive invite');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const btn = document.querySelector(`.btn${name}`);\r\n        if (status !== 'offline' && !friendInGame) {\r\n            btn.style.opacity = '0.8';\r\n            btn.disabled = false;\r\n            btn.childNodes[0].nodeValue = \"Invite\";\r\n        }\r\n    },[status, friendInGame])\r\n\r\n    const handleInvite = (data) => {\r\n        const btn = document.querySelector(`.btn${data.username}`);\r\n        if (route === 'loggedIn' && btn !== null) {\r\n            if (btn.disabled === true) {\r\n                btn.style.opacity = '0.8';\r\n                btn.disabled = false;\r\n            }\r\n            btn.childNodes[0].nodeValue = \"Accept\";\r\n            setFriendSocket(data.socketid);\r\n        }\r\n    }\r\n\r\n    const sendInvite = async (e) => {\r\n        const friend = e.target.id;\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`)\r\n            const user1 = await response.json();\r\n            if (user1.socketid) {\r\n                socket.emit('send invite', {currentSocket: currentSocket, username: user.username, socketid: user1.socketid});\r\n                e.target.childNodes[0].nodeValue = \"Invite sent\";\r\n                e.target.style.opacity = '0.4';\r\n                e.target.style.cursor = 'default';\r\n                e.target.disabled = true;\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const acceptInvite = (e) => {\r\n        socket.emit('send go to game',  {receiverSocket: friendSocket, senderSocket: currentSocket, senderName: user.username});\r\n        setOpponentName(e.target.id);\r\n        setRoute('game');\r\n    }\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.innerHTML === 'Invite') {\r\n            sendInvite(e)\r\n        } else if (e.target.innerHTML === 'Accept') {\r\n            acceptInvite(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id={name} value={name} className='friendBlock'>\r\n            <div className='friendText'>\r\n                <h3>{name}</h3>\r\n                {\r\n                    friendInGame && status === 'online'\r\n                    ? <button disabled className={`btn${name} friendInGameBtn`}>In Game</button>\r\n                    : \r\n                        status === 'online'\r\n                        ? <button className={`btn${name} friendOnlineBtn`} onClick={handleOnClick} id={name}>Invite</button>\r\n                        : <button disabled className={`btn${name} friendOfflineBtn`}>Offline</button>\r\n                }\r\n            </div>\r\n            <div id={status} className={status}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleFriend;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport SingleFriend from './SingleFriend';\r\nimport './friends.css';\r\n\r\nconst Friends = ({ socket }) => {\r\n    \r\n    const { unsortedFriends, user, allFriends, friendFilter, friendSearch, friendsOnline, getOnlineFriendsInterval } = useStoreState(state => ({\r\n        unsortedFriends: state.unsortedFriends,\r\n        user: state.user,\r\n        allFriends: state.allFriends,\r\n        friendFilter: state.friendFilter,\r\n        friendSearch: state.friendSearch,\r\n        friendsOnline: state.friendsOnline,\r\n        getOnlineFriendsInterval: state.getOnlineFriendsInterval\r\n    }));\r\n\r\n    const { setUnsortedFriends, setAllFriends, setFriendFilter, setFriendSearch, setFriendsOnline, setGetOnlineFriendsInterval } = useStoreActions(actions => ({\r\n        setUnsortedFriends: actions.setUnsortedFriends,\r\n        setAllFriends: actions.setAllFriends,\r\n        setFriendFilter: actions.setFriendFilter,\r\n        setFriendSearch: actions.setFriendSearch,\r\n        setFriendsOnline: actions.setFriendsOnline,\r\n        setGetOnlineFriendsInterval: actions.setGetOnlineFriendsInterval\r\n    }));\r\n    \r\n    // Start fetching friends on component mount\r\n// -----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        fetchFriends();\r\n        // showOnlineStatusToFriends();\r\n\r\n        socket.on('update friend status', () => {\r\n            getOnlineFriends();\r\n        });\r\n\r\n        setGetOnlineFriendsInterval(setInterval(getOnlineFriends, 1000));\r\n\r\n        return () => {\r\n            socket.off('update friend status');\r\n            clearInterval(getOnlineFriendsInterval);\r\n        }\r\n    }, [])\r\n//-----------------------------------------------------------------------------------\r\n    // Sort the friends when fetching has finished/unsortedFriends has updated\r\n//-----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        sortFriends();\r\n    },[friendsOnline, unsortedFriends])\r\n    \r\n//-----------------------------------------------------------------------------------\r\n    // Sort friends. Online at top\r\n//-----------------------------------------------------------------------------------\r\n    const sortFriends = () => {\r\n        const offlineFriends = [];\r\n        const justAdded = [];\r\n        let onlineSorted = [];\r\n        let offlineSorted = [];\r\n\r\n        unsortedFriends.forEach(f => {\r\n            if (f.username === friendSearch) {\r\n                justAdded.push(f)\r\n            } else {\r\n                let addFriendToOffline = true;\r\n                friendsOnline.forEach(olF => {\r\n                    if (olF.username === f.username) {\r\n                        return addFriendToOffline = false;\r\n                    }\r\n                })\r\n\r\n                if (addFriendToOffline) {\r\n                    offlineFriends.push(f);\r\n                }\r\n            }\r\n        })\r\n\r\n        onlineSorted = friendsOnline.sort((a, b) => {\r\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\r\n        })\r\n\r\n        offlineSorted = offlineFriends.sort((a, b) => {\r\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\r\n        })\r\n        \r\n        if (justAdded.length) {\r\n            setAllFriends(justAdded.concat(onlineSorted).concat(offlineSorted));\r\n        } else {\r\n            setAllFriends(onlineSorted.concat(offlineSorted));\r\n        }\r\n    }\r\n\r\n    const getOnlineFriends = async () => {\r\n         try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendsOnline?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Could not get online friends')}\r\n            const onlineFriends = await response.json();\r\n            setFriendsOnline(onlineFriends);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n//-----------------------------------------------------------------------------------\r\n    // Get array of friends\r\n// -----------------------------------------------------------------------------------\r\n    const fetchFriends = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Problem accessing friends list')}\r\n            const friends = await response.json();\r\n            if (user?.friends?.length && friends?.length) {\r\n                await setUnsortedFriends(friends);\r\n                getOnlineFriends();\r\n            } else {\r\n                await setAllFriends([]);\r\n                await setUnsortedFriends([]);\r\n                setFriendsOnline([]);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n//-----------------------------------------------------------------------------------\r\n    // Send friend request\r\n//-----------------------------------------------------------------------------------\r\n    const sendFriendRequest = async () => {\r\n        document.querySelector('.addFriendInput').value = '';\r\n        const friendAlert = document.querySelector('.friendsContainer');\r\n        let friendName = '';\r\n        let friendSocketId = '';\r\n        let friendsRequests = '';\r\n        let friendsRequestsArray = [];\r\n//-----------------------------------------------------------------------------------\r\n        // Check to see if friend already sent user request\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const requestsArray = requests.split(',');\r\n                if (requestsArray.includes(friendSearch)) {\r\n                    friendAlert.style.setProperty('--add-friend-alert', '\"User already sent you a request\"');\r\n                    throw new Error('User already sent you a request')\r\n                }\r\n            }\r\n//-----------------------------------------------------------------------------------\r\n            // Check to see if friend exists\r\n//-----------------------------------------------------------------------------------\r\n            const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friendSearch}`);\r\n            if (!res2.ok) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"User does not exist\"');\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res2.json();\r\n            if (user1.username === user.username) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"Cannot add yourself as a friend\"');\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user1.username) {\r\n                friendName = user1.username;\r\n                friendSocketId = user1.socketid;\r\n//-----------------------------------------------------------------------------------\r\n                // Add user to friend's friendrequests\r\n//-----------------------------------------------------------------------------------\r\n                let friendList = [];\r\n                if (user1.friends !== null && user1.friends !== '') {\r\n                    friendList = user1.friends.split(',');\r\n                }\r\n                if (user1.friendrequests !== null && user1.friendrequests !== '') {\r\n                    friendsRequestsArray = user1.friendrequests.split(',');\r\n                    if (friendsRequestsArray.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"You have already sent them a request\"');\r\n                        throw new Error('You have already sent them a request');\r\n                    } else if (friendList.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    } else {\r\n                        friendsRequestsArray.push(user.username);\r\n                        friendsRequests = user1.friendrequests.concat(`,${user.username}`);\r\n                    }\r\n                } else {\r\n                    if (friendList.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    }\r\n                    friendsRequests = user.username;\r\n                    friendsRequestsArray = [user.username];\r\n                }\r\n            }\r\n            friendAlert.style.setProperty('--add-friend-alert', '\"\"');\r\n            const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: friendsRequests,\r\n                        username: friendName\r\n                    })\r\n            });\r\n            if (!res3.ok) {\r\n                throw new Error('Could not add self to friendrequests of friend');\r\n            }\r\n            const selfAdded = await res3.json();\r\n            if (selfAdded) {\r\n                socket.emit('send friend request', friendSocketId);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const friendIsOnline = (last) => {\r\n        const curTime = Date.now();\r\n        if ((last > (curTime - 5000)) && last) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='friendsContainer'>\r\n            <div className='friendsContainerHeader'>\r\n                    <h2>Friends</h2>\r\n                    <input className='friendSearch' onChange={(e) => setFriendFilter(e.target.value)} type='text' placeholder='Enter a username'/>\r\n            </div>\r\n            <div className='friendsSection'>\r\n\r\n\r\n                <div className='friendsListContainer'>\r\n                {\r\n                    allFriends.length\r\n                    ?\r\n                    <div className='friendsList'>\r\n                    {\r\n//-----------------------------------------------------------------------------------\r\n                        // Map through the user's friends\r\n                        // Return a single friend div w/ their username and status\r\n//-----------------------------------------------------------------------------------\r\n                        allFriends.map(f => {\r\n                            if (f.username && f.username.toLowerCase().includes(friendFilter.toLowerCase())) {\r\n                                if (friendIsOnline(f.lastonline)) {\r\n                                    return <SingleFriend friendInGame={f.ingame} socket={socket} key={f.username} name={f.username} \r\n                                    status='online' />\r\n                                } else {\r\n                                    return <SingleFriend friendInGame={f.ingame} socket={socket} key={f.username} name={f.username} \r\n                                    status='offline' />\r\n                                }\r\n                            } else return null\r\n                        })\r\n                    }\r\n                    </div>\r\n                    : <h4 className='noFriends'>No friends have been added</h4>\r\n                }\r\n                </div>\r\n                <div className='addFriend'>\r\n                    <h3 className='addFriendText' >Add a friend</h3>\r\n                    <input className='addFriendInput' onChange={(e) => setFriendSearch(e.target.value)} type='text' placeholder='Enter a username'/>\r\n                    <button className='friendRequestBtn' onClick={sendFriendRequest}>Send Request</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport './friends.css';\r\n\r\nconst FriendsHome = ({onRouteChange}) => {\r\n    return (\r\n    <div className='friendsContainer'>\r\n        <div className='friendsContainerHeader'>\r\n            <h2>Friends</h2>\r\n        </div>\r\n        <div className='logToSeeFriendsText'>\r\n            <h3>Log in to add and view friends here</h3>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FriendsHome;\r\n","import { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst Login = ({onRouteChange }) => {\r\n    \r\n    const { currentSocket, userName, password } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        userName: state.userName,\r\n        password: state.password\r\n    }));\r\n\r\n    const { setUserName, setPassword, setUser } = useStoreActions(actions => ({\r\n        setUserName: actions.setUserName,\r\n        setPassword: actions.setPassword,\r\n        setUser: actions.setUser\r\n    }));\r\n    \r\n    const login = document.querySelector('.login');\r\n\r\n    const onSubmitLogin = async (e) => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/login', {\r\n              method: 'put',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            const user1 = await res.json();\r\n            if (user1.username) {\r\n                setUser(user1);\r\n                onRouteChange(e);\r\n            } else if (user1 === 'no socketid') {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n            } else if (login !== null) {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"The username or password you entered is incorrect\"');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='login'>\r\n            <h1>Log In</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)} type='password' />\r\n            </div>\r\n            <button className='loginBtn' value='login' onClick={onSubmitLogin}>Login</button>\r\n            <button value='goToRegister' onClick={onRouteChange} className='changeLogReg'>Register</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n\r\n    const { currentSocket, userName, password } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        userName: state.userName,\r\n        password: state.password\r\n    }));\r\n\r\n    const { setUserName, setPassword, setUser } = useStoreActions(actions => ({\r\n        setUserName: actions.setUserName,\r\n        setPassword: actions.setPassword,\r\n        setUser: actions.setUser\r\n    }));\r\n\r\n    const register = document.querySelector('.register');\r\n\r\n    const onSubmitRegister = (e) => {\r\n        if (userName.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username must be at least 5 characters\"');\r\n        } else if (userName.length > 10) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username cannot be more than 10 characters\"');\r\n        } else if (password.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Password must be at least 5 characters\"');\r\n        } else {\r\n            fetch('https://calm-ridge-60009.herokuapp.com/register', {\r\n              method: 'post',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            .then(response => response.json())\r\n            .then(user1 => {\r\n              if (user1.username) {\r\n                setUser(user1);\r\n                onRouteChange(e);\r\n              } else if (user1 === 'no socketid') {\r\n                register.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n                }\r\n                else if (!user1.ok) {\r\n                    register.style.setProperty(\"--reg-log-alert\", '\"Username has already been taken\"');\r\n              }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='register'>\r\n            <h1>Register</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)}type='password' />\r\n            </div>\r\n            <button className='registerBtn' value='register' onClick={onSubmitRegister}>Register</button>\r\n            <button value='goToLogin' onClick={onRouteChange} className='changeLogReg'>Login</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nimport Navigation from '../navigation/Navigation';\r\n\r\nconst Leaderboard = ({ onRouteChange, socket }) => {\r\n\r\n    const { topFive } = useStoreState(state => ({\r\n        topFive: state.topFive\r\n    }));\r\n\r\n    const { setTopFive } = useStoreActions(actions => ({\r\n        setTopFive: actions.setTopFive\r\n    }));\r\n\r\n    useEffect(() => {\r\n        getTopPlayers();\r\n    },[])\r\n\r\n    const getTopPlayers = async () => {\r\n        const tempArr = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getTopFive?userNum=${i}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const user1 = await response.json();\r\n            tempArr.push({name: user1.username, wins: user1.wins});\r\n        }\r\n        setTopFive(tempArr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation onRouteChange={onRouteChange} socket={socket} />\r\n            {\r\n            topFive.length\r\n            ?\r\n            <div className='topFiveContainer'>\r\n                <div className='topFive'>\r\n                    {\r\n                    topFive.map(player => {\r\n                        return <h3 key={player.name} className='LBplayer'> {player.name} : <span className='wins'>{player.wins}</span> wins </h3>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n            : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;\r\n","import io from 'socket.io-client';\r\nexport const socket = io('https://safe-mesa-81492.herokuapp.com/');       //,{autoConnect: false}\r\n","export default __webpack_public_path__ + \"static/media/ambient-waves.b96c967b.mp3\";","export default __webpack_public_path__ + \"static/media/lobby-theme.a9efad87.mp3\";","export default __webpack_public_path__ + \"static/media/game-theme.07202b2d.mp3\";","export default __webpack_public_path__ + \"static/media/button-click.41ea4214.mp3\";","export default __webpack_public_path__ + \"static/media/hover-sound.d0a3b451.mp3\";","import React, { useEffect } from 'react';\nimport { useStoreState, useStoreActions } from 'easy-peasy';\nimport Game from './components/boards/Game';\nimport HomeBoard from './components/homeBoard/HomeBoard';\nimport FindMatch from './components/findMatch/FindMatch';\nimport Friends from './components/friends/Friends';\nimport FriendsHome from './components/friends/FriendsHome';\nimport Login from './components/logReg/Login';\nimport Register from './components/logReg/Register';\nimport Leaderboard from './components/leaderboard/Leaderboard';\nimport Navigation from './components/navigation/Navigation';\nimport Footer from './components/footer/Footer';\nimport { socket } from './socket/socketImport';\nimport { Howl } from 'howler';\nimport ambientWaves from './audioclips/ambient-waves.mp3';\nimport lobbyTheme from './audioclips/lobby-theme.mp3';\nimport gameTheme from './audioclips/game-theme.mp3';\nimport buttonClick from './audioclips/button-click.mp3';\nimport hoverSound from './audioclips/hover-sound.mp3';\nimport './logReg.css';\nimport './homePageLogged.css';\nimport './gamePage.css';\nimport './leaderboard.css';\n\nfunction App() {\n    const { getOnlineFriendsInterval, route, user, friendSocket, findMatchInterval, checkOppStatusInterval, search, updatLastOnlineInterval, playGameAudio, playLobbyMusic, waveSound, lobbyMusic, gameMusic } = useStoreState(state => ({\n        getOnlineFriendsInterval: state.getOnlineFriendsInterval,\n        route: state.route,\n        user: state.user,\n        friendSocket: state.friendSocket,\n        findMatchInterval: state.findMatchInterval,\n        checkOppStatusInterval: state.checkOppStatusInterval,\n        search: state.search,\n        updatLastOnlineInterval: state.updatLastOnlineInterval,\n        playGameAudio: state.playGameAudio,\n        playLobbyMusic: state.playLobbyMusic,\n        waveSound: state.waveSound,\n        lobbyMusic: state.lobbyMusic,\n        gameMusic: state.gameMusic\n    }));\n\n    const { setRoute, setUser, setCurrentSocket, setSearch, setUpdatLastOnlineInterval, setAllFriends, setUnsortedFriends, setFriendsOnline, setFriendSearch, setPlayerIsReady, setPlayGameAudio, setPlayLobbyMusic, setWaveSound, setLobbyMusic, setGameMusic } = useStoreActions(actions => ({\n        setRoute: actions.setRoute,\n        setUser: actions.setUser,\n        setCurrentSocket: actions.setCurrentSocket,\n        setSearch: actions.setSearch,\n        setUpdatLastOnlineInterval: actions.setUpdatLastOnlineInterval,\n        setAllFriends: actions.setAllFriends,\n        setUnsortedFriends: actions.setUnsortedFriends,\n        setFriendsOnline: actions.setFriendsOnline,\n        setFriendSearch: actions.setFriendSearch,\n        setPlayerIsReady: actions.setPlayerIsReady,\n        setPlayGameAudio: actions.setPlayGameAudio,\n        setPlayLobbyMusic: actions.setPlayLobbyMusic,\n        setWaveSound: actions.setWaveSound,\n        setLobbyMusic: actions.setLobbyMusic,\n        setGameMusic: actions.setGameMusic\n    }));\n\n    const audioClips = [\n        {sound: buttonClick, label: 'btn', volume: 1},\n        {sound: hoverSound, label: 'hover', volume: 1}\n    ]\n\n    const soundPlay = (src) => {\n        console.log(src)\n        const sound = new Howl({\n            src: src.sound,\n            volume: src.volume,\n            html5: true\n        })\n        sound.play();\n    }\n\n    const playSound = (soundEffect) => {\n        audioClips.forEach(clip => {\n            if (clip.label === soundEffect ) {\n                soundPlay(clip);\n            }\n        })\n    }\n\n    const onRouteChange = async (e) => {\n        switch(e.target.value) {\n            case 'logOut':\n                if (user?.username) {\n                    setSearch(false);\n                    // removeUserSocket(true);\n                }\n                setRoute('login');\n                break;\n            case 'goToRegister':\n                setRoute('register');\n                break;\n            case 'goToLogin':\n                setRoute('login');\n                break;\n            case 'goHome':\n                setRoute('loggedIn');\n                break;\n            case 'goToLeaderboard':\n                setRoute('leaderboard');\n                break;\n            case 'login':\n                setRoute('loggedIn');\n                break;\n            case 'register':\n                setRoute('loggedIn');\n                break;\n            case 'game':\n                if (user?.username) {\n                    setSearch(false);\n                }\n                setRoute('game');\n                break;\n            default:\n                if (user?.username) {\n                    setSearch(false);\n                    // removeUserSocket(true);\n                }\n                setRoute('login');\n        }\n    }\n\n    const stopSearching = async () => {\n        try {\n           const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\n               method: 'put',\n               headers: {'Content-Type': 'application/json'},\n               body: JSON.stringify({\n                   username: user?.username,\n                   search: false\n               })\n           })\n           if (!response.ok) {throw new Error('Problem updating searching status')}\n       } catch(err) {\n           console.log(err);\n       }\n   }\n\n    const updateLastOnline = async () => {\n        try {\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/updateOnlineStatus`, {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: user?.username\n                })\n            })\n            if (!response.ok) {\n                throw new Error('Error');\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    const guestCleanup = async () => {\n        try {\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/guestCleanup', {\n                method: 'delete',\n                headers: {'Content-Type': 'application/json'}\n            })\n            if (!response.ok) {throw new Error('Problem adding guest')}\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    const handleMouseDown = (e) => {\n        if (!lobbyMusic && !playLobbyMusic && route !== 'game') {\n            setPlayLobbyMusic(true);\n        }\n    }\n\n    const handleBtnPress = (e) => {\n        if (e.target.tagName === 'BUTTON') {\n            playSound('btn');\n        }\n    }\n\n    const handleMouseOver = (e) => {\n        if (\n            e.target.parentElement.classList.contains('findMatchContainer') || e.target.parentElement.classList.contains('playAsGuest') \n            || \n            e.target.classList.contains('friendRequestBtn') \n            || \n            e.target.classList.contains('friendOnlineBtn')\n            || \n            e.target.parentElement.classList.contains('readyBtn')\n        ) {\n            console.log(e.target.classList);\n            playSound('hover');\n        }\n    }\n\n    useEffect(() => {\n        const page = document.querySelector('.logRegPage');\n        page.addEventListener('mousedown', handleMouseDown);\n        document.addEventListener('mousedown', handleBtnPress);\n        document.addEventListener('mouseover', handleMouseOver);\n\n        socket.on('connect', () => {\n            setCurrentSocket(socket.id);\n        })\n        guestCleanup();\n\n        return () => {\n            socket.off('connect');\n            page.removeEventListener('mousedown', handleMouseDown);\n            document.removeEventListener('mousedown', handleBtnPress);\n            document.removeEventListener('mouseover', handleMouseOver);\n        }\n    }, [])\n\n    useEffect(() => {\n        if (waveSound) {\n            waveSound.play();\n            waveSound.fade(0, 0.2, 1000);\n        }\n\n    }, [waveSound])\n\n    useEffect(() => {\n        if (lobbyMusic) {\n            lobbyMusic.play();\n        }\n\n    }, [lobbyMusic])\n\n    useEffect(() => {\n        if (gameMusic) {\n            gameMusic.play();\n        }\n\n    }, [gameMusic])\n    \n    useEffect(() => {\n        if (playGameAudio) {\n            if (!waveSound) {\n                setWaveSound(new Howl({\n                    src: ambientWaves,\n                    loop: true,\n                    volume: 0.3\n                }))\n            }\n            if (!gameMusic) {\n                setGameMusic(new Howl({\n                    src: gameTheme,\n                    loop: true,\n                    volume: 0.3,\n                    html5: true\n                }))\n            }\n        } else {\n            if (waveSound) {\n                waveSound.fade(0.3, 0, 1000);\n                setWaveSound(null);\n            }\n            if (gameMusic) {\n                gameMusic.fade(0.3, 0, 2000);\n                setGameMusic(null);\n            }\n        }\n\n    }, [playGameAudio])\n\n    useEffect(() => {\n        if (playLobbyMusic) {\n            if (!lobbyMusic) {\n                setLobbyMusic(new Howl({\n                    src: lobbyTheme,\n                    loop: true,\n                    volume: 0.3,\n                    html5: true\n                }))\n            } \n        } else {\n            if (lobbyMusic) {\n                lobbyMusic.fade(0.3, 0, 2000);\n                setLobbyMusic(null);\n            }\n        }\n\n    }, [playLobbyMusic])\n\n    useEffect(() => {\n        if (user?.username?.length) {\n            if (route !== 'login' && route !== 'register') {\n                stopSearching();\n                updateInGameStatus(false);\n            }\n            setUpdatLastOnlineInterval(setInterval(updateLastOnline, 1000));\n        } else {\n            clearInterval(updatLastOnlineInterval);\n            clearInterval(findMatchInterval);\n        }\n\n        return () => {\n            clearInterval(updatLastOnlineInterval);\n        }\n    }, [user?.username])\n\n    useEffect(() => {\n        if (!search) {\n            clearInterval(findMatchInterval);\n            if (user?.username) {\n                stopSearching();\n            }\n        }\n    }, [search])\n\n    useEffect(() => {\n        if (route === 'game') {\n            setPlayLobbyMusic(false);\n            if (!playGameAudio) {\n                setPlayGameAudio(true);\n            }\n            setSearch(false);\n            clearInterval(getOnlineFriendsInterval);\n            stopSearching();\n            updateInGameStatus(true);\n        } else {\n            setPlayGameAudio(false);\n            if (!playLobbyMusic) {\n                setPlayLobbyMusic(true);\n            }\n            setPlayerIsReady(false);\n            if (user?.username?.length) {\n                updateInGameStatus(false);\n            }\n            clearInterval(checkOppStatusInterval);\n        }\n\n        if ((route === 'login') || (route === 'register')) {\n            if (user?.hash !== 'guest') {\n                setUser(null);\n            }\n            clearInterval(getOnlineFriendsInterval);\n            setAllFriends([]);\n            setUnsortedFriends([]);\n            setFriendsOnline([]);\n            setFriendSearch('');\n        }\n    }, [route])\n\n\n    const updateInGameStatus = async (inGame) => {\n        try {\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/setInGame`, {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: user?.username,\n                    isInGame: inGame\n                })\n            })\n            if (!response.ok) {\n                throw new Error('Error');\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    // const showOnlineStatusToFriends = async () => {\n    //     try {\n    //         const response1 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\n    //         if (!response1.ok) {\n    //             throw new Error('Error')\n    //         }\n    //         const friends = await response1.json();\n    //         if (friends?.length) {\n    //             for (let f of friends) {\n    //                 if (f.socketid) {\n    //                     socket.emit('update user status', f.socketid);\n    //                 }\n    //             }\n    //         }\n    //     } catch(err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // const loadUser = (user) => {\n    //     setUser({ username: user.username, wins: user.wins })\n    // }\n\n    // const removeUserSocket = async (show) => {\n    //     const res = await fetch('https://calm-ridge-60009.herokuapp.com/removeUserSocket', {\n    //       method: 'put',\n    //       headers: {'Content-Type': 'application/json'},\n    //       body: JSON.stringify({\n    //         username: user.username\n    //       })\n    //     })\n    //     const socketRemoved = await res.json();\n    //     if (socketRemoved && show) {\n    //         showOnlineStatusToFriends();\n    //     }\n    // }\n\n    window.addEventListener('beforeunload', (e) => {\n        e.preventDefault();\n        if (user?.username) {\n            stopSearching();\n            updateInGameStatus(false);\n        }\n        if (route === 'game') {\n            socket.emit('send exit game', friendSocket);\n        }\n        // removeUserSocket(false);\n        e.returnValue = '';\n    })\n\n    document.onkeydown = (e) => {\n        const loginBtn = document.querySelector('.loginBtn');\n        const registerBtn = document.querySelector('.registerBtn');\n        const logUsername = document.querySelector('.login > .username > input');\n        const registerUsername = document.querySelector('.register > .username > input');\n        const logPassword = document.querySelector('.login > .password > input');\n        const registerPassword = document.querySelector('.register > .password > input');\n        const friendRequestBtn = document.querySelector('.friendRequestBtn');\n\n        if ((e.code === 'Enter') && (route === 'login' || route === 'register')) {\n            e.preventDefault();\n            if ((logUsername?.value?.length && logPassword?.value?.length) || (registerUsername?.value?.length && registerPassword?.value?.length)) {\n                route === 'login'\n                ? loginBtn.click()\n                : registerBtn.click()\n            }\n        } else if ((e.code === 'Enter') && (route === 'loggedIn')) {\n            e.preventDefault();\n            friendRequestBtn.click();\n        }\n    };\n\n    return (\n        route === 'login' || route === 'register'\n        ?\n        <div className='logRegPage'>\n            <Navigation socket={socket} onRouteChange={onRouteChange} />\n            <FriendsHome onRouteChange={onRouteChange}/>\n            <div className='homeText'>\n                <h1>Battleship</h1>\n            </div>\n            <FindMatch socket={socket} />\n            <div className='logReg'>\n                {\n                    route === 'login'\n                    ? <Login onRouteChange={onRouteChange}/>\n                    : <Register onRouteChange={onRouteChange}/>\n                }\n            </div>\n            <Footer />\n        </div>\n        :\n        <>\n            {\n            route === 'loggedIn' || route === 'leaderboard'\n            ?\n                user?.username?.length\n                ?\n                <>\n                    <div className={`homePageLogged ${route === 'leaderboard' ? 'hide' : null}`}>\n                        <Navigation socket={socket} onRouteChange={onRouteChange} />\n                        <Friends socket={socket} />\n                        <div className='matchAndBoard'>\n                            <FindMatch socket={socket} />\n                            <HomeBoard />\n                        </div>\n                        <Footer />\n                    </div>\n                    <div className={`leaderboard ${route === 'loggedIn' ? 'hide' : null}`}>\n                        <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n                        <Footer />\n                    </div>\n                </>\n                :\n                <div className={`leaderboard`}>\n                    <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n                    <Footer />\n                </div>\n            : <Game socket={socket} onRouteChange={onRouteChange} />\n            // <>\n            //     {\n            //     route === 'leaderboard'\n            //     ?\n            //     <div className='leaderboard'>\n            //         <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n            //         <Footer />\n            //     </div>\n            //     :\n            //     <Game socket={socket} onRouteChange={onRouteChange} />\n            //     }\n            // </>\n            }\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StoreProvider, createStore } from 'easy-peasy';\nimport model from './model';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(model);\n\nReactDOM.render(\n  <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}