{"version":3,"sources":["model.js","components/boards/Board.js","components/ships/Ships.js","components/boards/UserBoard.js","components/boards/OpponentBoard.js","components/navigation/msg-icon.png","components/navigation/FriendRequests.js","components/navigation/Navigation.js","components/boards/ChatBox.js","components/footer/Footer.js","components/boards/Game.js","components/homeBoard/HomeBoard.js","components/findMatch/FindMatch.js","components/friends/SingleFriend.js","components/friends/Friends.js","components/friends/FriendsHome.js","components/logReg/Login.js","components/logReg/Register.js","components/leaderboard/Leaderboard.js","socket/socketImport.js","App.js","reportWebVitals.js","index.js"],"names":["model","stored","persist","storage","route","user","currentSocket","friendSocket","opponentName","unsortedFriends","findMatchInterval","checkOppStatusInterval","updatLastOnlineInterval","getOnlineFriendsInterval","search","friendRequests","userName","password","topFive","allFriends","friendFilter","friendSearch","friendsOnline","gameRoute","playerIsReady","opponentIsReady","yourTurn","chatText","inviteSent","inviteReceived","setRoute","action","state","input","setUser","setCurrentSocket","setFriendSocket","setOpponentName","setUnsortedFriends","setFindMatchInterval","setCheckOppStatusInterval","setUpdatLastOnlineInterval","setGetOnlineFriendsInterval","setSearch","setFriendRequests","setUserName","setPassword","setTopFive","setAllFriends","setFriendFilter","setFriendSearch","setFriendsOnline","setGameRoute","setPlayerIsReady","setOpponentIsReady","setYourTurn","setChatText","setInviteSent","setInviteReceived","AssembleBoard","onSquareClicked","useStoreState","allSquares","i","j","push","row","String","fromCharCode","col","colStart","rowStart","handleSquareClick","e","parentBoard","target","parentElement","classList","contains","map","square","onClick","style","gridArea","className","id","Ships","rotating","orientation","selectedShip","selectedShipName","shipIsSelected","setManualGridLocation","onShipSelect","userBoard","document","querySelector","cursor","zIndex","border","parseInt","offsetWidth","offsetHeight","collisionDetection","item1","item2","d1Offset","$","offset","d1Height","outerHeight","d1Width","outerWidth","d1Top","top","d1Left","left","d2Offset","d2Height","d2Width","d2Top","d2Left","addEventListener","areaIsClear","ships","querySelectorAll","ship","console","log","window","oncontextmenu","transform","keyCode","preventDefault","undefined","onmouseover","userGrid","childShip","targetId","substring","indexOf","length","remove","gridColumn","gridRow","add","UserBoard","socket","useStoreActions","actions","shipHit","useEffect","on","shot","oppShot","getElementById","applyHitOrMiss","off","hit","matchOppShotToBoard","emit","shotSquare","socketid","Board","OpponentBoard","hitSquares","data","clickedSquare","result","count","countHitsOnShip","squares","FriendRequests","updateRequests","a","navBar","fetch","username","res","ok","Error","json","requests","setProperty","split","removeRequest","friend","newRequestList","newRequestListArray","index","splice","join","method","headers","body","JSON","stringify","requestlist","res2","onRemoveRequest","addFriend","value","friendList","friendArray","friendlistOfFriends","friendSocketId","user1","friendlistOfFriendsArray","friends","includes","forEach","f","friendlist","res3","allF","response","friendname","res4","addFriendStart","Dropdown","Toggle","variant","src","msgIcon","alt","Menu","request","Navigation","onRouteChange","handleExitClick","ChatBox","chatBox","handleEnterBtn","message","handleReceivedMessage","removeEventListener","msgNode","createElement","textNode","nameNode","text","createTextNode","name","appendChild","scrollTop","scrollHeight","onChange","type","placeholder","Footer","Game","addWin","setTimeout","alert","setInterval","checkIfOpponentIsOnline","clearInterval","gameInstructions","score","friendIsOnline","onlineFriends","readyBtn","opacity","HomeBoard","FindMatch","senderName","senderSocket","searchForMatch","stopSearching","updateSearching","match","receiverSocket","SingleFriend","friendInGame","status","handleInvite","btn","disabled","childNodes","nodeValue","sendInvite","innerHTML","acceptInvite","Friends","fetchFriends","getOnlineFriends","sortFriends","offlineSorted","offlineFriends","justAdded","onlineSorted","addFriendToOffline","olF","sort","b","toLowerCase","concat","sendFriendRequest","friendAlert","friendName","friendsRequests","friendsRequestsArray","friendrequests","last","lastonline","Date","now","ingame","FriendsHome","Login","login","onSubmitLogin","Register","register","then","Leaderboard","getTopPlayers","tempArr","wins","player","io","App","updateLastOnline","updateInGameStatus","inGame","isInGame","returnValue","onkeydown","loginBtn","registerBtn","logUsername","registerUsername","logPassword","registerPassword","friendRequestBtn","code","click","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","ReactDOM","render"],"mappings":"wcAsJeA,EApJD,CAIVC,OAAQC,YACJ,GAGA,CACIC,QAAS,iBAKjBC,MAAO,QACPC,KAAM,KACNC,cAAe,KACfC,aAAc,KACdC,aAAc,GACdC,gBAAiB,GACjBC,kBAAmB,EACnBC,uBAAwB,EACxBC,wBAAyB,EACzBC,yBAA0B,EAC1BC,QAAQ,EACRC,eAAgB,GAChBC,SAAU,GACVC,SAAU,GACVC,QAAS,GACTC,WAAY,GACZC,aAAc,GACdC,aAAc,GACdC,cAAe,GACfC,UAAW,aACXC,eAAe,EACfC,iBAAiB,EACjBC,UAAU,EACVC,SAAU,GACVC,YAAY,EACZC,gBAAgB,EAIhBC,SAAUC,aAAO,SAACC,EAAOC,GACrBD,EAAM5B,MAAQ6B,KAGlBC,QAASH,aAAO,SAACC,EAAOC,GACpBD,EAAM3B,KAAO4B,KAGjBE,iBAAkBJ,aAAO,SAACC,EAAOC,GAC7BD,EAAM1B,cAAgB2B,KAG1BG,gBAAiBL,aAAO,SAACC,EAAOC,GAC5BD,EAAMzB,aAAe0B,KAGzBI,gBAAiBN,aAAO,SAACC,EAAOC,GAC5BD,EAAMxB,aAAeyB,KAGzBK,mBAAoBP,aAAO,SAACC,EAAOC,GAC/BD,EAAMvB,gBAAkBwB,KAG5BM,qBAAsBR,aAAO,SAACC,EAAOC,GACjCD,EAAMtB,kBAAoBuB,KAG9BO,0BAA2BT,aAAO,SAACC,EAAOC,GACtCD,EAAMrB,uBAAyBsB,KAGnCQ,2BAA4BV,aAAO,SAACC,EAAOC,GACvCD,EAAMpB,wBAA0BqB,KAGpCS,4BAA6BX,aAAO,SAACC,EAAOC,GACxCD,EAAMnB,yBAA2BoB,KAGrCU,UAAWZ,aAAO,SAACC,EAAOC,GACtBD,EAAMlB,OAASmB,KAGnBW,kBAAmBb,aAAO,SAACC,EAAOC,GAC9BD,EAAMjB,eAAiBkB,KAG3BY,YAAad,aAAO,SAACC,EAAOC,GACxBD,EAAMhB,SAAWiB,KAGrBa,YAAaf,aAAO,SAACC,EAAOC,GACxBD,EAAMf,SAAWgB,KAGrBc,WAAYhB,aAAO,SAACC,EAAOC,GACvBD,EAAMd,QAAUe,KAGpBe,cAAejB,aAAO,SAACC,EAAOC,GAC1BD,EAAMb,WAAac,KAGvBgB,gBAAiBlB,aAAO,SAACC,EAAOC,GAC5BD,EAAMZ,aAAea,KAGzBiB,gBAAiBnB,aAAO,SAACC,EAAOC,GAC5BD,EAAMX,aAAeY,KAGzBkB,iBAAkBpB,aAAO,SAACC,EAAOC,GAC7BD,EAAMV,cAAgBW,KAG1BmB,aAAcrB,aAAO,SAACC,EAAOC,GACzBD,EAAMT,UAAYU,KAGtBoB,iBAAkBtB,aAAO,SAACC,EAAOC,GAC7BD,EAAMR,cAAgBS,KAG1BqB,mBAAoBvB,aAAO,SAACC,EAAOC,GAC/BD,EAAMP,gBAAkBQ,KAG5BsB,YAAaxB,aAAO,SAACC,EAAOC,GACxBD,EAAMN,SAAWO,KAGrBuB,YAAazB,aAAO,SAACC,EAAOC,GACxBD,EAAML,SAAWM,KAGrBwB,cAAe1B,aAAO,SAACC,EAAOC,GAC1BD,EAAMJ,WAAaK,KAGvByB,kBAAmB3B,aAAO,SAACC,EAAOC,GAC9BD,EAAMH,eAAiBI,M,yDCxGhB0B,EArCO,SAAC,GAQnB,IAR4C,IAAvBC,EAAsB,EAAtBA,gBAEbrC,EAAcsC,aAAc,SAAA7B,GAAK,MAAK,CAC1CT,UAAWS,EAAMT,UACjBnB,MAAO4B,EAAM5B,UAFTmB,UAKFuC,EAAa,GACVC,EAAI,EAAGA,EAAI,GAAIA,IACpB,IAAK,IAAIC,EAAI,EAAGA,EAAI,GAAIA,IACpBF,EAAWG,KAAK,CAACC,IAAKC,OAAOC,aAAa,GAAKJ,GAAIK,IAAKN,EAAGO,SAAUP,EAAGQ,SAAUP,EAAI,IAI9F,IAAMQ,EAAoB,SAACC,GACvB,IAAMC,EAAcD,EAAEE,OAAOC,cAAcA,cAAcA,cACvC,mBAAdrD,GAAkCmD,EAAYG,UAAUC,SAAS,kBACjElB,EAAgBa,IAIxB,OACIX,EAAWiB,KAAI,SAAAC,GACX,OACI,qBACIC,QAAST,EACTU,MAAO,CAACC,SAAUH,EAAOd,IAAMc,EAAOX,KACtCe,UAAW,gBAAkBJ,EAAOd,IAAM,IAAMc,EAAOd,IAAMc,EAAOX,IAEpEgB,GAAIL,EAAOV,SAAW,IAAMU,EAAOT,UAD9BS,EAAOd,IAAMc,EAAOX,S,iBC8J9BiB,G,OA1LD,WAEV,IAAQ/D,EAAcsC,aAAc,SAAA7B,GAAK,MAAK,CAC1CT,UAAWS,EAAMT,cADbA,UAIJgE,GAAW,EACXC,EAAc,MACdC,EAAe,GACfC,EAAmB,GACnBC,GAAiB,EACjBC,GAAwB,EAItBC,EAAe,SAACpB,GAClB,IAAKkB,GAAgC,eAAdpE,EAA4B,CAC/C,IAAMuE,EAAYC,SAASC,cAAc,cACzCL,GAAiB,EACjBF,EAAehB,EAAEE,OAAOC,cACxBkB,EAAUZ,MAAMe,OAAS,UACzBR,EAAaP,MAAMgB,OAAS,KAE5BT,EAAaP,MAAMiB,OAAS,iCAExBC,SAAS3B,EAAEE,OAAOC,cAAcyB,aAAeD,SAAS3B,EAAEE,OAAOC,cAAc0B,cAC/Ed,EAAc,MACPY,SAAS3B,EAAEE,OAAOC,cAAc0B,cAAgBF,SAAS3B,EAAEE,OAAOC,cAAcyB,eACvFb,EAAc,QAGdC,EAAaZ,UAAUC,SAAS,WAChCY,EAAmB,UACZD,EAAaZ,UAAUC,SAAS,cACvCY,EAAmB,aACZD,EAAaZ,UAAUC,SAAS,WACvCY,EAAmB,UACZD,EAAaZ,UAAUC,SAAS,aACvCY,EAAmB,YACZD,EAAaZ,UAAUC,SAAS,eACvCY,EAAmB,eAOzBa,EAAqB,SAACC,EAAOC,GAC/B,IAAIC,EAAWC,IAAEH,GAAOI,SACpBC,EAAWF,IAAEH,GAAOM,aAAY,GAChCC,EAAUJ,IAAEH,GAAOQ,YAAW,GAC9BC,EAAQP,EAASQ,IAAML,EACvBM,EAAST,EAASU,KAAOL,EACzBM,EAAWV,IAAEF,GAAOG,SACpBU,EAAWX,IAAEF,GAAOK,aAAY,GAChCS,EAAUZ,IAAEF,GAAOO,YAAW,GAC9BQ,EAAQH,EAASH,IAAMI,EACvBG,EAASJ,EAASD,KAAOG,EAI7B,QAFoBN,GAASI,EAASH,IAAM,GAAKR,EAASQ,KAAOM,EAAQ,GAAKL,GAAUE,EAASD,KAAO,GAAKV,EAASU,MAAQK,EAAS,IAO3I1B,SAAS2B,iBAAiB,SAAS,SAAAjD,GAC3BkB,GAAkBlB,EAAEE,OAAOE,UAAUC,SAAS,kBAAgC,IAAbS,GAAsBoC,MACvFlC,EAAaP,MAAMgB,OAAS,IAC5BH,SAASC,cAAc,cAAcd,MAAMe,OAAS,UAEpDR,EAAaP,MAAMiB,OAAS,KAC5BR,GAAiB,MAYzB,IAAMgC,EAAc,WAChB,IADsB,EAChBC,EAAQ7B,SAAS8B,iBAAiB,SADlB,cAEJD,GAFI,IAErB,2BAAwB,CAAC,IAAhBE,EAAe,QACrB,IAAKA,EAAKjD,UAAUC,SAASY,IAAqBa,EAAmBd,EAAcqC,GAE/E,OADAC,QAAQC,IAAIF,EAAK1C,YACV,GALO,8BAQtB,OAAO,GA+EX,OA1EA6C,OAAOC,cAAgB,SAACzD,GAYpB,OAXKkB,IACmB,QAAhBH,GACAC,EAAaP,MAAMiD,UAAY,iBAC/B3C,EAAc,QACS,SAAhBA,IACPC,EAAaP,MAAMiD,UAAY,eAC/B3C,EAAc,OAElBI,GAAwB,EACxBL,GAAW,IAER,GAKXQ,SAAS2B,iBAAiB,WAAW,SAACjD,GAChB,KAAdA,EAAE2D,SACF3D,EAAE4D,iBAIY,KAAd5D,EAAE2D,cAAyCE,IAAvB7C,EAAaP,OAAuBS,IACpC,QAAhBH,GACAC,EAAaP,MAAMiD,UAAY,iBAC/B3C,EAAc,QACS,SAAhBA,IACPC,EAAaP,MAAMiD,UAAY,eAC/B3C,EAAc,OAElBI,GAAwB,EACxBL,GAAW,MAMnB0C,OAAOM,YAAc,SAAC9D,GAElB,GAAIkB,EAAgB,CAChBJ,GAAW,EACXE,EAAaP,MAAMiD,UAAY,KAC/B,IAAMK,EAAWzC,SAASC,cAAc,cAClCyC,EAAY1C,SAASC,cAAT,WAA2BN,EAA3B,SACZgD,EAAWjE,EAAEE,OAAOU,GACpBf,EAAWoE,EAASC,UAAU,EAAGD,EAASE,QAAQ,MAClDrE,EAAWmE,EAASC,UAAWD,EAASE,QAAQ,KAAO,EAAIF,EAASG,QAGtEL,EAAS1D,SAASL,EAAEE,SACpBF,EAAEE,OAAOE,UAAUC,SAAS,kBACV,IAAnBa,IACqB,QAAhBH,GACAiD,EAAU5D,UAAUiE,OAApB,iBAAqCpD,IACjCpB,EAAY,GAAK8B,SAASX,EAAaJ,IAAM,EAC7CI,EAAaP,MAAM6D,WAAnB,UAAmCzE,EAAnC,cAAiD8B,SAAS9B,GAAY8B,SAASX,EAAaJ,KACrFf,GAAa,GAAK8B,SAASX,EAAaJ,IAAM,IAAgC,IAA1BO,EAC3DH,EAAaP,MAAM6D,WAAnB,eAAwC,GAAK3C,SAASX,EAAaJ,KAChEO,GAAwB,EAC/BH,EAAaP,MAAM8D,QAAnB,UAAgCzE,EAAhC,cAA8C6B,SAAS7B,GAAY,IAC5C,SAAhBiB,IACPiD,EAAU5D,UAAUoE,IAApB,iBAAkCvD,IAC9BnB,EAAY6B,SAASX,EAAaJ,IAAM,EACxCI,EAAaP,MAAM8D,QAAnB,UAAgC5C,SAAS7B,GAAY,EAArD,cAA4D6B,SAAS7B,GAAY6B,SAASX,EAAaJ,IAAM,GACtGd,GAAa6B,SAASX,EAAaJ,IAAM,IAAgC,IAA1BO,EACtDH,EAAaP,MAAM8D,QAAnB,UAAgC5C,SAASX,EAAaJ,IAAM,EAA5D,QACGO,GAAwB,EAC/BH,EAAaP,MAAM6D,WAAnB,UAAmCzE,EAAnC,cAAiD8B,SAAS9B,GAAY,OAOlF,qCACI,qBAAKe,GAAG,IAAID,UAAU,eAAtB,SAAqC,qBAAKH,QAASY,EAAcT,UAAU,kBAE3E,qBAAKC,GAAG,IAAID,UAAU,kBAAtB,SAAwC,qBAAKH,QAASY,EAAcT,UAAU,qBAE9E,qBAAKC,GAAG,IAAID,UAAU,eAAtB,SAAqC,qBAAKH,QAASY,EAAcT,UAAU,kBAE3E,qBAAKC,GAAG,IAAID,UAAU,iBAAtB,SAAuC,qBAAKH,QAASY,EAAcT,UAAU,oBAE7E,qBAAKC,GAAG,IAAID,UAAU,iBAAtB,SAAuC,qBAAKH,QAASY,EAAcT,UAAU,yBC9D1E8D,EAnHG,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAEjB,EAA2CtF,aAAc,SAAA7B,GAAK,MAAK,CAC/DT,UAAWS,EAAMT,UACjBhB,aAAcyB,EAAMzB,aACpBH,MAAO4B,EAAM5B,UAHTmB,EAAR,EAAQA,UAAWhB,EAAnB,EAAmBA,aAAcH,EAAjC,EAAiCA,MAMzBmD,EAAgB6F,aAAgB,SAAAC,GAAO,MAAK,CAChD9F,YAAa8F,EAAQ9F,gBADjBA,YAIJ+F,EAAU,GASdC,qBAAU,WAON,OANAJ,EAAOK,GAAG,gBAAgB,SAAAC,GACtB,IAAMC,EAAU3D,SAAS4D,eAAeF,GACxCG,EAAeF,GACfnG,GAAY,MAGT,WACH4F,EAAOU,IAAI,mBAEjB,IAEF,IAAMC,EAAM,SAACtD,EAAOC,GAChB,IAAIC,EAAWC,IAAEH,GAAOI,SACpBC,EAAWF,IAAEH,GAAOM,aAAY,GAChCC,EAAUJ,IAAEH,GAAOQ,YAAW,GAC9BC,EAAQP,EAASQ,IAAML,EACvBM,EAAST,EAASU,KAAOL,EACzBM,EAAWV,IAAEF,GAAOG,SACpBU,EAAWX,IAAEF,GAAOK,aAAY,GAChCS,EAAUZ,IAAEF,GAAOO,YAAW,GAC9BQ,EAAQH,EAASH,IAAMI,EACvBG,EAASJ,EAASD,KAAOG,EAI7B,QAFoBN,GAASI,EAASH,IAAM,GAAKR,EAASQ,KAAOM,EAAQ,GAAKL,GAAUE,EAASD,KAAO,GAAKV,EAASU,MAAQK,EAAS,IAKrImC,EAAiB,SAACF,GAChBK,EAAoBL,IAGhBA,EAAQ7E,UAAUoE,IAAI,OAE1BE,EAAOa,KAAK,gCAAiC,CAACC,WAAYP,EAAQrE,GAAIoE,KAAM,MAAOS,SAAU3J,EAAc+I,QAASA,MAIhHI,EAAQ7E,UAAUoE,IAAI,QAE1BE,EAAOa,KAAK,gCAAiC,CAACC,WAAYP,EAAQrE,GAAIoE,KAAM,OAAQS,SAAU3J,EAAc+I,QAASA,MAIvHS,EAAsB,SAACN,GACzB,IADkC,EAC5B7B,EAAQ7B,SAAS8B,iBAAiB,SADN,cAEjBD,GAFiB,IAElC,2BAAwB,CAAC,IAAhBE,EAAe,QACpB,GAAIgC,EAAIL,EAAM3B,GAEV,OADAwB,EAAUxB,EAAKjD,UAAU,IAClB,GALmB,8BAQlC,OAAO,GAGX,OACI,sBAAKO,UAAU,kBAAf,UACI,sBAAKA,UAAU,OAAf,UACI,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,sCAGJ,sBAAKA,UAAU,OAAf,UACI,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,uCAGJ,qBAAKA,UAAU,OAAf,SACI,sBAAKA,UAAU,aAAf,UACI,cAAC+E,EAAD,CAAO5I,UAAWA,IAClB,cAAC,EAAD,CAAOA,UAAWA,EAAWnB,MAAOA,aCjBzCgK,EA/FO,SAAC,GAAgB,IAAdjB,EAAa,EAAbA,OAErB,EAAqDtF,aAAc,SAAA7B,GAAK,MAAK,CACzET,UAAWS,EAAMT,UACjBhB,aAAcyB,EAAMzB,aACpBH,MAAO4B,EAAM5B,MACbsB,SAAUM,EAAMN,aAJZH,EAAR,EAAQA,UAAWhB,EAAnB,EAAmBA,aAAcH,EAAjC,EAAiCA,MAAOsB,EAAxC,EAAwCA,SAOhC6B,EAAgB6F,aAAgB,SAAAC,GAAO,MAAK,CAChD9F,YAAa8F,EAAQ9F,gBADjBA,YAKF8G,EAAa,GAWnBd,qBAAU,WAoBN,OAnBAJ,EAAOK,GAAG,iCAAiC,SAAAc,GACvC,IAAMC,EAAgBxE,SAASC,cAAT,8BAA8CsE,EAAKL,WAAnD,OACtB,GAAoB,QAAhBK,EAAKE,aAAgDlC,IAA5BiC,EAAc1F,WAIvC,GAHA0F,EAAc1F,UAAUoE,IAAI,OAC5BoB,EAAWpG,KAAKqG,EAAKhB,SACrBiB,EAAc1F,UAAUoE,IAAxB,WAAgCqB,EAAKhB,UAhBzB,SAACxB,GACrB,IAD8B,EAC1B2C,EAAQ,EADkB,cAEdJ,GAFc,IAE9B,2BAA4B,UACZvC,IACR2C,GAAS,GAJa,8BAO9B,OAAOA,EAUKC,CAAgBJ,EAAKhB,WAAalD,SAASL,SAASC,cAAT,WAA2BsE,EAAKhB,UAAWjE,IAAK,CAC3F,IAD2F,EACrFsF,EAAU5E,SAAS8B,iBAAiB,iBADiD,cAExE8C,GAFwE,IAE3F,2BAA4B,CAAC,IAApB3F,EAAmB,QACpBA,EAAOH,UAAUC,SAAjB,WAA8BwF,EAAKhB,WACnCtE,EAAOH,UAAUoE,IAAI,aAJ8D,oCAQxE,SAAhBqB,EAAKE,aAAiDlC,IAA5BiC,EAAc1F,WAC/C0F,EAAc1F,UAAUoE,IAAI,WAI7B,WACHE,EAAOU,IAAI,oCAEjB,IAUF,OACI,sBAAKzE,UAAU,sBAAf,UACI,sBAAKA,UAAU,OAAf,UACI,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,sCAGJ,sBAAKA,UAAU,OAAf,UACI,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,mCACA,uCAGJ,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,aAAf,SACI,cAAC+E,EAAD,CAAO5I,UAAWA,EAAWnB,MAAOA,EAAOwD,gBAtCnC,SAACa,IACjB/C,GAAa+C,EAAEE,OAAOE,UAAUC,SAAS,QAAWL,EAAEE,OAAOE,UAAUC,SAAS,UAEhFqE,EAAOa,KAAK,wBAAyB,CAACrF,OAAQF,EAAEE,OAAOU,GAAI6E,SAAU3J,IACrEgD,GAAY,eC3DT,G,OAAA,IAA0B,sC,SCmP1BqH,EA7OQ,SAAC,GAAgB,IAAdzB,EAAa,EAAbA,OAEtB,EAAiCtF,aAAc,SAAA7B,GAAK,MAAK,CACrD3B,KAAM2B,EAAM3B,KACZU,eAAgBiB,EAAMjB,mBAFlBV,EAAR,EAAQA,KAAMU,EAAd,EAAcA,eAKd,EAAkDqI,aAAgB,SAAAC,GAAO,MAAK,CAC1E/G,mBAAoB+G,EAAQ/G,mBAC5BM,kBAAmByG,EAAQzG,sBAFvBN,EAAR,EAAQA,mBAAoBM,EAA5B,EAA4BA,kBAK5B2G,qBAAU,WAON,OANAsB,IAEA1B,EAAOK,GAAG,0BAA0B,WAChCqB,OAGG,WACH1B,EAAOU,IAAI,6BAEjB,IAEF,IAAMgB,EAAc,uCAAG,gCAAAC,EAAA,6DACbC,EAAShF,SAASC,cAAc,OADnB,kBAGGgF,MAAM,qEAAD,OAAsE3K,EAAK4K,WAHnF,WAGTC,EAHS,QAINC,GAJM,sBAKL,IAAIC,MAAM,iCALL,uBAOQF,EAAIG,OAPZ,OAQE,QADXC,EAPS,SAQuB,KAAbA,GACrBP,EAAO7F,MAAMqG,YAAY,uBAAwB,qBACjD3I,EAAkB0I,EAASE,MAAM,QAEjCT,EAAO7F,MAAMqG,YAAY,uBAAwB,eACjD3I,EAAkB,OAbP,kDAgBfmF,QAAQC,IAAR,MAhBe,0DAAH,qDAoBdyD,EAAa,uCAAG,WAAOC,GAAP,yBAAAZ,EAAA,6DACda,EAAiB,GADH,kBAGIX,MAAM,qEAAD,OAAsE3K,EAAK4K,WAHpF,WAGRC,EAHQ,QAILC,GAJK,sBAKJ,IAAIC,MAAM,iCALN,uBAOSF,EAAIG,OAPb,cAQG,QADXC,EAPQ,SAQwB,KAAbA,KACfM,EAAsBN,EAASE,MAAM,MACnB3C,QAAU,EAC9B8C,EAAiB,MAEXE,EAAQD,EAAoBhD,QAAQ8C,KAC7B,IACTE,EAAoBE,OAAOD,EAAO,GAClCF,EAAiBC,EAAoBG,KAAK,OAhBxC,UAqBKf,MAAM,8DAA+D,CACpFgB,OAAQ,MACJC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBC,YAAaV,EACbV,SAAU5K,EAAK4K,aA1Bb,YAqBRqB,EArBQ,QA6BJnB,GA7BI,uBA8BJ,IAAIC,MAAM,oCA9BN,yBAgCYkB,EAAKjB,OAhCjB,gBAkCVR,IAlCU,kDAqCd9C,QAAQC,IAAR,MArCc,0DAAH,sDAyCbuE,EAAkB,SAAC9H,GACrBgH,EAAchH,EAAEE,OAAOU,KAGpBmH,EAAS,uCAAG,WAAOd,GAAP,iDAAAZ,EAAA,6DACf/C,QAAQC,IAAI,gBACZjC,SAASC,cAAc,mBAAmByG,MAAQ,GAC9CC,EAAa,GACbC,EAAc,GACdC,EAAsB,GACtBC,EAAiB,GANN,kBAWO7B,MAAM,8DAAD,OAA+DU,IAX3E,WAWLR,EAXK,QAYFC,GAZE,uBAaD,IAAIC,MAAM,uBAbT,yBAeSF,EAAIG,OAfb,YAeLyB,EAfK,QAgBD7B,WAAa5K,EAAK4K,SAhBjB,uBAiBD,IAAIG,MAAM,6BAjBT,YAkBA0B,EAAM7B,SAlBN,oBAmBH8B,EAA2B,GAC/BF,EAAiBC,EAAM5C,WApBhB,OAqBH4C,QArBG,IAqBHA,GArBG,UAqBHA,EAAOE,eArBJ,aAqBH,EAAgBnE,QArBb,sBAsBHkE,EAA2BD,EAAME,QAAQxB,MAAM,MAClByB,SAAS5M,EAAK4K,UAvBxC,uBAwBO,IAAIG,MAAM,wCAxBjB,eA2BP2B,EAAyB9I,KAAK5D,EAAK4K,UAE/B2B,EADAG,EAAyBlE,OAAS,EACZkE,EAAyBhB,KAAK,KAE9BgB,EAAyB,GA/B5C,UAqCY/B,MAAM,8DAAD,OAA+D3K,EAAK4K,WArCrF,YAqCDqB,EArCC,QAsCGnB,GAtCH,uBAsCc,IAAIC,MAAM,kCAtCxB,yBAuCekB,EAAKjB,OAvCpB,eAwCP,QADM2B,EAvCC,cAwCP,IAAIA,OAAJ,EAAIA,EAASnE,SACTmE,EAAQE,SAAQ,SAAAC,GAEZ,GADAR,EAAY1I,KAAKkJ,EAAElC,UACfkC,EAAElC,WAAaS,EACf,MAAM,IAAIN,MAAM,+BAI5BuB,EAAY1I,KAAKyH,GACjBgB,EAAaC,EAAYZ,KAAK,KAjDvB,UAuDYf,MAAM,mDAAoD,CACzEgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAU5K,EAAK4K,SACfmC,WAAYV,MA5Db,YAuDDW,EAvDC,QA+DGlC,GA/DH,uBA+Dc,IAAIC,MAAM,yBA/DxB,yBAgEiBiC,EAAKhC,OAhEtB,oCAkEGiC,EAAO,GAlEV,cAmEWX,GAnEX,kEAmEMQ,EAnEN,4BAqE4BnC,MAAM,8DAAD,OAA+DmC,IArEhG,YAqEWI,EArEX,QAsEmBpC,GAtEnB,uBAsE8B,IAAIC,MAAM,uBAtExC,yBAuEyBmC,EAASlC,OAvElC,QAuEWyB,EAvEX,OA6EKQ,EAAKrJ,KAAK6I,GA7Ef,mDA+EK/E,QAAQC,IAAR,MA/EL,iJAkFH1F,EAAmBgL,GAlFhB,yBAoFYtC,MAAM,yDAA0D,CAC/EgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBgB,WAAYR,EACZY,WAAY9B,MAzFb,YAoFD+B,EApFC,QA4FGtC,GA5FH,uBA4Fc,IAAIC,MAAM,+CA5FxB,yBA6FiBqC,EAAKpC,OA7FtB,gBA8F6B,OAAnBwB,GACb1D,EAAOa,KAAK,qBAAsB6C,GA/F/B,0DAmGX9E,QAAQC,IAAR,MAnGW,gFAAH,sDAuGV0F,EAAc,uCAAG,WAAOjJ,GAAP,eAAAqG,EAAA,+EAEGE,MAAM,8DAAD,OAA+DvG,EAAEE,OAAOU,KAFhF,WAET6F,EAFS,QAGNC,GAHM,sBAIL,IAAIC,MAAM,uBAJL,uBAMKF,EAAIG,OANT,cAOLJ,WACNQ,EAAchH,EAAEE,OAAOU,IAEvBmH,EAAU/H,EAAEE,OAAOU,KAVR,kDAcf0C,QAAQC,IAAR,MAde,0DAAH,sDAkBpB,OACI,mCACI,eAAC2F,EAAA,EAAD,CAAUvI,UAAU,WAApB,UACE,cAACuI,EAAA,EAASC,OAAV,CAAiBC,QAAQ,UAAUzI,UAAU,gBAAgBC,GAAG,iBAAhE,SAAiF,qBAAKyI,IAAKC,EAASC,IAAI,mBACxG,cAACL,EAAA,EAASM,KAAV,CAAe5I,GAAG,YAAlB,SAEqB,OAAnBtE,EAEEA,EAAegE,KAAI,SAAAmJ,GACjB,OACI,sBAAmB9I,UAAU,eAA7B,UACI,sBAAKA,UAAU,OAAf,iCAA0C,oBAAIA,UAAU,gBAAd,SAA+B8I,OACzE,gCACI,wBAAQjJ,QAASyI,EAAgBrI,GAAI6I,EAAS9I,UAAU,eAAxD,oBACA,wBAAQH,QAASsH,EAAiBlH,GAAI6I,EAAS9I,UAAU,eAAzD,yBAJE8I,MASb,aCvKNC,EA/DI,SAAC,GAA+B,IAA7BhF,EAA4B,EAA5BA,OAAQiF,EAAoB,EAApBA,cAE1B,EAAqCvK,aAAc,SAAA7B,GAAK,MAAK,CACzDzB,aAAcyB,EAAMzB,aACpBF,KAAM2B,EAAM3B,KACZD,MAAO4B,EAAM5B,UAHTG,EAAR,EAAQA,aAAcF,EAAtB,EAAsBA,KAAMD,EAA5B,EAA4BA,MAMpBuC,EAAcyG,aAAgB,SAAAC,GAAO,MAAK,CAC9C1G,UAAW0G,EAAQ1G,cADfA,UAIF0L,EAAkB,SAAC5J,GACrB9B,GAAU,GACVyL,EAAc3J,GACd0E,EAAOa,KAAK,iBAAkBzJ,IAGlC,OACI,qBAAK6E,UAAU,MAAf,SAEc,UAAVhF,GAA+B,aAAVA,EAErB,mCACI,wBAAQqM,MAAM,kBAAkBxH,QAASmJ,EAAzC,2BAGM,aAAVhO,EAEA,qCACI,cAAC,EAAD,CAAgB+I,OAAQA,IACxB,wBAAQsD,MAAM,kBAAkBxH,QAASmJ,EAAzC,yBACA,wBAAQ3B,MAAM,SAASxH,QAASmJ,EAAhC,wBAGJ,mCAEc,gBAAVhO,GAEQ,OAAJC,QAAI,IAAJA,OAAA,EAAAA,EAAM4K,UAEN,qCACI,cAAC,EAAD,CAAgB9B,OAAQA,IACxB,wBAAQsD,MAAM,SAASxH,QAASmJ,EAAhC,kBACA,wBAAQ3B,MAAM,SAASxH,QAASmJ,EAAhC,wBAGJ,mCACI,wBAAQ3B,MAAM,YAAYxH,QAASmJ,EAAnC,oBAGR,qCACI,cAAC,EAAD,CAAgBjF,OAAQA,IACxB,wBAAQsD,MAAM,SAASxH,QAASoJ,EAAhC,kBACA,wBAAQ5B,MAAM,SAASxH,QAASoJ,EAAhC,6BCsBLC,EA9EC,SAAC,GAAgB,IAAdnF,EAAa,EAAbA,OAEf,EAAiDtF,aAAc,SAAA7B,GAAK,MAAK,CACrEzB,aAAcyB,EAAMzB,aACpBC,aAAcwB,EAAMxB,aACpBmB,SAAUK,EAAML,aAHZpB,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,aAAcmB,EAApC,EAAoCA,SAM5B6B,EAAgB4F,aAAgB,SAAAC,GAAO,MAAK,CAChD7F,YAAa6F,EAAQ7F,gBADjBA,YAIF+K,EAAUxI,SAASC,cAAc,YAEvCuD,qBAAU,WAON,OANAxD,SAAS2B,iBAAiB,QAAS8G,GAEnCrF,EAAOK,GAAG,eAAe,SAAAiF,GACrBC,EAAsBD,MAGnB,WACHtF,EAAOU,IAAI,eACX9D,SAAS4I,oBAAoB,QAASH,MAE5C,CAAC7M,IAEH,IAAM+M,EAAwB,SAACD,GAC3B,IAAMF,EAAUxI,SAASC,cAAc,YACvC,GAAgB,OAAZuI,EAAkB,CAClB,IAAMK,EAAU7I,SAAS8I,cAAc,OACvCD,EAAQ/J,UAAUoE,IAAI,WACtB,IAAM6F,EAAW/I,SAAS8I,cAAc,MACxCC,EAASjK,UAAUoE,IAAI,gBACvB,IAAM8F,EAAWhJ,SAAS8I,cAAc,MACxCE,EAASlK,UAAUoE,IAAI,WACvB,IAAM+F,EAAOjJ,SAASkJ,eAAeR,GAC/BS,EAAOnJ,SAASkJ,eAAezO,GACrCuO,EAASI,YAAYD,GACrBJ,EAASK,YAAYH,GACrBJ,EAAQO,YAAYJ,GACpBH,EAAQO,YAAYL,GACpBP,EAAQY,YAAYP,GACpBL,EAAQa,UAAYb,EAAQc,eAI9Bb,EAAiB,SAAC/J,GAChB,GAAkB,KAAdA,EAAE2D,SAA8B,OAAZmG,GAAiC,KAAb5M,EAAiB,CACzD8C,EAAE4D,iBACF,IAAMuG,EAAU7I,SAAS8I,cAAc,OACvCD,EAAQ/J,UAAUoE,IAAI,WACtB,IAAM6F,EAAW/I,SAAS8I,cAAc,MACxCC,EAASjK,UAAUoE,IAAI,YACvB,IAAM8F,EAAWhJ,SAAS8I,cAAc,MACxCE,EAASlK,UAAUoE,IAAI,YACvB,IAAM+F,EAAOjJ,SAASkJ,eAAetN,GAC/BuN,EAAOnJ,SAASkJ,eAAe,OACrCF,EAASI,YAAYD,GACrBJ,EAASK,YAAYH,GACrBJ,EAAQO,YAAYJ,GACpBH,EAAQO,YAAYL,GACpBP,EAAQY,YAAYP,GACpBpL,EAAY,IACZ2F,EAAOa,KAAK,WAAY,CAACE,SAAU3J,EAAckO,QAAS9M,IAC1DoE,SAASC,cAAc,cAAcyG,MAAQ,GAC7C8B,EAAQa,UAAYb,EAAQc,eAIxC,OACI,sBAAKjK,UAAU,gBAAf,UACI,qBAAKA,UAAU,YACf,uBAAOkK,SAAU,SAAC7K,GAAD,OAAOjB,EAAYiB,EAAEE,OAAO8H,QAAQ8C,KAAK,OAAOnK,UAAU,YAAYoK,YAAY,qBCnEhGC,G,OANA,WACX,OACI,iCAAQ,qBAAKrK,UAAU,eC0KhBsK,EAvKF,SAAC,GAA+B,IAA7BvG,EAA4B,EAA5BA,OAAQiF,EAAoB,EAApBA,cAEpB,EAA0HvK,aAAc,SAAA7B,GAAK,MAAK,CAC9IzB,aAAcyB,EAAMzB,aACpBC,aAAcwB,EAAMxB,aACpBH,KAAM2B,EAAM3B,KACZM,uBAAwBqB,EAAMrB,uBAC9BY,UAAWS,EAAMT,UACjBC,cAAeQ,EAAMR,cACrBC,gBAAiBO,EAAMP,gBACvBC,SAAUM,EAAMN,aARZnB,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,aAAcH,EAApC,EAAoCA,KAAMM,EAA1C,EAA0CA,uBAAwBY,EAAlE,EAAkEA,UAAWC,EAA7E,EAA6EA,cAAeC,EAA5F,EAA4FA,gBAAiBC,EAA7G,EAA6GA,SAW7G,EAA4H0H,aAAgB,SAAAC,GAAO,MAAK,CACpJ1G,UAAW0G,EAAQ1G,UACnBH,0BAA2B6G,EAAQ7G,0BACnCV,SAAUuH,EAAQvH,SAClBsB,aAAciG,EAAQjG,aACtBC,iBAAkBgG,EAAQhG,iBAC1BC,mBAAoB+F,EAAQ/F,mBAC5BC,YAAa8F,EAAQ9F,gBAPjBZ,EAAR,EAAQA,UAAWH,EAAnB,EAAmBA,0BAA2BV,EAA9C,EAA8CA,SAAUsB,EAAxD,EAAwDA,aAAcC,EAAtE,EAAsEA,iBAAkBC,EAAxF,EAAwFA,mBAAoBC,EAA5G,EAA4GA,YAY5GgG,qBAAU,WAoBN,OAlBAJ,EAAOK,GAAG,qBAAqB,WAG3BmG,IACAC,YAAW,WACP3H,OAAO4H,MAAM,cACb/N,EAAS,cACV,QAGPqH,EAAOK,GAAG,qBAAqB,WAC3B7G,GAAU,GACVsF,OAAO4H,MAAM,8BACb/N,EAAS,eAGbU,EAA0BsN,YAAYC,EAAyB,MAExD,WACHC,cAAcrP,GACdwI,EAAOU,IAAI,wBACXV,EAAOU,IAAI,qBACXV,EAAOU,IAAI,wBAEjB,IAEFN,qBAAU,WACN,IAAM0G,EAAmBlK,SAASC,cAAc,aAC9B,eAAdzE,EACA0O,EAAiB/K,MAAMqG,YAAY,qBAAnC,WAjCa,oBAiCb,MACO7J,EACPuO,EAAiB/K,MAAMqG,YAAY,qBAAsB,gBAEzD0E,EAAiB/K,MAAMqG,YAAY,qBAAnC,WAA6D/K,EAA7D,iBAEN,CAACkB,EAAUH,IAEbgI,qBAAU,WAEN,IAAMoB,EAAU5E,SAAS8B,iBAAiB,4BACtCqI,EAAQ,EACZ,GAAIxO,EAAU,CAAC,IAAD,gBACSiJ,GADT,IACV,2BAA4B,SACb9F,UAAUC,SAAS,SAC1BoL,GAAS,IAHP,8BAMNA,GAAS,KAET/G,EAAOa,KAAK,YAAazJ,GACzBqP,YAAW,WACP3H,OAAO4H,MAAM,YACb/N,EAAS,cACV,SAGb,CAACJ,IAEH,IAAMqO,EAAuB,uCAAG,gCAAAjF,EAAA,sEAEpBqF,GAAiB,EAFG,SAGDnF,MAAM,oEAAD,OAAqE3K,EAAK4K,WAH9E,WAGlBsC,EAHkB,QAIVpC,GAJU,sBAKd,IAAIC,MAAM,SALI,uBAOImC,EAASlC,OAPb,cAOlB+E,EAPkB,iBAQlBA,EAAclD,SAAQ,SAAAC,GACxB,GAAKA,EAAElC,WAAazK,EAChB,OAAO2P,GAAiB,KAVR,QAanBA,IACDlI,OAAO4H,MAAM,8BACb/N,EAAS,aAfW,kDAkBxBiG,QAAQC,IAAR,MAlBwB,0DAAH,qDAsBvB2H,EAAM,uCAAG,4BAAA7E,EAAA,+EAEWE,MAAM,oDAAqD,CACzEgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAU5K,EAAK4K,aANhB,cAEDC,EAFC,gBASmBA,EAAIG,OATvB,uCAWG,IAAID,MAAM,4BAXb,yDAcPrD,QAAQC,IAAR,MAdO,0DAAH,qDAkBZmB,EAAOK,GAAG,wBAAwB,WAC1BhI,GACA4B,EAAa,kBAEjBE,GAAmB,MAmBvB,OACI,sBAAK8B,UAAU,WAAf,UACI,cAAC,EAAD,CAAY+D,OAAQA,EAAQiF,cAAeA,IAC3C,cAAC,EAAD,CAAWjF,OAAQA,IAEL,eAAd5H,EAEA,qBAAK6D,UAAU,WAAf,SACI,wBAAQH,QAxBM,WACtB,IAD4B,EACtB2C,EAAQ7B,SAAS8B,iBAAiB,SAClCwI,EAAWtK,SAASC,cAAc,aAFZ,cAGX4B,GAHW,IAG5B,2BAAwB,SACf1C,MAAMe,OAAS,WAJI,8BAMxBxE,GACA2B,EAAa,kBACbG,GAAY,IAEZ8M,EAASnL,MAAMoL,QAAU,MAE7BjN,GAAiB,GACjB8F,EAAOa,KAAK,oBAAqBzJ,IAWW6E,UAAU,MAA9C,qBAED,KAEH,cAAC,EAAD,CAAe+D,OAAQA,IACvB,cAAC,EAAD,CAASA,OAAQA,IACjB,cAAC,EAAD,QChIGoH,G,OAtCG,WACd,OACI,qBAAKnL,UAAU,kBAAf,SA2BI,qBAAKA,UAAU,OAAf,SACI,qBAAKA,UAAU,aAAf,SACI,cAAC+E,EAAD,YCkELqG,G,OAjGG,SAAC,GAAgB,IAAdrH,EAAa,EAAbA,OAEjB,EAA2DtF,aAAc,SAAA7B,GAAK,MAAK,CAC/E1B,cAAe0B,EAAM1B,cACrBQ,OAAQkB,EAAMlB,OACdJ,kBAAmBsB,EAAMlB,OACzBT,KAAM2B,EAAM3B,SAJRC,EAAR,EAAQA,cAAeQ,EAAvB,EAAuBA,OAAQJ,EAA/B,EAA+BA,kBAAmBL,EAAlD,EAAkDA,KAOlD,EAAwF+I,aAAgB,SAAAC,GAAO,MAAK,CAChH1G,UAAW0G,EAAQ1G,UACnBJ,qBAAsB8G,EAAQ9G,qBAC9BF,gBAAiBgH,EAAQhH,gBACzBD,gBAAiBiH,EAAQjH,gBACzBN,SAAUuH,EAAQvH,aALda,EAAR,EAAQA,UAAWJ,EAAnB,EAAmBA,qBAAsBF,EAAzC,EAAyCA,gBAAiBD,EAA1D,EAA0DA,gBAAiBN,EAA3E,EAA2EA,SAQ3EyH,qBAAU,WAON,OANAJ,EAAOK,GAAG,sBAAsB,SAAAc,GAC5BjI,EAAgBiI,EAAKmG,YACrBrO,EAAgBkI,EAAKoG,cACrB5O,EAAS,WAGN,WACHqH,EAAOU,IAAI,yBAEhB,IAEHN,qBAAU,WACFzI,GACAyB,EAAqBuN,YAAYa,EAAgB,QAEtD,CAAC7P,IAEJ,IAAM8P,EAAa,uCAAG,sBAAA9F,EAAA,sEAEdkF,cAActP,GAFA,SAGSsK,MAAM,yDAA0D,CACnFgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAU5K,EAAK4K,SACfnK,QAAQ,MARF,iBAWAqK,GAXA,sBAWW,IAAIC,MAAM,qCAXrB,uDAadrD,QAAQC,IAAR,MAbc,yDAAH,qDAiBb6I,EAAe,uCAAG,4BAAA/F,EAAA,+EAEOE,MAAM,yDAA0D,CACnFgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAU5K,EAAK4K,SACfnK,QAASA,MAPD,WAEVyM,EAFU,QAUFpC,GAVE,sBAUS,IAAIC,MAAM,qCAVnB,uBAWYmC,EAASlC,OAXrB,eAaZ1I,GAAW7B,GAbC,kDAgBhBiH,QAAQC,IAAR,MAhBgB,0DAAH,qDAoBf2I,EAAc,uCAAG,8BAAA7F,EAAA,+EAEQE,MAAM,6DAAD,OAA8D3K,EAAK4K,WAFhF,WAETsC,EAFS,QAGDpC,GAHC,sBAGU,IAAIC,MAAM,wBAHpB,uBAIKmC,EAASlC,OAJd,YAITyF,EAJS,0CAML1O,EAAgB0O,EAAM5G,UANjB,yBAOL7H,EAAgByO,EAAM7F,UAPjB,yBAQL2F,IARK,yBASLzH,EAAOa,KAAK,kBAAoB,CAAC+G,eAAgBD,EAAM5G,SAAUwG,aAAcpQ,EAAemQ,WAAYpQ,EAAK4K,WAT1G,yBAULtI,GAAU,GAVL,QAWXb,EAAS,QAXE,0DAcfiG,QAAQC,IAAR,MAde,0DAAH,qDAkBpB,OACI,qBAAK5C,UAAU,qBAAf,SACI,wBAAQH,QAAS4L,EAAiBzL,UAAU,YAA5C,UAAoE,IAAXtE,EAAmB,aAAe,qBCQxFkQ,G,OApGM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,aAAc9H,EAA2B,EAA3BA,OAAQ+F,EAAmB,EAAnBA,KAAMgC,EAAa,EAAbA,OAEhD,EAAqDrN,aAAc,SAAA7B,GAAK,MAAK,CACzEzB,aAAcyB,EAAMzB,aACpBH,MAAO4B,EAAM5B,MACbE,cAAe0B,EAAM1B,cACrBD,KAAM2B,EAAM3B,SAJRE,EAAR,EAAQA,aAAcH,EAAtB,EAAsBA,MAAOE,EAA7B,EAA6BA,cAAeD,EAA5C,EAA4CA,KAO5C,EAAuD+I,aAAgB,SAAAC,GAAO,MAAK,CAC/EhH,gBAAiBgH,EAAQhH,gBACzBD,gBAAiBiH,EAAQjH,gBACzBN,SAAUuH,EAAQvH,aAHdO,EAAR,EAAQA,gBAAiBD,EAAzB,EAAyBA,gBAAiBN,EAA1C,EAA0CA,SAM1CyH,qBAAU,WASN,OARAJ,EAAOK,GAAG,sBAAsB,SAAAc,GAC5BjI,EAAgBiI,EAAKmG,YACrBrO,EAAgBkI,EAAKoG,cACrB5O,EAAS,WAGbqH,EAAOK,GAAG,kBAAkB,SAAAc,GAAI,OAAI6G,EAAa7G,MAE1C,WACHnB,EAAOU,IAAI,sBACXV,EAAOU,IAAI,qBAEjB,IAEFN,qBAAU,WACN,IAAM6H,EAAMrL,SAASC,cAAT,cAA8BkJ,IAC3B,YAAXgC,GAAyBD,IACzBG,EAAIlM,MAAMoL,QAAU,MACpBc,EAAIC,UAAW,EACfD,EAAIE,WAAW,GAAGC,UAAY,YAEpC,CAACL,EAAQD,IAEX,IAAME,EAAe,SAAC7G,GAClB,IAAM8G,EAAMrL,SAASC,cAAT,cAA8BsE,EAAKW,WACjC,aAAV7K,GAAgC,OAARgR,KACH,IAAjBA,EAAIC,WACJD,EAAIlM,MAAMoL,QAAU,MACpBc,EAAIC,UAAW,GAEnBD,EAAIE,WAAW,GAAGC,UAAY,SAC9BnP,EAAgBkI,EAAKJ,YAIvBsH,EAAU,uCAAG,WAAO/M,GAAP,mBAAAqG,EAAA,6DACTY,EAASjH,EAAEE,OAAOU,GADT,kBAGY2F,MAAM,8DAAD,OAA+DU,IAHhF,cAGL6B,EAHK,gBAISA,EAASlC,OAJlB,QAILyB,EAJK,QAKD5C,WACNf,EAAOa,KAAK,cAAe,CAAC1J,cAAeA,EAAe2K,SAAU5K,EAAK4K,SAAUf,SAAU4C,EAAM5C,WACnGzF,EAAEE,OAAO2M,WAAW,GAAGC,UAAY,cACnC9M,EAAEE,OAAOO,MAAMoL,QAAU,MACzB7L,EAAEE,OAAOO,MAAMe,OAAS,UACxBxB,EAAEE,OAAO0M,UAAW,GAVb,kDAaXtJ,QAAQC,IAAR,MAbW,0DAAH,sDA+BhB,OACI,sBAAK3C,GAAI6J,EAAMzC,MAAOyC,EAAM9J,UAAU,cAAtC,UACI,sBAAKA,UAAU,aAAf,UACI,6BAAK8J,IAED+B,GAA2B,WAAXC,EACd,wBAAQG,UAAQ,EAACjM,UAAS,aAAQ8J,EAAR,oBAA1B,qBAEa,WAAXgC,EACE,wBAAQ9L,UAAS,aAAQ8J,EAAR,oBAAgCjK,QAjBjD,SAACR,GACQ,WAAvBA,EAAEE,OAAO8M,UACTD,EAAW/M,GACmB,WAAvBA,EAAEE,OAAO8M,WATH,SAAChN,GAClB0E,EAAOa,KAAK,kBAAoB,CAAC+G,eAAgBxQ,EAAcmQ,aAAcpQ,EAAemQ,WAAYpQ,EAAK4K,WAC7G5I,EAAgBoC,EAAEE,OAAOU,IACzBvD,EAAS,QAOL4P,CAAajN,IAa0EY,GAAI6J,EAA7E,oBACA,wBAAQmC,UAAQ,EAACjM,UAAS,aAAQ8J,EAAR,qBAA1B,wBAGd,qBAAK7J,GAAI6L,EAAQ9L,UAAW8L,SCuKzBS,G,OArQC,SAAC,GAAgB,IAAdxI,EAAa,EAAbA,OAEf,EAAmHtF,aAAc,SAAA7B,GAAK,MAAK,CACvIvB,gBAAiBuB,EAAMvB,gBACvBJ,KAAM2B,EAAM3B,KACZc,WAAYa,EAAMb,WAClBC,aAAcY,EAAMZ,aACpBC,aAAcW,EAAMX,aACpBC,cAAeU,EAAMV,cACrBT,yBAA0BmB,EAAMnB,6BAP5BJ,EAAR,EAAQA,gBAAiBJ,EAAzB,EAAyBA,KAAMc,EAA/B,EAA+BA,WAAYC,EAA3C,EAA2CA,aAAcC,EAAzD,EAAyDA,aAAcC,EAAvE,EAAuEA,cAAeT,EAAtF,EAAsFA,yBAUtF,EAA+HuI,aAAgB,SAAAC,GAAO,MAAK,CACvJ/G,mBAAoB+G,EAAQ/G,mBAC5BU,cAAeqG,EAAQrG,cACvBC,gBAAiBoG,EAAQpG,gBACzBC,gBAAiBmG,EAAQnG,gBACzBC,iBAAkBkG,EAAQlG,iBAC1BT,4BAA6B2G,EAAQ3G,gCANjCJ,EAAR,EAAQA,mBAAoBU,EAA5B,EAA4BA,cAAeC,EAA3C,EAA2CA,gBAAiBC,EAA5D,EAA4DA,gBAAiBC,EAA7E,EAA6EA,iBAAkBT,EAA/F,EAA+FA,4BAW/F6G,qBAAU,WAUN,OATAqI,IAGAzI,EAAOK,GAAG,wBAAwB,WAC9BqI,OAGJnP,EAA4BoN,YAAY+B,EAAkB,MAEnD,WACH1I,EAAOU,IAAI,wBACXmG,cAAcnP,MAEnB,IAIH0I,qBAAU,WACNuI,MACF,CAACxQ,EAAeb,IAKlB,IAAMqR,EAAc,WAChB,IAGIC,EAHEC,EAAiB,GACjBC,EAAY,GACdC,EAAe,GAGnBzR,EAAgByM,SAAQ,SAAAC,GACpB,GAAIA,EAAElC,WAAa5J,EACf4Q,EAAUhO,KAAKkJ,OACZ,CACH,IAAIgF,GAAqB,EACzB7Q,EAAc4L,SAAQ,SAAAkF,GAClB,GAAIA,EAAInH,WAAakC,EAAElC,SACnB,OAAOkH,GAAqB,KAIhCA,GACAH,EAAe/N,KAAKkJ,OAKhC+E,EAAe5Q,EAAc+Q,MAAK,SAACvH,EAAGwH,GAClC,OAAOxH,EAAEG,SAASsH,cAAgBD,EAAErH,SAASsH,cAAgB,GAAK,KAGtER,EAAgBC,EAAeK,MAAK,SAACvH,EAAGwH,GACpC,OAAOxH,EAAEG,SAASsH,cAAgBD,EAAErH,SAASsH,cAAgB,GAAK,KAGlEN,EAAUpJ,OACV7F,EAAciP,EAAUO,OAAON,GAAcM,OAAOT,IAEpD/O,EAAckP,EAAaM,OAAOT,KAIpCF,EAAgB,uCAAG,8BAAA/G,EAAA,+EAEME,MAAM,oEAAD,OAAqE3K,EAAK4K,WAFrF,WAEXsC,EAFW,QAGHpC,GAHG,sBAGQ,IAAIC,MAAM,gCAHlB,uBAIWmC,EAASlC,OAJpB,OAIX+E,EAJW,OAKjBjN,EAAiBiN,GALA,kDAOjBrI,QAAQC,IAAR,MAPiB,0DAAH,qDAchB4J,EAAY,uCAAG,gCAAA9G,EAAA,+EAEUE,MAAM,8DAAD,OAA+D3K,EAAK4K,WAFnF,WAEPsC,EAFO,QAGCpC,GAHD,sBAGY,IAAIC,MAAM,kCAHtB,uBAISmC,EAASlC,OAJlB,UAIP2B,EAJO,SAKL,OAAJ3M,QAAI,IAAJA,GAAA,UAAAA,EAAM2M,eAAN,eAAenE,WAAf,OAAyBmE,QAAzB,IAAyBA,OAAzB,EAAyBA,EAASnE,QALzB,kCAMHvG,EAAmB0K,GANhB,QAOT6E,IAPS,yCASH7O,EAAc,IATX,yBAUHV,EAAmB,IAVhB,QAWTa,EAAiB,IAXR,0DAcb4E,QAAQC,IAAR,MAda,0DAAH,qDAoBZyK,EAAiB,uCAAG,gDAAA3H,EAAA,6DACtB/E,SAASC,cAAc,mBAAmByG,MAAQ,GAC5CiG,EAAc3M,SAASC,cAAc,qBACvC2M,EAAa,GACb9F,EAAiB,GACjB+F,EAAkB,GAClBC,EAAuB,GANL,kBAWA7H,MAAM,qEAAD,OAAsE3K,EAAK4K,WAXhF,WAWZC,EAXY,QAYTC,GAZS,uBAaR,IAAIC,MAAM,iCAbF,yBAeKF,EAAIG,OAfT,WAgBD,QADXC,EAfY,SAgBoB,KAAbA,EAhBP,qBAiBQA,EAASE,MAAM,KACnByB,SAAS5L,GAlBb,uBAmBVqR,EAAYxN,MAAMqG,YAAY,qBAAsB,qCAC9C,IAAIH,MAAM,mCApBN,yBA0BCJ,MAAM,8DAAD,OAA+D3J,IA1BrE,YA0BZiL,EA1BY,QA2BRnB,GA3BQ,uBA4BduH,EAAYxN,MAAMqG,YAAY,qBAAsB,yBAC9C,IAAIH,MAAM,uBA7BF,yBA+BEkB,EAAKjB,OA/BP,YA+BZyB,EA/BY,QAgCR7B,WAAa5K,EAAK4K,SAhCV,uBAiCdyH,EAAYxN,MAAMqG,YAAY,qBAAsB,qCAC9C,IAAIH,MAAM,6BAlCF,YAmCP0B,EAAM7B,SAnCC,oBAoCd0H,EAAa7F,EAAM7B,SACnB4B,EAAiBC,EAAM5C,SAInBwC,EAAa,GACK,OAAlBI,EAAME,SAAsC,KAAlBF,EAAME,UAChCN,EAAaI,EAAME,QAAQxB,MAAM,MAER,OAAzBsB,EAAMgG,gBAAoD,KAAzBhG,EAAMgG,eA7C7B,sBA8CVD,EAAuB/F,EAAMgG,eAAetH,MAAM,MACzByB,SAAS5M,EAAK4K,UA/C7B,uBAgDNyH,EAAYxN,MAAMqG,YAAY,qBAAsB,0CAC9C,IAAIH,MAAM,wCAjDV,YAkDCsB,EAAWO,SAAS5M,EAAK4K,UAlD1B,uBAmDNyH,EAAYxN,MAAMqG,YAAY,qBAAsB,iCAC9C,IAAIH,MAAM,+BApDV,QAsDNyH,EAAqB5O,KAAK5D,EAAK4K,UAC/B2H,EAAkB9F,EAAMgG,eAAeN,OAArB,WAAgCnS,EAAK4K,WAvDjD,oCA0DNyB,EAAWO,SAAS5M,EAAK4K,UA1DnB,uBA2DNyH,EAAYxN,MAAMqG,YAAY,qBAAsB,iCAC9C,IAAIH,MAAM,+BA5DV,QA8DVwH,EAAkBvS,EAAK4K,SACvB4H,EAAuB,CAACxS,EAAK4K,UA/DnB,eAkElByH,EAAYxN,MAAMqG,YAAY,qBAAsB,MAlElC,UAmECP,MAAM,8DAA+D,CACpFgB,OAAQ,MACJC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBC,YAAauG,EACb3H,SAAU0H,MAxEJ,YAmEZtF,EAnEY,QA2ERlC,GA3EQ,uBA4ER,IAAIC,MAAM,kDA5EF,yBA8EMiC,EAAKhC,OA9EX,gBAgFdlC,EAAOa,KAAK,sBAAuB6C,GAhFrB,kDAmFlB9E,QAAQC,IAAR,MAnFkB,0DAAH,qDAgGvB,OACI,sBAAK5C,UAAU,mBAAf,UACI,sBAAKA,UAAU,yBAAf,UACQ,yCACA,uBAAOA,UAAU,eAAekK,SAAU,SAAC7K,GAAD,OAAOxB,EAAgBwB,EAAEE,OAAO8H,QAAQ8C,KAAK,OAAOC,YAAY,wBAElH,sBAAKpK,UAAU,iBAAf,UAGI,qBAAKA,UAAU,uBAAf,SAEIjE,EAAW0H,OAEX,qBAAKzD,UAAU,cAAf,SAMIjE,EAAW4D,KAAI,SAAAoI,GACX,OAAIA,EAAElC,UAAYkC,EAAElC,SAASsH,cAActF,SAAS7L,EAAamR,gBA7BjEQ,EA8BuB5F,EAAE6F,YA7B7BC,KAAKC,MACE,KAAUH,EA6BE,cAAC,EAAD,CAAc9B,aAAc9D,EAAEgG,OAAQhK,OAAQA,EAAyB+F,KAAM/B,EAAElC,SACtFiG,OAAO,UAD2D/D,EAAElC,UAG7D,cAAC,EAAD,CAAcgG,aAAc9D,EAAEgG,OAAQhK,OAAQA,EAAyB+F,KAAM/B,EAAElC,SACtFiG,OAAO,WAD2D/D,EAAElC,UAG9D,KArCf,IAAC8H,OAyCN,oBAAI3N,UAAU,YAAd,0CAGN,sBAAKA,UAAU,YAAf,UACI,oBAAIA,UAAU,gBAAd,0BACA,uBAAOA,UAAU,iBAAiBkK,SAAU,SAAC7K,GAAD,OAAOvB,EAAgBuB,EAAEE,OAAO8H,QAAQ8C,KAAK,OAAOC,YAAY,qBAC5G,wBAAQpK,UAAU,mBAAmBH,QAASwN,EAA9C,qCCnPLW,EAbK,SAAC,GAAoB,EAAnBhF,cAClB,OACA,sBAAKhJ,UAAU,mBAAf,UACI,qBAAKA,UAAU,yBAAf,SACI,2CAEJ,qBAAKA,UAAU,sBAAf,SACI,2ECmDGiO,EA3DD,SAAC,GAAsB,IAArBjF,EAAoB,EAApBA,cAEZ,EAA8CvK,aAAc,SAAA7B,GAAK,MAAK,CAClE1B,cAAe0B,EAAM1B,cACrBU,SAAUgB,EAAMhB,SAChBC,SAAUe,EAAMf,aAHZX,EAAR,EAAQA,cAAeU,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,SAMjC,EAA8CmI,aAAgB,SAAAC,GAAO,MAAK,CACtExG,YAAawG,EAAQxG,YACrBC,YAAauG,EAAQvG,YACrBZ,QAASmH,EAAQnH,YAHbW,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,YAAaZ,EAAlC,EAAkCA,QAM5BoR,EAAQvN,SAASC,cAAc,UAE/BuN,EAAa,uCAAG,WAAO9O,GAAP,iBAAAqG,EAAA,+EAEIE,MAAM,+CAAgD,CACtEgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBnB,SAAUjK,EACVC,SAAUA,EACViJ,SAAU5J,MARA,cAER4K,EAFQ,gBAWMA,EAAIG,OAXV,QAWRyB,EAXQ,QAYJ7B,UACN/I,EAAQ4K,GACRsB,EAAc3J,IACG,gBAAVqI,EACPwG,EAAMpO,MAAMqG,YAAY,kBAAmB,oCAC1B,OAAV+H,GACPA,EAAMpO,MAAMqG,YAAY,kBAAmB,uDAlBjC,kDAqBdxD,QAAQC,IAAR,MArBc,0DAAH,sDA0BnB,OACI,sBAAK5C,UAAU,QAAf,UACI,wCACA,sBAAKA,UAAU,WAAf,UACI,0CACA,uBAAOkK,SAAU,SAAC7K,GAAD,OAAO5B,EAAY4B,EAAEE,OAAO8H,QAAQ8C,KAAK,YAE9D,sBAAKnK,UAAU,WAAf,UACI,0CACA,uBAAOkK,SAAU,SAAC7K,GAAD,OAAO3B,EAAY2B,EAAEE,OAAO8H,QAAQ8C,KAAK,gBAE9D,wBAAQnK,UAAU,WAAWqH,MAAM,QAAQxH,QAASsO,EAApD,mBACA,wBAAQ9G,MAAM,eAAexH,QAASmJ,EAAehJ,UAAU,eAA/D,0BCWGoO,EAjEE,SAAC,GAAuB,IAArBpF,EAAoB,EAApBA,cAEhB,EAA8CvK,aAAc,SAAA7B,GAAK,MAAK,CAClE1B,cAAe0B,EAAM1B,cACrBU,SAAUgB,EAAMhB,SAChBC,SAAUe,EAAMf,aAHZX,EAAR,EAAQA,cAAeU,EAAvB,EAAuBA,SAAUC,EAAjC,EAAiCA,SAMjC,EAA8CmI,aAAgB,SAAAC,GAAO,MAAK,CACtExG,YAAawG,EAAQxG,YACrBC,YAAauG,EAAQvG,YACrBZ,QAASmH,EAAQnH,YAHbW,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,YAAaZ,EAAlC,EAAkCA,QAM5BuR,EAAW1N,SAASC,cAAc,aAkCxC,OACI,sBAAKZ,UAAU,WAAf,UACI,0CACA,sBAAKA,UAAU,WAAf,UACI,0CACA,uBAAOkK,SAAU,SAAC7K,GAAD,OAAO5B,EAAY4B,EAAEE,OAAO8H,QAAQ8C,KAAK,YAE9D,sBAAKnK,UAAU,WAAf,UACI,0CACA,uBAAOkK,SAAU,SAAC7K,GAAD,OAAO3B,EAAY2B,EAAEE,OAAO8H,QAAO8C,KAAK,gBAE7D,wBAAQnK,UAAU,cAAcqH,MAAM,WAAWxH,QA3ChC,SAACR,GAClBzD,EAAS6H,OAAS,EAClB4K,EAASvO,MAAMqG,YAAY,kBAAmB,4CACvCvK,EAAS6H,OAAS,GACzB4K,EAASvO,MAAMqG,YAAY,kBAAmB,gDACvCtK,EAAS4H,OAAS,EACzB4K,EAASvO,MAAMqG,YAAY,kBAAmB,4CAE9CP,MAAM,kDAAmD,CACvDgB,OAAQ,OACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACnBnB,SAAUjK,EACVC,SAAUA,EACViJ,SAAU5J,MAGboT,MAAK,SAAAnG,GAAQ,OAAIA,EAASlC,UAC1BqI,MAAK,SAAA5G,GACAA,EAAM7B,UACR/I,EAAQ4K,GACRsB,EAAc3J,IACK,gBAAVqI,EACT2G,EAASvO,MAAMqG,YAAY,kBAAmB,oCAEpCuB,EAAM3B,IACZsI,EAASvO,MAAMqG,YAAY,kBAAmB,yCAiBtD,sBACA,wBAAQkB,MAAM,YAAYxH,QAASmJ,EAAehJ,UAAU,eAA5D,uBCTGuO,EAhDK,SAAC,GAA+B,IAA7BvF,EAA4B,EAA5BA,cAAejF,EAAa,EAAbA,OAE1BjI,EAAY2C,aAAc,SAAA7B,GAAK,MAAK,CACxCd,QAASc,EAAMd,YADXA,QAIA6B,EAAeqG,aAAgB,SAAAC,GAAO,MAAK,CAC/CtG,WAAYsG,EAAQtG,eADhBA,WAIRwG,qBAAU,WACNqK,MACF,IAEF,IAAMA,EAAa,uCAAG,kCAAA9I,EAAA,sDACZ+I,EAAU,GACP9P,EAAI,EAFK,YAEFA,EAAI,GAFF,iCAGSiH,MAAM,6DAAD,OAA8DjH,IAH5E,WAGRwJ,EAHQ,QAIApC,GAJA,sBAKJ,IAAIC,MAAM,SALN,wBAOMmC,EAASlC,OAPf,QAORyB,EAPQ,OAQd+G,EAAQ5P,KAAK,CAACiL,KAAMpC,EAAM7B,SAAU6I,KAAMhH,EAAMgH,OARlC,QAEK/P,IAFL,uBAUlBhB,EAAW8Q,GAVO,4CAAH,qDAanB,OACI,qCACI,cAAC,EAAD,CAAYzF,cAAeA,EAAejF,OAAQA,IAElDjI,EAAQ2H,OAER,qBAAKzD,UAAU,mBAAf,SACI,qBAAKA,UAAU,UAAf,SAEIlE,EAAQ6D,KAAI,SAAAgP,GACR,OAAO,qBAAsB3O,UAAU,WAAhC,cAA6C2O,EAAO7E,KAApD,MAA4D,sBAAM9J,UAAU,OAAhB,SAAwB2O,EAAOD,OAA3F,WAASC,EAAO7E,aAKjC,S,SC9CD/F,E,MAAS6K,GAAG,0C,4BCsUVC,MArTf,WAAgB,IAAD,EACX,EAAwKpQ,aAAc,SAAA7B,GAAK,MAAK,CAC5LnB,yBAA0BmB,EAAMnB,yBAChCT,MAAO4B,EAAM5B,MACbC,KAAM2B,EAAM3B,KACZE,aAAcyB,EAAMzB,aACpBG,kBAAmBsB,EAAMtB,kBACzBC,uBAAwBqB,EAAMrB,uBAC9BG,OAAQkB,EAAMlB,OACdF,wBAAyBoB,EAAMpB,wBAC/BgB,WAAYI,EAAMJ,WAClBC,eAAgBG,EAAMH,mBAVlBhB,EAAR,EAAQA,yBAA0BT,EAAlC,EAAkCA,MAAOC,EAAzC,EAAyCA,KAAME,EAA/C,EAA+CA,aAAcG,EAA7D,EAA6DA,kBAAmBC,EAAhF,EAAgFA,uBAAwBG,EAAxG,EAAwGA,OAAQF,EAAhH,EAAgHA,wBAahH,GAbA,EAAyIgB,WAAzI,EAAqJC,eAa0CuH,aAAgB,SAAAC,GAAO,MAAK,CACvNvH,SAAUuH,EAAQvH,SAClBI,QAASmH,EAAQnH,QACjBC,iBAAkBkH,EAAQlH,iBAC1BQ,UAAW0G,EAAQ1G,UACnBF,2BAA4B4G,EAAQ5G,2BACpCgB,cAAe4F,EAAQ5F,cACvBC,kBAAmB2F,EAAQ3F,kBAC3BV,cAAeqG,EAAQrG,cACvBV,mBAAoB+G,EAAQ/G,mBAC5Ba,iBAAkBkG,EAAQlG,iBAC1BD,gBAAiBmG,EAAQnG,qBAXrBpB,EAAR,EAAQA,SAAUI,EAAlB,EAAkBA,QAASC,EAA3B,EAA2BA,iBAAkBQ,EAA7C,EAA6CA,UAAWF,EAAxD,EAAwDA,2BAA8DO,GAAtH,EAAoFS,cAApF,EAAmGC,kBAAnG,EAAsHV,eAAeV,EAArI,EAAqIA,mBAAoBa,EAAzJ,EAAyJA,iBAAkBD,EAA3K,EAA2KA,gBAcrKkL,EAAa,uCAAG,WAAO3J,GAAP,SAAAqG,EAAA,2DACXrG,EAAEE,OAAO8H,MADE,OAET,WAFS,OAST,iBATS,OAYT,cAZS,OAeT,WAfS,QAkBT,oBAlBS,QAqBT,UArBS,QAwBT,aAxBS,QA2BT,SA3BS,+BAGV,OAAIpM,QAAJ,IAAIA,OAAJ,EAAIA,EAAM4K,WACNtI,GAAU,GAGdb,EAAS,SAPC,mCAUVA,EAAS,YAVC,mCAaVA,EAAS,SAbC,oCAgBVA,EAAS,YAhBC,oCAmBVA,EAAS,eAnBC,4CAyBVA,EAAS,YAzBC,oCA4BV,OAAIzB,QAAJ,IAAIA,OAAJ,EAAIA,EAAM4K,WACNtI,GAAU,GAEdb,EAAS,QA/BC,8BAkCV,OAAIzB,QAAJ,IAAIA,OAAJ,EAAIA,EAAM4K,WACNtI,GAAU,GAGdb,EAAS,SAtCC,4CAAH,sDA0Cb8O,EAAa,uCAAG,sBAAA9F,EAAA,+EAEQE,MAAM,yDAA0D,CACnFgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAQ,OAAE5K,QAAF,IAAEA,OAAF,EAAEA,EAAM4K,SAChBnK,QAAQ,MAPD,iBAUDqK,GAVC,sBAUU,IAAIC,MAAM,qCAVpB,uDAYfrD,QAAQC,IAAR,MAZe,yDAAH,qDAgBbkM,EAAgB,uCAAG,sBAAApJ,EAAA,+EAEME,MAAM,4DAA6D,CACtFgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAQ,OAAE5K,QAAF,IAAEA,OAAF,EAAEA,EAAM4K,aANP,iBASHE,GATG,sBAUP,IAAIC,MAAM,SAVH,uDAajBrD,QAAQC,IAAR,MAbiB,yDAAH,qDAiBtBuB,qBAAU,WAKN,OAJAJ,EAAOK,GAAG,WAAW,WACjBrH,EAAiBgH,EAAO9D,OAGrB,WACH8D,EAAOU,IAAI,cAEhB,IAEHN,qBAAU,WAAO,IAAD,EASZ,OARA,OAAIlJ,QAAJ,IAAIA,GAAJ,UAAIA,EAAM4K,gBAAV,aAAI,EAAgBpC,SAChB+H,IACAuD,GAAmB,GACnB1R,EAA2BqN,YAAYoE,EAAkB,OAEzDlE,cAAcpP,GAGX,WACHoP,cAAcpP,MAEnB,QAACP,QAAD,IAACA,OAAD,EAACA,EAAM4K,WAEV1B,qBAAU,YACDzI,GAAUJ,EAAoB,IAC/BsP,cAActP,GACdkQ,OAEL,CAAC9P,IAEJyI,qBAAU,WAIE,IAAD,EAHO,SAAVnJ,GACA+T,GAAmB,GACnBnE,cAActP,MAEd,OAAIL,QAAJ,IAAIA,GAAJ,UAAIA,EAAM4K,gBAAV,aAAI,EAAgBpC,SAChBsL,GAAmB,GAEvBnE,cAAcrP,IAGH,UAAVP,GAAiC,aAAVA,IACxB8B,EAAQ,MACR8N,cAAcnP,GACdmC,EAAc,IACdV,EAAmB,IACnBa,EAAiB,IACjBD,EAAgB,OAErB,CAAC9C,IAGJ,IAAM+T,EAAkB,uCAAG,WAAOC,GAAP,SAAAtJ,EAAA,+EAEIE,MAAM,mDAAoD,CAC7EgB,OAAQ,MACRC,QAAS,CAAC,eAAgB,oBAC1BC,KAAMC,KAAKC,UAAU,CACjBnB,SAAQ,OAAE5K,QAAF,IAAEA,OAAF,EAAEA,EAAM4K,SAChBoJ,SAAUD,MAPC,iBAULjJ,GAVK,sBAWT,IAAIC,MAAM,SAXD,uDAcnBrD,QAAQC,IAAR,MAdmB,yDAAH,sDA0FxB,OAnCAC,OAAOP,iBAAiB,gBAAgB,SAACjD,GACrCA,EAAE4D,kBACF,OAAIhI,QAAJ,IAAIA,OAAJ,EAAIA,EAAM4K,YACN2F,IACAuD,GAAmB,IAET,SAAV/T,GACA+I,EAAOa,KAAK,iBAAkBzJ,GAGlCkE,EAAE6P,YAAc,MAGpBvO,SAASwO,UAAY,SAAC9P,GAClB,IAQyE,QARnE+P,EAAWzO,SAASC,cAAc,aAClCyO,EAAc1O,SAASC,cAAc,gBACrC0O,EAAc3O,SAASC,cAAc,8BACrC2O,EAAmB5O,SAASC,cAAc,iCAC1C4O,EAAc7O,SAASC,cAAc,8BACrC6O,EAAmB9O,SAASC,cAAc,iCAC1C8O,EAAmB/O,SAASC,cAAc,qBAEhC,UAAXvB,EAAEsQ,MAAgC,UAAV3U,GAA+B,aAAVA,EAO3B,UAAXqE,EAAEsQ,MAAgC,aAAV3U,IAChCqE,EAAE4D,iBACFyM,EAAiBE,UARjBvQ,EAAE4D,mBACc,OAAXqM,QAAW,IAAXA,GAAA,UAAAA,EAAajI,aAAb,eAAoB5D,UAApB,OAA8B+L,QAA9B,IAA8BA,GAA9B,UAA8BA,EAAanI,aAA3C,aAA8B,EAAoB5D,UAA4B,OAAhB8L,QAAgB,IAAhBA,GAAA,UAAAA,EAAkBlI,aAAlB,eAAyB5D,UAAzB,OAAmCgM,QAAnC,IAAmCA,GAAnC,UAAmCA,EAAkBpI,aAArD,aAAmC,EAAyB5D,WACjH,UAAVzI,EACEoU,EAASQ,QACTP,EAAYO,WASZ,UAAV5U,GAA+B,aAAVA,EAErB,sBAAKgF,UAAU,aAAf,UACI,cAAC,EAAD,CAAY+D,OAAQA,EAAQiF,cAAeA,IAC3C,cAAC,EAAD,CAAaA,cAAeA,IAC5B,qBAAKhJ,UAAU,WAAf,SACI,8CAEJ,qBAAKA,UAAU,SAAf,SAEkB,UAAVhF,EACE,cAAC,EAAD,CAAOgO,cAAeA,IACtB,cAAC,EAAD,CAAUA,cAAeA,MAGnC,cAAC,EAAD,OAGJ,mCAEc,aAAVhO,GAAkC,gBAAVA,GAEhB,OAAJC,QAAI,IAAJA,GAAA,UAAAA,EAAM4K,gBAAN,eAAgBpC,QAEhB,qCACI,sBAAKzD,UAAS,yBAA8B,gBAAVhF,EAA0B,OAAS,MAArE,UACI,cAAC,EAAD,CAAY+I,OAAQA,EAAQiF,cAAeA,IAC3C,cAAC,EAAD,CAASjF,OAAQA,IACjB,sBAAK/D,UAAU,gBAAf,UACI,cAAC,EAAD,CAAW+D,OAAQA,IACnB,cAAC,EAAD,OAEJ,cAAC,EAAD,OAEJ,sBAAK/D,UAAS,sBAA2B,aAAVhF,EAAuB,OAAS,MAA/D,UACI,cAAC,EAAD,CAAagO,cAAeA,EAAejF,OAAQA,IACnD,cAAC,EAAD,UAIR,sBAAK/D,UAAS,cAAd,UACI,cAAC,EAAD,CAAagJ,cAAeA,EAAejF,OAAQA,IACnD,cAAC,EAAD,OAEN,cAAC,EAAD,CAAMA,OAAQA,EAAQiF,cAAeA,OCzSpC6G,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBzB,MAAK,YAAkD,IAA/C0B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCIRO,EAAQC,YAAY1V,GAE1B2V,IAASC,OACP,cAAC,IAAD,CAAeH,MAAOA,EAAtB,SACM,cAAC,EAAD,MAEN1P,SAAS4D,eAAe,SAM1BsL,M","file":"static/js/main.adece2ae.chunk.js","sourcesContent":["import { action, persist } from 'easy-peasy';\r\n\r\nconst model = {\r\n\r\n    //State\r\n\r\n    stored: persist(\r\n        {\r\n            \r\n        },\r\n        {\r\n            storage: 'localStorage',\r\n        }\r\n\r\n    ),\r\n\r\n    route: 'login',\r\n    user: null,\r\n    currentSocket: null,\r\n    friendSocket: null,\r\n    opponentName: '',\r\n    unsortedFriends: [],\r\n    findMatchInterval: 0,\r\n    checkOppStatusInterval: 0,\r\n    updatLastOnlineInterval: 0,\r\n    getOnlineFriendsInterval: 0,\r\n    search: false,\r\n    friendRequests: [],\r\n    userName: '',\r\n    password: '',\r\n    topFive: [],\r\n    allFriends: [],\r\n    friendFilter: '',\r\n    friendSearch: '',\r\n    friendsOnline: [],\r\n    gameRoute: 'placeShips',\r\n    playerIsReady: false,\r\n    opponentIsReady: false,\r\n    yourTurn: false,\r\n    chatText: '',\r\n    inviteSent: false,\r\n    inviteReceived: false,\r\n\r\n    //Actions\r\n\r\n    setRoute: action((state, input) => {\r\n        state.route = input;\r\n    }),\r\n\r\n    setUser: action((state, input) => {\r\n        state.user = input;\r\n    }),\r\n\r\n    setCurrentSocket: action((state, input) => {\r\n        state.currentSocket = input;\r\n    }),\r\n\r\n    setFriendSocket: action((state, input) => {\r\n        state.friendSocket = input;\r\n    }),\r\n\r\n    setOpponentName: action((state, input) => {\r\n        state.opponentName = input;\r\n    }),\r\n\r\n    setUnsortedFriends: action((state, input) => {\r\n        state.unsortedFriends = input;\r\n    }),\r\n\r\n    setFindMatchInterval: action((state, input) => {\r\n        state.findMatchInterval = input;\r\n    }),\r\n\r\n    setCheckOppStatusInterval: action((state, input) => {\r\n        state.checkOppStatusInterval = input;\r\n    }),\r\n\r\n    setUpdatLastOnlineInterval: action((state, input) => {\r\n        state.updatLastOnlineInterval = input;\r\n    }),\r\n\r\n    setGetOnlineFriendsInterval: action((state, input) => {\r\n        state.getOnlineFriendsInterval = input;\r\n    }),\r\n\r\n    setSearch: action((state, input) => {\r\n        state.search = input;\r\n    }),\r\n\r\n    setFriendRequests: action((state, input) => {\r\n        state.friendRequests = input;\r\n    }),\r\n\r\n    setUserName: action((state, input) => {\r\n        state.userName = input;\r\n    }),\r\n\r\n    setPassword: action((state, input) => {\r\n        state.password = input;\r\n    }),\r\n\r\n    setTopFive: action((state, input) => {\r\n        state.topFive = input;\r\n    }),\r\n\r\n    setAllFriends: action((state, input) => {\r\n        state.allFriends = input;\r\n    }),\r\n\r\n    setFriendFilter: action((state, input) => {\r\n        state.friendFilter = input;\r\n    }),\r\n\r\n    setFriendSearch: action((state, input) => {\r\n        state.friendSearch = input;\r\n    }),\r\n\r\n    setFriendsOnline: action((state, input) => {\r\n        state.friendsOnline = input;\r\n    }),\r\n\r\n    setGameRoute: action((state, input) => {\r\n        state.gameRoute = input;\r\n    }),\r\n    \r\n    setPlayerIsReady: action((state, input) => {\r\n        state.playerIsReady = input;\r\n    }),\r\n\r\n    setOpponentIsReady: action((state, input) => {\r\n        state.opponentIsReady = input;\r\n    }),\r\n\r\n    setYourTurn: action((state, input) => {\r\n        state.yourTurn = input;\r\n    }),\r\n\r\n    setChatText: action((state, input) => {\r\n        state.chatText = input;\r\n    }),\r\n\r\n    setInviteSent: action((state, input) => {\r\n        state.inviteSent = input;\r\n    }),\r\n\r\n    setInviteReceived: action((state, input) => {\r\n        state.inviteReceived = input;\r\n    }),\r\n}\r\n\r\nexport default model;","import React from 'react';\r\nimport { useStoreState } from 'easy-peasy';\r\n\r\nimport './board.css';\r\n\r\nconst AssembleBoard = ({ onSquareClicked }) => {\r\n\r\n    const { gameRoute } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute,\r\n        route: state.route\r\n    }));\r\n\r\n    const allSquares = [];\r\n    for (let i = 1; i < 11; i++) {\r\n        for (let j = 0; j < 10; j++) {\r\n            allSquares.push({row: String.fromCharCode(97 + j), col: i, colStart: i, rowStart: j + 1})\r\n        }\r\n    }\r\n\r\n    const handleSquareClick = (e) => {\r\n        const parentBoard = e.target.parentElement.parentElement.parentElement;\r\n        if (gameRoute === 'gameInProgress' && parentBoard.classList.contains('opponentBoard')) {\r\n            onSquareClicked(e);\r\n        }\r\n    }\r\n\r\n    return (\r\n        allSquares.map(square => {\r\n            return (\r\n                <div\r\n                    onClick={handleSquareClick}\r\n                    style={{gridArea: square.row + square.col}}\r\n                    className={'singleSquare ' + square.row + ' ' + square.row + square.col}\r\n                    key={square.row + square.col}\r\n                    id={square.colStart + '-' + square.rowStart}\r\n                >\r\n                </div>\r\n            )\r\n        })\r\n    )\r\n}\r\n\r\nexport default AssembleBoard;\r\n","import { useStoreState } from 'easy-peasy';\r\nimport $ from 'jquery';\r\nimport './ships.css';\r\nimport '../boards/board.css';\r\n\r\nconst Ships = () => {\r\n\r\n    const { gameRoute } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute\r\n    }));\r\n\r\n    let rotating = false;\r\n    let orientation = 'hor';\r\n    let selectedShip = '';\r\n    let selectedShipName = '';\r\n    let shipIsSelected = false;\r\n    let setManualGridLocation = false;\r\n\r\n    // Decide what happens when a ship is selected to move\r\n\r\n    const onShipSelect = (e) => {\r\n        if (!shipIsSelected && gameRoute === 'placeShips') {\r\n            const userBoard = document.querySelector('.userBoard');\r\n            shipIsSelected = true;\r\n            selectedShip = e.target.parentElement;\r\n            userBoard.style.cursor = 'pointer';\r\n            selectedShip.style.zIndex = '-2';\r\n            // selectedShip.style.backgroundColor = 'rgba(0,0,0,0.2)';\r\n            selectedShip.style.border = '2px solid rgba(0, 250, 0, 0.5)';\r\n\r\n            if (parseInt(e.target.parentElement.offsetWidth) > parseInt(e.target.parentElement.offsetHeight)) {\r\n                orientation = 'hor';\r\n            } else if (parseInt(e.target.parentElement.offsetHeight) > parseInt(e.target.parentElement.offsetWidth)) {\r\n                orientation = 'vert';\r\n            }\r\n\r\n            if (selectedShip.classList.contains('carrier')) {\r\n                selectedShipName = 'carrier';\r\n            } else if (selectedShip.classList.contains('battleship')) {\r\n                selectedShipName = 'battleship';\r\n            } else if (selectedShip.classList.contains('cruiser')) {\r\n                selectedShipName = 'cruiser';\r\n            } else if (selectedShip.classList.contains('submarine')) {\r\n                selectedShipName = 'submarine';\r\n            } else if (selectedShip.classList.contains('destroyer')) {\r\n                selectedShipName = 'destroyer';\r\n            }\r\n        }\r\n    }\r\n\r\n    // collision detection\r\n\r\n    const collisionDetection = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    // Place a ship down that is currently selected\r\n\r\n    document.addEventListener('click', e => {\r\n        if (shipIsSelected && e.target.classList.contains('singleSquare') && rotating === false && areaIsClear()) {\r\n            selectedShip.style.zIndex = '3';\r\n            document.querySelector('.userBoard').style.cursor = 'default';\r\n            // selectedShip.style.backgroundColor = null;\r\n            selectedShip.style.border = null;\r\n            shipIsSelected = false;\r\n        }\r\n    })\r\n\r\n    // Locate opponents shot on user board\r\n\r\n    // const matchOppShotToBoard = () => {\r\n    //     if\r\n    // }\r\n\r\n    // Check to see if player is placing the ship in an open space\r\n\r\n    const areaIsClear = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n         for (let ship of ships) {\r\n            if (!ship.classList.contains(selectedShipName) && collisionDetection(selectedShip, ship)) {\r\n                console.log(ship.className);\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // Rotate the selected ship by right-clicking\r\n\r\n    window.oncontextmenu = (e) => {\r\n         if (shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    // Decide what happens on various key-press events\r\n\r\n    document.addEventListener('keydown', (e) => {\r\n        if (e.keyCode === 13) {\r\n            e.preventDefault();\r\n        }\r\n        // Rotate the selected ship by pressing the 'space' key\r\n\r\n        if (e.keyCode === 32 && selectedShip.style !== undefined && shipIsSelected) {\r\n            if (orientation === 'hor') {\r\n                selectedShip.style.transform = 'rotate(-90deg)';\r\n                orientation = 'vert';\r\n            } else if (orientation === 'vert') {\r\n                selectedShip.style.transform = 'rotate(0deg)';\r\n                orientation = 'hor';\r\n            }\r\n            setManualGridLocation = true;\r\n            rotating = true;\r\n        }\r\n    })\r\n\r\n    // Change the grid-row and grid-column of the selected ship mouse is over the user's board\r\n\r\n    window.onmouseover = (e) => {\r\n        // const sub = document.querySelector(`.submarine`);\r\n        if (shipIsSelected) {\r\n            rotating = false;\r\n            selectedShip.style.transform = null;\r\n            const userGrid = document.querySelector('.userBoard');\r\n            const childShip = document.querySelector(`.${selectedShipName}Icon`);\r\n            const targetId = e.target.id;\r\n            const colStart = targetId.substring(0, targetId.indexOf('-'));\r\n            const rowStart = targetId.substring((targetId.indexOf('-') + 1), targetId.length);\r\n\r\n\r\n            if (userGrid.contains(e.target)\r\n            && (e.target.classList.contains('singleSquare'))\r\n            && shipIsSelected === true) {\r\n                if (orientation === 'hor') {\r\n                    childShip.classList.remove(`rotate-${selectedShipName}`);\r\n                    if (colStart < (11 - parseInt(selectedShip.id) + 1)) {\r\n                        selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + parseInt(selectedShip.id)}`;\r\n                    } else if (colStart >= (11 - parseInt(selectedShip.id) + 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridColumn = `11 / ${11 - parseInt(selectedShip.id)}`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridRow = `${rowStart} / ${parseInt(rowStart) + 1}`;\r\n                } else if (orientation === 'vert') {\r\n                    childShip.classList.add(`rotate-${selectedShipName}`);\r\n                    if (rowStart > (parseInt(selectedShip.id) - 1)) {\r\n                        selectedShip.style.gridRow = `${parseInt(rowStart) + 1} / ${parseInt(rowStart) - parseInt(selectedShip.id) + 1}`;\r\n                    } else if (rowStart <= (parseInt(selectedShip.id) - 1) && setManualGridLocation === true) {\r\n                        selectedShip.style.gridRow = `${parseInt(selectedShip.id) + 1} / 1`;\r\n                    } else setManualGridLocation = false;\r\n                    selectedShip.style.gridColumn = `${colStart} / ${parseInt(colStart) + 1}`;\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <div id='5' className='ship carrier'><div onClick={onShipSelect} className='carrierIcon'></div></div>\r\n\r\n            <div id='4' className='ship battleship'><div onClick={onShipSelect} className='battleshipIcon'></div></div>\r\n\r\n            <div id='3' className='ship cruiser'><div onClick={onShipSelect} className='cruiserIcon'></div></div>\r\n\r\n            <div id='3' className='ship submarine'><div onClick={onShipSelect} className='submarineIcon'></div></div>\r\n\r\n            <div id='2' className='ship destroyer'><div onClick={onShipSelect} className='destroyerIcon'></div></div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Ships;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport Board from './Board';\r\nimport Ships from '../ships/Ships';\r\n// import useSound from 'use-sound';\r\n// import hitMissSounds from './hit-miss-sounds.mp3';\r\nimport $ from 'jquery';\r\nimport './board.css';\r\n\r\nconst UserBoard = ({ socket }) => {\r\n\r\n    const { gameRoute, friendSocket, route } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute,\r\n        friendSocket: state.friendSocket,\r\n        route: state.route\r\n    }));\r\n\r\n    const { setYourTurn } = useStoreActions(actions => ({\r\n        setYourTurn: actions.setYourTurn\r\n    }));\r\n\r\n    let shipHit = '';\r\n    // const [play] = useSound(hitMissSounds, {\r\n    //     soundEnabled: true,\r\n    //     volume: 0.5,\r\n    //     sprite: {\r\n    //         miss: [1, 2000],\r\n    //         hit: [2001, 1500]\r\n    //     }\r\n    // });\r\n    useEffect(() => {\r\n        socket.on('receive shot', shot => {\r\n            const oppShot = document.getElementById(shot);\r\n            applyHitOrMiss(oppShot);\r\n            setYourTurn(true);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive shot');\r\n        }\r\n    },[])\r\n\r\n    const hit = (item1, item2) => {\r\n        let d1Offset = $(item1).offset();\r\n        let d1Height = $(item1).outerHeight(true);\r\n        let d1Width = $(item1).outerWidth(true);\r\n        let d1Top = d1Offset.top + d1Height;\r\n        let d1Left = d1Offset.left + d1Width;\r\n        let d2Offset = $(item2).offset();\r\n        let d2Height = $(item2).outerHeight(true);\r\n        let d2Width = $(item2).outerWidth(true);\r\n        let d2Top = d2Offset.top + d2Height;\r\n        let d2Left = d2Offset.left + d2Width;\r\n\r\n        const colliding = !(d1Top <= d2Offset.top + 2 || d1Offset.top >= d2Top - 2 || d1Left <= d2Offset.left + 2 || d1Offset.left >= d2Left - 2);\r\n\r\n        return colliding;\r\n    }\r\n\r\n    const applyHitOrMiss = (oppShot) => {\r\n        if (matchOppShotToBoard(oppShot)) {\r\n            // play({id: 'hit'});\r\n            // setTimeout(() => {\r\n                oppShot.classList.add('hit');\r\n            // }, 300)\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'hit', socketid: friendSocket, shipHit: shipHit});\r\n        } else {\r\n            // play({id: 'miss'});\r\n            // setTimeout(() => {\r\n                oppShot.classList.add('miss');\r\n            // }, 300)\r\n            socket.emit('send result to opponent board', {shotSquare: oppShot.id, shot: 'miss', socketid: friendSocket, shipHit: shipHit});\r\n        }\r\n    }\r\n\r\n    const matchOppShotToBoard = (shot) => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        for (let ship of ships) {\r\n            if (hit(shot, ship)) {\r\n                shipHit = ship.classList[1];\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    return (\r\n        <div className='board userBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board gameRoute={gameRoute} />\r\n                    <Ships gameRoute={gameRoute} route={route}/>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default UserBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport Board from './Board';\r\nimport './board.css';\r\n\r\nconst OpponentBoard = ({ socket }) => {\r\n\r\n    const { gameRoute, friendSocket, route, yourTurn } = useStoreState(state => ({\r\n        gameRoute: state.gameRoute,\r\n        friendSocket: state.friendSocket,\r\n        route: state.route,\r\n        yourTurn: state.yourTurn\r\n    }));\r\n\r\n    const { setYourTurn } = useStoreActions(actions => ({\r\n        setYourTurn: actions.setYourTurn\r\n    }));\r\n    \r\n    \r\n    const hitSquares = [];\r\n    const countHitsOnShip = (ship) => {\r\n        let count = 0;\r\n        for (let hit of hitSquares) {\r\n            if (hit === ship) {\r\n                count += 1;\r\n            }\r\n        }\r\n        return count;\r\n    }\r\n\r\n    useEffect(() => {\r\n        socket.on('show result on opponent board', data => {\r\n            const clickedSquare = document.querySelector(`.opponentBoard [id='${data.shotSquare}']`);\r\n            if (data.result === 'hit' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('hit');\r\n                hitSquares.push(data.shipHit);\r\n                clickedSquare.classList.add(`_${data.shipHit}`)\r\n                if (countHitsOnShip(data.shipHit) === parseInt(document.querySelector(`.${data.shipHit}`).id)) {\r\n                    const squares = document.querySelectorAll('.singleSquare');\r\n                    for (let square of squares) {\r\n                        if (square.classList.contains(`_${data.shipHit}`)) {\r\n                            square.classList.add('shipSunk');\r\n                        }\r\n                    }\r\n                }\r\n            } else if (data.result === 'miss' && clickedSquare.classList !== undefined) {\r\n                clickedSquare.classList.add('miss');\r\n            }\r\n        })\r\n\r\n        return () => {\r\n            socket.off('show result on opponent board');\r\n        }\r\n    },[])\r\n\r\n    const onSquareClicked = (e) => {\r\n        if (yourTurn && !e.target.classList.contains('hit') && !e.target.classList.contains('miss')) {\r\n            // setSquareClicked(e.target);\r\n            socket.emit('send shot to opponent', {target: e.target.id, socketid: friendSocket});\r\n            setYourTurn(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='board opponentBoard'>\r\n            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board gameRoute={gameRoute} route={route} onSquareClicked={onSquareClicked} />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default OpponentBoard;\r\n\r\n","export default __webpack_public_path__ + \"static/media/msg-icon.b63e7a13.png\";","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './navigation.css';\r\nimport msgIcon from './msg-icon.png';\r\nimport { Dropdown } from 'react-bootstrap';\r\n\r\nconst FriendRequests = ({ socket }) => {\r\n\r\n    const { user, friendRequests } = useStoreState(state => ({\r\n        user: state.user,\r\n        friendRequests: state.friendRequests\r\n    }));\r\n\r\n    const { setUnsortedFriends, setFriendRequests } = useStoreActions(actions => ({\r\n        setUnsortedFriends: actions.setUnsortedFriends,\r\n        setFriendRequests: actions.setFriendRequests\r\n    }));\r\n\r\n    useEffect(() => {\r\n        updateRequests();\r\n\r\n        socket.on('receive friend request', () => {\r\n            updateRequests();\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive friend request');\r\n        }\r\n    },[])\r\n\r\n    const updateRequests = async () => {\r\n        const navBar = document.querySelector('nav');\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                navBar.style.setProperty('--notification-color', 'rgba(255,0,0,0.8)');\r\n                setFriendRequests(requests.split(','));\r\n            } else {\r\n                navBar.style.setProperty('--notification-color', 'transparent');\r\n                setFriendRequests(null);\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    const removeRequest = async (friend) => {\r\n        let newRequestList = '';\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const newRequestListArray = requests.split(',');\r\n                if (newRequestListArray.length <= 1) {\r\n                    newRequestList = null;\r\n                } else {\r\n                    const index = newRequestListArray.indexOf(friend);\r\n                    if (index > -1) {\r\n                        newRequestListArray.splice(index, 1);\r\n                        newRequestList = newRequestListArray.join(',');\r\n                    }\r\n                }\r\n            }\r\n\r\n            const res2 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: newRequestList,\r\n                        username: user.username\r\n                    })\r\n            });\r\n            if (!res2.ok) {\r\n                throw new Error('Could not update friend requests');\r\n            }\r\n            const userRemoved = await res2.json();\r\n            if (userRemoved) {\r\n                updateRequests();\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const onRemoveRequest = (e) => {\r\n        removeRequest(e.target.id);\r\n    }\r\n\r\n     const addFriend = async (friend) => {\r\n        console.log('friend added');\r\n        document.querySelector('.addFriendInput').value = '';\r\n        let friendList = '';\r\n        let friendArray = [];\r\n        let friendlistOfFriends = '';\r\n        let friendSocketId = '';\r\n//-----------------------------------------------------------------------------------\r\n        // Search the database to check if the name matches any users in the databse\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res.json();\r\n            if (user1.username === user.username) {\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user1.username) {\r\n                let friendlistOfFriendsArray = [];\r\n                friendSocketId = user1.socketid;\r\n                if (user1?.friends?.length) {\r\n                    friendlistOfFriendsArray = user1.friends.split(',');\r\n                    if (friendlistOfFriendsArray.includes(user.username)) {\r\n                        throw new Error('You are already a friend of the user');\r\n                    }\r\n                }\r\n                friendlistOfFriendsArray.push(user.username);\r\n                if (friendlistOfFriendsArray.length > 1) {\r\n                    friendlistOfFriends = friendlistOfFriendsArray.join(',');\r\n                } else {\r\n                    friendlistOfFriends = friendlistOfFriendsArray[0];\r\n                }\r\n    //-----------------------------------------------------------------------------------\r\n                // If friend exists, grab the user's friend list string\r\n                // Make a temporary string and array with the new friend\r\n    //-----------------------------------------------------------------------------------\r\n                const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\r\n                if (!res2.ok) {throw new Error('Problem accessing friends list')}\r\n                const friends = await res2.json();\r\n                if (friends?.length) {\r\n                    friends.forEach(f => {\r\n                        friendArray.push(f.username);\r\n                        if (f.username === friend) {\r\n                            throw new Error('User already your friend');\r\n                        }\r\n                    })\r\n                }\r\n                friendArray.push(friend);\r\n                friendList = friendArray.join(',');\r\n\r\n    //-----------------------------------------------------------------------------------\r\n                // Update the user's friend list with the new friends string\r\n                // Pass the updated friends array to 'fetchFriendData'\r\n    //-----------------------------------------------------------------------------------\r\n                const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/addFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        username: user.username,\r\n                        friendlist: friendList\r\n                    })\r\n                })\r\n                if (!res3.ok) {throw new Error('Problem adding friend')}\r\n                const userAdded = await res3.json();\r\n                if (userAdded) {\r\n                    const allF = [];\r\n                    for (let f of friendArray) {\r\n                        try {\r\n                            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${f}`);\r\n                            if (!response.ok) {throw new Error('User does not exist')}\r\n                            const user1 = await response.json();\r\n                            // if (opponentIsOnline(user1)) {\r\n                            //     allF.push({name: user1.username, status: 'online'})\r\n                            // } else {\r\n                            //     allF.push({name: user1.username, status: 'offline'})\r\n                            // }\r\n                            allF.push(user1);\r\n                        } catch(err) {\r\n                            console.log(err);\r\n                        }\r\n                    }\r\n                    setUnsortedFriends(allF);\r\n                }\r\n                const res4 = await fetch('https://calm-ridge-60009.herokuapp.com/addSelfToFriend', {\r\n                    method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        friendlist: friendlistOfFriends,\r\n                        friendname: friend\r\n                    })\r\n                })\r\n                if (!res4.ok) {throw new Error('Problem adding self to friendlist of friend')}\r\n                const selfAdded = await res4.json();\r\n                if (selfAdded && friendSocketId !== null) {\r\n                    socket.emit('update user status', friendSocketId);\r\n                }\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const addFriendStart = async (e) => {\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${e.target.id}`);\r\n            if (!res.ok) {\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res.json();\r\n            if (user1.username) {\r\n                removeRequest(e.target.id);\r\n                // socket.emit('send add friend', {socketid: user.socketid, user: username})\r\n                addFriend(e.target.id);\r\n                // Can't add friend if their offline   FIX\r\n            }\r\n        } catch(err) {\r\n            console.log(err)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Dropdown className='dropdown'>\r\n              <Dropdown.Toggle variant=\"success\" className='messageToggle' id=\"dropdown-basic\"><img src={msgIcon} alt='Message Icon' /></Dropdown.Toggle>\r\n              <Dropdown.Menu id='dropdowns'>\r\n              {\r\n                friendRequests !== null\r\n                ?\r\n                  friendRequests.map(request => {\r\n                    return (\r\n                        <div key={request} className='dropdownItem'>\r\n                            <div className='text'>Friend request from <h3 className=\"requesterName\">{request}</h3></div>\r\n                            <div>\r\n                                <button onClick={addFriendStart} id={request} className='acceptInvite'>Accept</button>\r\n                                <button onClick={onRemoveRequest} id={request} className='rejectInvite'>Reject</button>\r\n                            </div>\r\n                        </div>\r\n                    )\r\n                  })\r\n                  : (null)\r\n              }\r\n              </Dropdown.Menu>\r\n            </Dropdown>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default FriendRequests;\r\n","import React from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport FriendRequests from './FriendRequests';\r\nimport './navigation.css';\r\n\r\nconst Navigation = ({ socket, onRouteChange }) => {\r\n\r\n    const { friendSocket, user, route} = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        user: state.user,\r\n        route: state.route\r\n    }));\r\n\r\n    const { setSearch } = useStoreActions(actions => ({\r\n        setSearch: actions.setSearch\r\n    }));\r\n\r\n    const handleExitClick = (e) => {\r\n        setSearch(false);\r\n        onRouteChange(e);\r\n        socket.emit('send exit game', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <nav className='nav'>\r\n            {\r\n            route === 'login' || route === 'register'\r\n            ?\r\n            <>\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n            </>\r\n            :\r\n            route === 'loggedIn'\r\n            ?\r\n            <>\r\n                <FriendRequests socket={socket} />\r\n                <button value='goToLeaderboard' onClick={onRouteChange}>Leaderboard</button>\r\n                <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n            </>\r\n            :\r\n            <>\r\n                {\r\n                route === 'leaderboard'\r\n                ?\r\n                    user?.username\r\n                    ?\r\n                    <>\r\n                        <FriendRequests socket={socket} />\r\n                        <button value='goHome' onClick={onRouteChange}>Back</button>\r\n                        <button value='logOut' onClick={onRouteChange}>Log Out</button>\r\n                    </>\r\n                    :\r\n                    <>\r\n                        <button value='goToLogin' onClick={onRouteChange}>Back</button>\r\n                    </>\r\n                : //route === 'game'\r\n                <>\r\n                    <FriendRequests socket={socket} />\r\n                    <button value='goHome' onClick={handleExitClick}>Exit</button>\r\n                    <button value='logOut' onClick={handleExitClick}>Log Out</button>\r\n                </>\r\n                }\r\n            </>\r\n            }\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navigation;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst ChatBox = ({ socket }) => {\r\n\r\n    const { friendSocket, opponentName, chatText } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        opponentName: state.opponentName,\r\n        chatText: state.chatText\r\n    }));\r\n\r\n    const { setChatText } = useStoreActions(actions => ({\r\n        setChatText: actions.setChatText\r\n    }));\r\n\r\n    const chatBox = document.querySelector('.chatBox');\r\n\r\n    useEffect(() => {\r\n        document.addEventListener('keyup', handleEnterBtn);\r\n\r\n        socket.on('receive msg', message => {\r\n            handleReceivedMessage(message);\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive msg');\r\n            document.removeEventListener('keyup', handleEnterBtn);\r\n        }\r\n    },[chatText])\r\n\r\n    const handleReceivedMessage = (message) => {\r\n        const chatBox = document.querySelector('.chatBox');\r\n        if (chatBox !== null) {\r\n            const msgNode = document.createElement(\"DIV\");\r\n            msgNode.classList.add('message');\r\n            const textNode = document.createElement(\"H4\");\r\n            textNode.classList.add('opponentText');\r\n            const nameNode = document.createElement(\"H5\");\r\n            nameNode.classList.add('oppName');\r\n            const text = document.createTextNode(message);\r\n            const name = document.createTextNode(opponentName);\r\n            nameNode.appendChild(name);\r\n            textNode.appendChild(text);\r\n            msgNode.appendChild(nameNode);\r\n            msgNode.appendChild(textNode);\r\n            chatBox.appendChild(msgNode);\r\n            chatBox.scrollTop = chatBox.scrollHeight;\r\n        }\r\n    }\r\n\r\n    const handleEnterBtn = (e) => {\r\n            if (e.keyCode === 13 && chatBox !== null && chatText !== '') {\r\n                e.preventDefault();\r\n                const msgNode = document.createElement(\"DIV\");\r\n                msgNode.classList.add('message');\r\n                const textNode = document.createElement(\"H4\");\r\n                textNode.classList.add('userText');\r\n                const nameNode = document.createElement(\"H5\");\r\n                nameNode.classList.add('userName');\r\n                const text = document.createTextNode(chatText);\r\n                const name = document.createTextNode(\"You\");\r\n                nameNode.appendChild(name);\r\n                textNode.appendChild(text);\r\n                msgNode.appendChild(nameNode);\r\n                msgNode.appendChild(textNode);\r\n                chatBox.appendChild(msgNode);\r\n                setChatText('');\r\n                socket.emit('send msg', {socketid: friendSocket, message: chatText});\r\n                document.querySelector('.chatInput').value = '';\r\n                chatBox.scrollTop = chatBox.scrollHeight;\r\n            }\r\n    }\r\n\r\n    return (\r\n        <div className='chatContainer'>\r\n            <div className='chatBox'></div>\r\n            <input onChange={(e) => setChatText(e.target.value)} type='text' className='chatInput' placeholder='Type Here...' />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatBox;\r\n","import React from 'react';\r\nimport './footer.css';\r\n\r\nconst Footer = () => {\r\n    return (\r\n        <footer><div className='footer'></div></footer>\r\n    )\r\n}\r\n\r\nexport default Footer;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport UserBoard from './UserBoard';\r\nimport OpponentBoard from './OpponentBoard';\r\nimport Navigation from '../navigation/Navigation';\r\nimport ChatBox from './ChatBox';\r\nimport Footer from '../footer/Footer';\r\n\r\nconst Game = ({ socket, onRouteChange }) => {\r\n    \r\n    const { friendSocket, opponentName, user, checkOppStatusInterval, gameRoute, playerIsReady, opponentIsReady, yourTurn } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        opponentName: state.opponentName,\r\n        user: state.user,\r\n        checkOppStatusInterval: state.checkOppStatusInterval,\r\n        gameRoute: state.gameRoute,\r\n        playerIsReady: state.playerIsReady,\r\n        opponentIsReady: state.opponentIsReady,\r\n        yourTurn: state.yourTurn\r\n    }));\r\n\r\n    const { setSearch, setCheckOppStatusInterval, setRoute, setGameRoute, setPlayerIsReady, setOpponentIsReady, setYourTurn } = useStoreActions(actions => ({\r\n        setSearch: actions.setSearch,\r\n        setCheckOppStatusInterval: actions.setCheckOppStatusInterval,\r\n        setRoute: actions.setRoute,\r\n        setGameRoute: actions.setGameRoute,\r\n        setPlayerIsReady: actions.setPlayerIsReady,\r\n        setOpponentIsReady: actions.setOpponentIsReady,\r\n        setYourTurn: actions.setYourTurn\r\n    }));\r\n    \r\n    const instructions = 'Place your ships!';\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        socket.on('receive game over', () => {\r\n            // gamePage.style.setProperty('--player-turn-text', '\"You Won!\"');\r\n            // setTimeout(gameOver, 2000);\r\n            addWin();\r\n            setTimeout(() => {\r\n                window.alert('You Won!!!');\r\n                setRoute('loggedIn');\r\n            }, 300);\r\n        })\r\n\r\n        socket.on('receive exit game', () => {\r\n            setSearch(false);\r\n            window.alert('Opponent has left the game');\r\n            setRoute('loggedIn');\r\n        })\r\n\r\n        setCheckOppStatusInterval(setInterval(checkIfOpponentIsOnline, 3000));\r\n\r\n        return () => {\r\n            clearInterval(checkOppStatusInterval);\r\n            socket.off('receive ready status');\r\n            socket.off('receive game over');\r\n            socket.off('receive exit game');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const gameInstructions = document.querySelector('.gamePage');\r\n        if (gameRoute === 'placeShips') {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${instructions}\"`);\r\n        } else if (yourTurn) {\r\n            gameInstructions.style.setProperty('--player-turn-text', '\"Your Turn!\"');\r\n        } else {\r\n            gameInstructions.style.setProperty('--player-turn-text', `\"${opponentName}'s Turn!\"`);\r\n        }\r\n    },[yourTurn, gameRoute])\r\n\r\n    useEffect(() => {\r\n        // const gamePage = document.querySelector('.gamePage');\r\n        const squares = document.querySelectorAll('.userBoard .singleSquare');\r\n        let score = 0;\r\n        if (yourTurn) {\r\n            for (let square of squares) {\r\n                if (square.classList.contains('hit')) {\r\n                    score += 1;\r\n                }\r\n            }\r\n            if (score >= 17) {\r\n                // gamePage.style.setProperty('--player-turn-text', '\"You Lose\"');\r\n                socket.emit('game over', friendSocket);\r\n                setTimeout(() => {\r\n                    window.alert('You Lose');\r\n                    setRoute('loggedIn');\r\n                }, 300);\r\n            }\r\n        }\r\n    },[yourTurn])\r\n\r\n    const checkIfOpponentIsOnline = async () => {\r\n        try {\r\n            let friendIsOnline = false;\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendsOnline?username=${user.username}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const onlineFriends = await response.json();\r\n            await onlineFriends.forEach(f => {\r\n                if ((f.username === opponentName)) {\r\n                    return friendIsOnline = true;\r\n                }\r\n            })\r\n            if (!friendIsOnline) {\r\n                window.alert('Opponent has left the game');\r\n                setRoute('loggedIn');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n   }\r\n\r\n    const addWin = async () => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/updateWins', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username\r\n                })\r\n            })\r\n            const winsUpdated = await res.json();\r\n            if (!winsUpdated) {\r\n                throw new Error('Could not increment wins')\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    socket.on('receive ready status', () => {\r\n        if (playerIsReady) {\r\n            setGameRoute('gameInProgress');\r\n        }\r\n        setOpponentIsReady(true);\r\n    })\r\n\r\n    const handleReadyButton = () => {\r\n        const ships = document.querySelectorAll('.ship');\r\n        const readyBtn = document.querySelector('.readyBtn');\r\n        for (let ship of ships) {\r\n            ship.style.cursor = 'default';\r\n        }\r\n        if (opponentIsReady) {\r\n            setGameRoute('gameInProgress');\r\n            setYourTurn(true);\r\n        } else {\r\n            readyBtn.style.opacity = '0.4';\r\n        }\r\n        setPlayerIsReady(true);\r\n        socket.emit('send ready status', friendSocket);\r\n    }\r\n\r\n    return (\r\n        <div className='gamePage'>\r\n            <Navigation socket={socket} onRouteChange={onRouteChange} />\r\n            <UserBoard socket={socket} />\r\n            {\r\n            gameRoute === 'placeShips'\r\n            ? \r\n            <div className='readyBtn'>\r\n                <button onClick={handleReadyButton} className='btn'>Ready</button>\r\n            </div>\r\n            : (null)\r\n            }\r\n            <OpponentBoard socket={socket} />\r\n            <ChatBox socket={socket} />\r\n            <Footer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Game;\r\n","import React from 'react';\r\nimport Board from '../boards/Board';\r\nimport './homeBoard.css';\r\n\r\nconst HomeBoard = () => {\r\n    return (\r\n        <div className='board homeBoard'>\r\n{/*            <div className='rows'>\r\n                <h3>A</h3>\r\n                <h3>B</h3>\r\n                <h3>C</h3>\r\n                <h3>D</h3>\r\n                <h3>E</h3>\r\n                <h3>F</h3>\r\n                <h3>G</h3>\r\n                <h3>H</h3>\r\n                <h3>I</h3>\r\n                <h3>J</h3>\r\n            </div>\r\n\r\n            <div className='cols'>\r\n                <h3>1</h3>\r\n                <h3>2</h3>\r\n                <h3>3</h3>\r\n                <h3>4</h3>\r\n                <h3>5</h3>\r\n                <h3>6</h3>\r\n                <h3>7</h3>\r\n                <h3>8</h3>\r\n                <h3>9</h3>\r\n                <h3>10</h3>\r\n            </div>*/}\r\n\r\n            <div className='grid'>\r\n                <div className='allSqaures'>\r\n                    <Board />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default HomeBoard;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './findMatch.css';\r\n\r\nconst FindMatch = ({ socket }) => {\r\n    \r\n    const { currentSocket, search, findMatchInterval, user } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        search: state.search,\r\n        findMatchInterval: state.search,\r\n        user: state.user\r\n    }));\r\n\r\n    const { setSearch, setFindMatchInterval, setOpponentName, setFriendSocket, setRoute } = useStoreActions(actions => ({\r\n        setSearch: actions.setSearch,\r\n        setFindMatchInterval: actions.setFindMatchInterval,\r\n        setOpponentName: actions.setOpponentName,\r\n        setFriendSocket: actions.setFriendSocket,\r\n        setRoute: actions.setRoute\r\n    }));\r\n\r\n    useEffect(() => {\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n        }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (search) {\r\n            setFindMatchInterval(setInterval(searchForMatch, 1000));\r\n        }\r\n    }, [search])\r\n\r\n    const stopSearching = async () => {\r\n         try {\r\n            clearInterval(findMatchInterval);\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username,\r\n                    search: false\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const updateSearching = async () => {\r\n        try {\r\n            const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\r\n                method: 'put',\r\n                headers: {'Content-Type': 'application/json'},\r\n                body: JSON.stringify({\r\n                    username: user.username,\r\n                    search: !search\r\n                })\r\n            })\r\n            if (!response.ok) {throw new Error('Problem updating searching status')}\r\n            const searchChanged = await response.json();\r\n            if (searchChanged) {\r\n                setSearch(!search);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const searchForMatch = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findMatch?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Could not find match')}\r\n            const match = await response.json();\r\n            if (match) {\r\n                await setFriendSocket(match.socketid);\r\n                await setOpponentName(match.username);\r\n                await stopSearching();\r\n                await socket.emit('send go to game',  {receiverSocket: match.socketid, senderSocket: currentSocket, senderName: user.username});\r\n                await setSearch(false);\r\n                setRoute('game');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='findMatchContainer'>\r\n            <button onClick={updateSearching} className='findMatch'>{search === false ? 'Find Match' : 'Searching...'}</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default FindMatch;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport './singleFriend.css';\r\n\r\nconst SingleFriend = ({ friendInGame, socket, name, status }) => {\r\n\r\n    const { friendSocket, route, currentSocket, user } = useStoreState(state => ({\r\n        friendSocket: state.friendSocket,\r\n        route: state.route,\r\n        currentSocket: state.currentSocket,\r\n        user: state.user\r\n    }));\r\n\r\n    const { setOpponentName, setFriendSocket, setRoute } = useStoreActions(actions => ({\r\n        setOpponentName: actions.setOpponentName,\r\n        setFriendSocket: actions.setFriendSocket,\r\n        setRoute: actions.setRoute\r\n    }));    \r\n\r\n    useEffect(() => {\r\n        socket.on('receive go to game', data => {\r\n            setOpponentName(data.senderName);\r\n            setFriendSocket(data.senderSocket);\r\n            setRoute('game');\r\n        })\r\n\r\n        socket.on('receive invite', data => handleInvite(data))\r\n\r\n        return () => {\r\n            socket.off('receive go to game');\r\n            socket.off('receive invite');\r\n        }\r\n    },[])\r\n\r\n    useEffect(() => {\r\n        const btn = document.querySelector(`.btn${name}`);\r\n        if (status !== 'offline' && !friendInGame) {\r\n            btn.style.opacity = '0.8';\r\n            btn.disabled = false;\r\n            btn.childNodes[0].nodeValue = \"Invite\";\r\n        }\r\n    },[status, friendInGame])\r\n\r\n    const handleInvite = (data) => {\r\n        const btn = document.querySelector(`.btn${data.username}`);\r\n        if (route === 'loggedIn' && btn !== null) {\r\n            if (btn.disabled === true) {\r\n                btn.style.opacity = '0.8';\r\n                btn.disabled = false;\r\n            }\r\n            btn.childNodes[0].nodeValue = \"Accept\";\r\n            setFriendSocket(data.socketid);\r\n        }\r\n    }\r\n\r\n    const sendInvite = async (e) => {\r\n        const friend = e.target.id;\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friend}`)\r\n            const user1 = await response.json();\r\n            if (user1.socketid) {\r\n                socket.emit('send invite', {currentSocket: currentSocket, username: user.username, socketid: user1.socketid});\r\n                e.target.childNodes[0].nodeValue = \"Invite sent\";\r\n                e.target.style.opacity = '0.4';\r\n                e.target.style.cursor = 'default';\r\n                e.target.disabled = true;\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const acceptInvite = (e) => {\r\n        socket.emit('send go to game',  {receiverSocket: friendSocket, senderSocket: currentSocket, senderName: user.username});\r\n        setOpponentName(e.target.id);\r\n        setRoute('game');\r\n    }\r\n\r\n    const handleOnClick = (e) => {\r\n        if (e.target.innerHTML === 'Invite') {\r\n            sendInvite(e)\r\n        } else if (e.target.innerHTML === 'Accept') {\r\n            acceptInvite(e)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div id={name} value={name} className='friendBlock'>\r\n            <div className='friendText'>\r\n                <h3>{name}</h3>\r\n                {\r\n                    friendInGame && status === 'online'\r\n                    ? <button disabled className={`btn${name} friendInGameBtn`}>In Game</button>\r\n                    : \r\n                        status === 'online'\r\n                        ? <button className={`btn${name} friendOnlineBtn`} onClick={handleOnClick} id={name}>Invite</button>\r\n                        : <button disabled className={`btn${name} friendOfflineBtn`}>Offline</button>\r\n                }\r\n            </div>\r\n            <div id={status} className={status}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SingleFriend;\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\nimport SingleFriend from './SingleFriend';\r\nimport './friends.css';\r\n\r\nconst Friends = ({ socket }) => {\r\n    \r\n    const { unsortedFriends, user, allFriends, friendFilter, friendSearch, friendsOnline, getOnlineFriendsInterval } = useStoreState(state => ({\r\n        unsortedFriends: state.unsortedFriends,\r\n        user: state.user,\r\n        allFriends: state.allFriends,\r\n        friendFilter: state.friendFilter,\r\n        friendSearch: state.friendSearch,\r\n        friendsOnline: state.friendsOnline,\r\n        getOnlineFriendsInterval: state.getOnlineFriendsInterval\r\n    }));\r\n\r\n    const { setUnsortedFriends, setAllFriends, setFriendFilter, setFriendSearch, setFriendsOnline, setGetOnlineFriendsInterval } = useStoreActions(actions => ({\r\n        setUnsortedFriends: actions.setUnsortedFriends,\r\n        setAllFriends: actions.setAllFriends,\r\n        setFriendFilter: actions.setFriendFilter,\r\n        setFriendSearch: actions.setFriendSearch,\r\n        setFriendsOnline: actions.setFriendsOnline,\r\n        setGetOnlineFriendsInterval: actions.setGetOnlineFriendsInterval\r\n    }));\r\n    \r\n    // Start fetching friends on component mount\r\n// -----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        fetchFriends();\r\n        // showOnlineStatusToFriends();\r\n\r\n        socket.on('update friend status', () => {\r\n            getOnlineFriends();\r\n        });\r\n\r\n        setGetOnlineFriendsInterval(setInterval(getOnlineFriends, 1000));\r\n\r\n        return () => {\r\n            socket.off('update friend status');\r\n            clearInterval(getOnlineFriendsInterval);\r\n        }\r\n    }, [])\r\n//-----------------------------------------------------------------------------------\r\n    // Sort the friends when fetching has finished/unsortedFriends has updated\r\n//-----------------------------------------------------------------------------------\r\n    useEffect(() => {\r\n        sortFriends();\r\n    },[friendsOnline, unsortedFriends])\r\n    \r\n//-----------------------------------------------------------------------------------\r\n    // Sort friends. Online at top\r\n//-----------------------------------------------------------------------------------\r\n    const sortFriends = () => {\r\n        const offlineFriends = [];\r\n        const justAdded = [];\r\n        let onlineSorted = [];\r\n        let offlineSorted = [];\r\n\r\n        unsortedFriends.forEach(f => {\r\n            if (f.username === friendSearch) {\r\n                justAdded.push(f)\r\n            } else {\r\n                let addFriendToOffline = true;\r\n                friendsOnline.forEach(olF => {\r\n                    if (olF.username === f.username) {\r\n                        return addFriendToOffline = false;\r\n                    }\r\n                })\r\n\r\n                if (addFriendToOffline) {\r\n                    offlineFriends.push(f);\r\n                }\r\n            }\r\n        })\r\n\r\n        onlineSorted = friendsOnline.sort((a, b) => {\r\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\r\n        })\r\n\r\n        offlineSorted = offlineFriends.sort((a, b) => {\r\n            return a.username.toLowerCase() > b.username.toLowerCase() ? 1 : -1;\r\n        })\r\n        \r\n        if (justAdded.length) {\r\n            setAllFriends(justAdded.concat(onlineSorted).concat(offlineSorted));\r\n        } else {\r\n            setAllFriends(onlineSorted.concat(offlineSorted));\r\n        }\r\n    }\r\n\r\n    const getOnlineFriends = async () => {\r\n         try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendsOnline?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Could not get online friends')}\r\n            const onlineFriends = await response.json();\r\n            setFriendsOnline(onlineFriends);\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n//-----------------------------------------------------------------------------------\r\n    // Get array of friends\r\n// -----------------------------------------------------------------------------------\r\n    const fetchFriends = async () => {\r\n        try {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\r\n            if (!response.ok) {throw new Error('Problem accessing friends list')}\r\n            const friends = await response.json();\r\n            if (user?.friends?.length && friends?.length) {\r\n                await setUnsortedFriends(friends);\r\n                getOnlineFriends();\r\n            } else {\r\n                await setAllFriends([]);\r\n                await setUnsortedFriends([]);\r\n                setFriendsOnline([]);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n//-----------------------------------------------------------------------------------\r\n    // Send friend request\r\n//-----------------------------------------------------------------------------------\r\n    const sendFriendRequest = async () => {\r\n        document.querySelector('.addFriendInput').value = '';\r\n        const friendAlert = document.querySelector('.friendsContainer');\r\n        let friendName = '';\r\n        let friendSocketId = '';\r\n        let friendsRequests = '';\r\n        let friendsRequestsArray = [];\r\n//-----------------------------------------------------------------------------------\r\n        // Check to see if friend already sent user request\r\n//-----------------------------------------------------------------------------------\r\n        try {\r\n            const res = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriendRequests?username=${user.username}`);\r\n            if (!res.ok) {\r\n                throw new Error('Could not get friend requests')\r\n            }\r\n            const requests = await res.json();\r\n            if (requests !== null && requests !== '') {\r\n                const requestsArray = requests.split(',');\r\n                if (requestsArray.includes(friendSearch)) {\r\n                    friendAlert.style.setProperty('--add-friend-alert', '\"User already sent you a request\"');\r\n                    throw new Error('User already sent you a request')\r\n                }\r\n            }\r\n//-----------------------------------------------------------------------------------\r\n            // Check to see if friend exists\r\n//-----------------------------------------------------------------------------------\r\n            const res2 = await fetch(`https://calm-ridge-60009.herokuapp.com/findFriend?username=${friendSearch}`);\r\n            if (!res2.ok) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"User does not exist\"');\r\n                throw new Error('User does not exist')\r\n            }\r\n            const user1 = await res2.json();\r\n            if (user1.username === user.username) {\r\n                friendAlert.style.setProperty('--add-friend-alert', '\"Cannot add yourself as a friend\"');\r\n                throw new Error('Cannot add self as friend')\r\n            } else if (user1.username) {\r\n                friendName = user1.username;\r\n                friendSocketId = user1.socketid;\r\n//-----------------------------------------------------------------------------------\r\n                // Add user to friend's friendrequests\r\n//-----------------------------------------------------------------------------------\r\n                let friendList = [];\r\n                if (user1.friends !== null && user1.friends !== '') {\r\n                    friendList = user1.friends.split(',');\r\n                }\r\n                if (user1.friendrequests !== null && user1.friendrequests !== '') {\r\n                    friendsRequestsArray = user1.friendrequests.split(',');\r\n                    if (friendsRequestsArray.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"You have already sent them a request\"');\r\n                        throw new Error('You have already sent them a request');\r\n                    } else if (friendList.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    } else {\r\n                        friendsRequestsArray.push(user.username);\r\n                        friendsRequests = user1.friendrequests.concat(`,${user.username}`);\r\n                    }\r\n                } else {\r\n                    if (friendList.includes(user.username)) {\r\n                        friendAlert.style.setProperty('--add-friend-alert', '\"User is already your friend\"');\r\n                        throw new Error('User is already your friend');\r\n                    }\r\n                    friendsRequests = user.username;\r\n                    friendsRequestsArray = [user.username];\r\n                }\r\n            }\r\n            friendAlert.style.setProperty('--add-friend-alert', '\"\"');\r\n            const res3 = await fetch('https://calm-ridge-60009.herokuapp.com/updateFriendRequests', {\r\n                method: 'put',\r\n                    headers: {'Content-Type': 'application/json'},\r\n                    body: JSON.stringify({\r\n                        requestlist: friendsRequests,\r\n                        username: friendName\r\n                    })\r\n            });\r\n            if (!res3.ok) {\r\n                throw new Error('Could not add self to friendrequests of friend');\r\n            }\r\n            const selfAdded = await res3.json();\r\n            if (selfAdded) {\r\n                socket.emit('send friend request', friendSocketId);\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n    }\r\n\r\n    const friendIsOnline = (last) => {\r\n        const curTime = Date.now();\r\n        if ((last > (curTime - 5000)) && last) {\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='friendsContainer'>\r\n            <div className='friendsContainerHeader'>\r\n                    <h2>Friends</h2>\r\n                    <input className='friendSearch' onChange={(e) => setFriendFilter(e.target.value)} type='text' placeholder='Enter a username'/>\r\n            </div>\r\n            <div className='friendsSection'>\r\n\r\n\r\n                <div className='friendsListContainer'>\r\n                {\r\n                    allFriends.length\r\n                    ?\r\n                    <div className='friendsList'>\r\n                    {\r\n//-----------------------------------------------------------------------------------\r\n                        // Map through the user's friends\r\n                        // Return a single friend div w/ their username and status\r\n//-----------------------------------------------------------------------------------\r\n                        allFriends.map(f => {\r\n                            if (f.username && f.username.toLowerCase().includes(friendFilter.toLowerCase())) {\r\n                                if (friendIsOnline(f.lastonline)) {\r\n                                    return <SingleFriend friendInGame={f.ingame} socket={socket} key={f.username} name={f.username} \r\n                                    status='online' />\r\n                                } else {\r\n                                    return <SingleFriend friendInGame={f.ingame} socket={socket} key={f.username} name={f.username} \r\n                                    status='offline' />\r\n                                }\r\n                            } else return null\r\n                        })\r\n                    }\r\n                    </div>\r\n                    : <h4 className='noFriends'>No friends have been added</h4>\r\n                }\r\n                </div>\r\n                <div className='addFriend'>\r\n                    <h3 className='addFriendText' >Add a friend</h3>\r\n                    <input className='addFriendInput' onChange={(e) => setFriendSearch(e.target.value)} type='text' placeholder='Enter a username'/>\r\n                    <button className='friendRequestBtn' onClick={sendFriendRequest}>Send Request</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Friends;\r\n","import React from 'react';\r\nimport './friends.css';\r\n\r\nconst FriendsHome = ({onRouteChange}) => {\r\n    return (\r\n    <div className='friendsContainer'>\r\n        <div className='friendsContainerHeader'>\r\n            <h2>Friends</h2>\r\n        </div>\r\n        <div className='logToSeeFriendsText'>\r\n            <h3>Log in to add and view friends here</h3>\r\n        </div>\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default FriendsHome;\r\n","import { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst Login = ({onRouteChange }) => {\r\n    \r\n    const { currentSocket, userName, password } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        userName: state.userName,\r\n        password: state.password\r\n    }));\r\n\r\n    const { setUserName, setPassword, setUser } = useStoreActions(actions => ({\r\n        setUserName: actions.setUserName,\r\n        setPassword: actions.setPassword,\r\n        setUser: actions.setUser\r\n    }));\r\n    \r\n    const login = document.querySelector('.login');\r\n\r\n    const onSubmitLogin = async (e) => {\r\n        try {\r\n            const res = await fetch('https://calm-ridge-60009.herokuapp.com/login', {\r\n              method: 'put',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            const user1 = await res.json();\r\n            if (user1.username) {\r\n                setUser(user1);\r\n                onRouteChange(e);\r\n            } else if (user1 === 'no socketid') {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n            } else if (login !== null) {\r\n                login.style.setProperty(\"--reg-log-alert\", '\"The username or password you entered is incorrect\"');\r\n            }\r\n        } catch(err) {\r\n            console.log(err);\r\n        }\r\n\r\n    }\r\n\r\n    return (\r\n        <div className='login'>\r\n            <h1>Log In</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)} type='password' />\r\n            </div>\r\n            <button className='loginBtn' value='login' onClick={onSubmitLogin}>Login</button>\r\n            <button value='goToRegister' onClick={onRouteChange} className='changeLogReg'>Register</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nconst Register = ({ onRouteChange }) => {\r\n\r\n    const { currentSocket, userName, password } = useStoreState(state => ({\r\n        currentSocket: state.currentSocket,\r\n        userName: state.userName,\r\n        password: state.password\r\n    }));\r\n\r\n    const { setUserName, setPassword, setUser } = useStoreActions(actions => ({\r\n        setUserName: actions.setUserName,\r\n        setPassword: actions.setPassword,\r\n        setUser: actions.setUser\r\n    }));\r\n\r\n    const register = document.querySelector('.register');\r\n\r\n    const onSubmitRegister = (e) => {\r\n        if (userName.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username must be at least 5 characters\"');\r\n        } else if (userName.length > 10) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Username cannot be more than 10 characters\"');\r\n        } else if (password.length < 5) {\r\n            register.style.setProperty(\"--reg-log-alert\", '\"Password must be at least 5 characters\"');\r\n        } else {\r\n            fetch('https://calm-ridge-60009.herokuapp.com/register', {\r\n              method: 'post',\r\n              headers: {'Content-Type': 'application/json'},\r\n              body: JSON.stringify({\r\n                username: userName,\r\n                password: password,\r\n                socketid: currentSocket\r\n              })\r\n            })\r\n            .then(response => response.json())\r\n            .then(user1 => {\r\n              if (user1.username) {\r\n                setUser(user1);\r\n                onRouteChange(e);\r\n              } else if (user1 === 'no socketid') {\r\n                register.style.setProperty(\"--reg-log-alert\", '\"Server error. Please try again\"');\r\n                }\r\n                else if (!user1.ok) {\r\n                    register.style.setProperty(\"--reg-log-alert\", '\"Username has already been taken\"');\r\n              }\r\n            })\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className='register'>\r\n            <h1>Register</h1>\r\n            <div className='username'>\r\n                <h4>Username</h4>\r\n                <input onChange={(e) => setUserName(e.target.value)} type='text' />\r\n            </div>\r\n            <div className='password'>\r\n                <h4>Password</h4>\r\n                <input onChange={(e) => setPassword(e.target.value)}type='password' />\r\n            </div>\r\n            <button className='registerBtn' value='register' onClick={onSubmitRegister}>Register</button>\r\n            <button value='goToLogin' onClick={onRouteChange} className='changeLogReg'>Login</button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n\r\n","import React, { useEffect } from 'react';\r\nimport { useStoreState, useStoreActions } from 'easy-peasy';\r\n\r\nimport Navigation from '../navigation/Navigation';\r\n\r\nconst Leaderboard = ({ onRouteChange, socket }) => {\r\n\r\n    const { topFive } = useStoreState(state => ({\r\n        topFive: state.topFive\r\n    }));\r\n\r\n    const { setTopFive } = useStoreActions(actions => ({\r\n        setTopFive: actions.setTopFive\r\n    }));\r\n\r\n    useEffect(() => {\r\n        getTopPlayers();\r\n    },[])\r\n\r\n    const getTopPlayers = async () => {\r\n        const tempArr = [];\r\n        for (let i = 0; i < 5; i++) {\r\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/getTopFive?userNum=${i}`)\r\n            if (!response.ok) {\r\n                throw new Error('Error')\r\n            }\r\n            const user1 = await response.json();\r\n            tempArr.push({name: user1.username, wins: user1.wins});\r\n        }\r\n        setTopFive(tempArr);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Navigation onRouteChange={onRouteChange} socket={socket} />\r\n            {\r\n            topFive.length\r\n            ?\r\n            <div className='topFiveContainer'>\r\n                <div className='topFive'>\r\n                    {\r\n                    topFive.map(player => {\r\n                        return <h3 key={player.name} className='LBplayer'> {player.name} : <span className='wins'>{player.wins}</span> wins </h3>\r\n                    })\r\n                    }\r\n                </div>\r\n            </div>\r\n            : null\r\n            }\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Leaderboard;\r\n","import io from 'socket.io-client';\r\nexport const socket = io('https://safe-mesa-81492.herokuapp.com/');       //,{autoConnect: false}\r\n","import React, { useEffect } from 'react';\nimport { useStoreState, useStoreActions } from 'easy-peasy';\nimport Game from './components/boards/Game';\nimport HomeBoard from './components/homeBoard/HomeBoard';\nimport FindMatch from './components/findMatch/FindMatch';\nimport Friends from './components/friends/Friends';\nimport FriendsHome from './components/friends/FriendsHome';\nimport Login from './components/logReg/Login';\nimport Register from './components/logReg/Register';\nimport Leaderboard from './components/leaderboard/Leaderboard';\nimport Navigation from './components/navigation/Navigation';\nimport Footer from './components/footer/Footer';\nimport { socket } from './socket/socketImport';\nimport './logReg.css';\nimport './homePageLogged.css';\nimport './gamePage.css';\nimport './leaderboard.css';\n\nfunction App() {\n    const { getOnlineFriendsInterval, route, user, friendSocket, findMatchInterval, checkOppStatusInterval, search, updatLastOnlineInterval, inviteSent, inviteReceived } = useStoreState(state => ({\n        getOnlineFriendsInterval: state.getOnlineFriendsInterval,\n        route: state.route,\n        user: state.user,\n        friendSocket: state.friendSocket,\n        findMatchInterval: state.findMatchInterval,\n        checkOppStatusInterval: state.checkOppStatusInterval,\n        search: state.search,\n        updatLastOnlineInterval: state.updatLastOnlineInterval,\n        inviteSent: state.inviteSent,\n        inviteReceived: state.inviteReceived\n    }));\n\n    const { setRoute, setUser, setCurrentSocket, setSearch, setUpdatLastOnlineInterval, setInviteSent, setInviteReceived, setAllFriends, setUnsortedFriends, setFriendsOnline, setFriendSearch } = useStoreActions(actions => ({\n        setRoute: actions.setRoute,\n        setUser: actions.setUser,\n        setCurrentSocket: actions.setCurrentSocket,\n        setSearch: actions.setSearch,\n        setUpdatLastOnlineInterval: actions.setUpdatLastOnlineInterval,\n        setInviteSent: actions.setInviteSent,\n        setInviteReceived: actions.setInviteReceived,\n        setAllFriends: actions.setAllFriends,\n        setUnsortedFriends: actions.setUnsortedFriends,\n        setFriendsOnline: actions.setFriendsOnline,\n        setFriendSearch: actions.setFriendSearch\n    }));\n\n    const onRouteChange = async (e) => {\n        switch(e.target.value) {\n            case 'logOut':\n                if (user?.username) {\n                    setSearch(false);\n                    // removeUserSocket(true);\n                }\n                setRoute('login');\n                break;\n            case 'goToRegister':\n                setRoute('register');\n                break;\n            case 'goToLogin':\n                setRoute('login');\n                break;\n            case 'goHome':\n                setRoute('loggedIn');\n                break;\n            case 'goToLeaderboard':\n                setRoute('leaderboard');\n                break;\n            case 'login':\n                setRoute('loggedIn');\n                break;\n            case 'register':\n                setRoute('loggedIn');\n                break;\n            case 'game':\n                if (user?.username) {\n                    setSearch(false);\n                }\n                setRoute('game');\n                break;\n            default:\n                if (user?.username) {\n                    setSearch(false);\n                    // removeUserSocket(true);\n                }\n                setRoute('login');\n        }\n    }\n\n    const stopSearching = async () => {\n        try {\n           const response = await fetch('https://calm-ridge-60009.herokuapp.com/updateSearching', {\n               method: 'put',\n               headers: {'Content-Type': 'application/json'},\n               body: JSON.stringify({\n                   username: user?.username,\n                   search: false\n               })\n           })\n           if (!response.ok) {throw new Error('Problem updating searching status')}\n       } catch(err) {\n           console.log(err);\n       }\n   }\n\n    const updateLastOnline = async () => {\n        try {\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/updateOnlineStatus`, {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: user?.username\n                })\n            })\n            if (!response.ok) {\n                throw new Error('Error');\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    useEffect(() => {\n        socket.on('connect', () => {\n            setCurrentSocket(socket.id);\n        })\n\n        return () => {\n            socket.off('connect');\n        }\n    }, [])\n\n    useEffect(() => {\n        if (user?.username?.length) {\n            stopSearching();\n            updateInGameStatus(false);\n            setUpdatLastOnlineInterval(setInterval(updateLastOnline, 1000));\n        } else {\n            clearInterval(updatLastOnlineInterval);\n        }\n\n        return () => {\n            clearInterval(updatLastOnlineInterval);\n        }\n    }, [user?.username])\n\n    useEffect(() => {\n        if (!search && findMatchInterval > 0) {\n            clearInterval(findMatchInterval);\n            stopSearching();\n        }\n    }, [search])\n\n    useEffect(() => {\n        if (route === 'game') {\n            updateInGameStatus(true);\n            clearInterval(findMatchInterval);\n        } else {\n            if (user?.username?.length) {\n                updateInGameStatus(false);\n            }\n            clearInterval(checkOppStatusInterval);\n        }\n\n        if ((route === 'login') || (route === 'register')) {\n            setUser(null);\n            clearInterval(getOnlineFriendsInterval);\n            setAllFriends([]);\n            setUnsortedFriends([]);\n            setFriendsOnline([]);\n            setFriendSearch('');\n        }\n    }, [route])\n\n\n    const updateInGameStatus = async (inGame) => {\n        try {\n            const response = await fetch(`https://calm-ridge-60009.herokuapp.com/setInGame`, {\n                method: 'put',\n                headers: {'Content-Type': 'application/json'},\n                body: JSON.stringify({\n                    username: user?.username,\n                    isInGame: inGame\n                })\n            })\n            if (!response.ok) {\n                throw new Error('Error');\n            }\n        } catch(err) {\n            console.log(err);\n        }\n    }\n\n    // const showOnlineStatusToFriends = async () => {\n    //     try {\n    //         const response1 = await fetch(`https://calm-ridge-60009.herokuapp.com/getFriends?username=${user.username}`)\n    //         if (!response1.ok) {\n    //             throw new Error('Error')\n    //         }\n    //         const friends = await response1.json();\n    //         if (friends?.length) {\n    //             for (let f of friends) {\n    //                 if (f.socketid) {\n    //                     socket.emit('update user status', f.socketid);\n    //                 }\n    //             }\n    //         }\n    //     } catch(err) {\n    //         console.log(err);\n    //     }\n    // }\n\n    // const loadUser = (user) => {\n    //     setUser({ username: user.username, wins: user.wins })\n    // }\n\n    // const removeUserSocket = async (show) => {\n    //     const res = await fetch('https://calm-ridge-60009.herokuapp.com/removeUserSocket', {\n    //       method: 'put',\n    //       headers: {'Content-Type': 'application/json'},\n    //       body: JSON.stringify({\n    //         username: user.username\n    //       })\n    //     })\n    //     const socketRemoved = await res.json();\n    //     if (socketRemoved && show) {\n    //         showOnlineStatusToFriends();\n    //     }\n    // }\n\n    window.addEventListener('beforeunload', (e) => {\n        e.preventDefault();\n        if (user?.username) {\n            stopSearching();\n            updateInGameStatus(false);\n        }\n        if (route === 'game') {\n            socket.emit('send exit game', friendSocket);\n        }\n        // removeUserSocket(false);\n        e.returnValue = '';\n    })\n\n    document.onkeydown = (e) => {\n        const loginBtn = document.querySelector('.loginBtn');\n        const registerBtn = document.querySelector('.registerBtn');\n        const logUsername = document.querySelector('.login > .username > input');\n        const registerUsername = document.querySelector('.register > .username > input');\n        const logPassword = document.querySelector('.login > .password > input');\n        const registerPassword = document.querySelector('.register > .password > input');\n        const friendRequestBtn = document.querySelector('.friendRequestBtn');\n\n        if ((e.code === 'Enter') && (route === 'login' || route === 'register')) {\n            e.preventDefault();\n            if ((logUsername?.value?.length && logPassword?.value?.length) || (registerUsername?.value?.length && registerPassword?.value?.length)) {\n                route === 'login'\n                ? loginBtn.click()\n                : registerBtn.click()\n            }\n        } else if ((e.code === 'Enter') && (route === 'loggedIn')) {\n            e.preventDefault();\n            friendRequestBtn.click();\n        }\n    };\n\n    return (\n        route === 'login' || route === 'register'\n        ?\n        <div className='logRegPage'>\n            <Navigation socket={socket} onRouteChange={onRouteChange} />\n            <FriendsHome onRouteChange={onRouteChange}/>\n            <div className='homeText'>\n                <h1>Battleship</h1>\n            </div>\n            <div className='logReg'>\n                {\n                    route === 'login'\n                    ? <Login onRouteChange={onRouteChange}/>\n                    : <Register onRouteChange={onRouteChange}/>\n                }\n            </div>\n            <Footer />\n        </div>\n        :\n        <>\n            {\n            route === 'loggedIn' || route === 'leaderboard'\n            ?\n                user?.username?.length\n                ?\n                <>\n                    <div className={`homePageLogged ${route === 'leaderboard' ? 'hide' : null}`}>\n                        <Navigation socket={socket} onRouteChange={onRouteChange} />\n                        <Friends socket={socket} />\n                        <div className='matchAndBoard'>\n                            <FindMatch socket={socket} />\n                            <HomeBoard />\n                        </div>\n                        <Footer />\n                    </div>\n                    <div className={`leaderboard ${route === 'loggedIn' ? 'hide' : null}`}>\n                        <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n                        <Footer />\n                    </div>\n                </>\n                :\n                <div className={`leaderboard`}>\n                    <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n                    <Footer />\n                </div>\n            : <Game socket={socket} onRouteChange={onRouteChange} />\n            // <>\n            //     {\n            //     route === 'leaderboard'\n            //     ?\n            //     <div className='leaderboard'>\n            //         <Leaderboard onRouteChange={onRouteChange} socket={socket} />\n            //         <Footer />\n            //     </div>\n            //     :\n            //     <Game socket={socket} onRouteChange={onRouteChange} />\n            //     }\n            // </>\n            }\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import 'react-app-polyfill/ie11';\nimport 'react-app-polyfill/ie9';\nimport 'react-app-polyfill/stable';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StoreProvider, createStore } from 'easy-peasy';\nimport model from './model';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst store = createStore(model);\n\nReactDOM.render(\n  <StoreProvider store={store}>\n        <App />\n    </StoreProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}